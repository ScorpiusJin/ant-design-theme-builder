[{"name":"affix","demos":[{"name":"basic","content":"---\norder: 0\ntitle:\n  zh-CN: 基本\n  en-US: Basic\n---\n\n## zh-CN\n\n最简单的用法。\n\n## en-US\n\nThe simplest usage.\n\n````jsx\nimport { Affix, Button } from 'antd';\n\nReactDOM.render(\n  <div>\n    <Affix>\n      <Button type=\"primary\">Affix top</Button>\n    </Affix>\n    <br />\n    <Affix offsetBottom={0}>\n      <Button type=\"primary\">Affix bottom</Button>\n    </Affix>\n  </div>,\n  mountNode\n);\n````\n","jsCodes":["import React from 'react';\nimport { Affix, Button } from 'antd';\n\nexport default function DemoComponent_affix_basic() {\nreturn(\n  <div>\n    <Affix>\n      <Button type=\"primary\">Affix top</Button>\n    </Affix>\n    <br />\n    <Affix offsetBottom={0}>\n      <Button type=\"primary\">Affix bottom</Button>\n    </Affix>\n  </div>);\n};\n\nexport const demo = <DemoComponent_affix_basic key=\"DemoComponent_affix_basic\" />;\n"],"cssCodes":[]},{"name":"on_change","content":"---\norder: 1\ntitle:\n  zh-CN: 固定状态改变的回调\n  en-US: Callback\n---\n\n## zh-CN\n\n可以获得是否固定的状态。\n\n## en-US\n\nCallback with affixed state.\n\n````jsx\nimport { Affix, Button } from 'antd';\n\nReactDOM.render(\n  <Affix offsetTop={120} onChange={affixed => console.log(affixed)}>\n    <Button>120px to affix top</Button>\n  </Affix>,\n  mountNode\n);\n````\n","jsCodes":["import React from 'react';\nimport { Affix, Button } from 'antd';\n\nexport default function DemoComponent_affix_on_change() {\nreturn(\n  <Affix offsetTop={120} onChange={affixed => console.log(affixed)}>\n    <Button>120px to affix top</Button>\n  </Affix>);\n};\n\nexport const demo = <DemoComponent_affix_on_change key=\"DemoComponent_affix_on_change\" />;\n"],"cssCodes":[]},{"name":"target","content":"---\norder: 2\ntitle:\n  zh-CN: 滚动容器\n  en-US: Container to scroll.\n---\n\n## zh-CN\n\n用 `target` 设置 `Affix` 需要监听其滚动事件的元素，默认为 `window`。\n\n## en-US\n\nSet a `target` for 'Affix', which is listen to scroll event of target element (default is `window`).\n\n````jsx\nimport { Affix, Button } from 'antd';\n\nclass Demo extends React.Component {\n  render() {\n    return (\n      <div className=\"scrollable-container\" ref={(node) => { this.container = node; }}>\n        <div className=\"background\">\n          <Affix target={() => this.container}>\n            <Button type=\"primary\">\n              Fixed at the top of container\n            </Button>\n          </Affix>\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n````\n\n<style>\n#components-affix-demo-target .scrollable-container {\n  height: 100px;\n  overflow-y: scroll;\n}\n#components-affix-demo-target .background {\n  padding-top: 60px;\n  height: 300px;\n  background-image: url('https://zos.alipayobjects.com/rmsportal/RmjwQiJorKyobvI.jpg');\n}\n</style>\n","jsCodes":["import React from 'react';\nimport { Affix, Button } from 'antd';\n\nclass Demo extends React.Component {\n  render() {\n    return (\n      <div className=\"scrollable-container\" ref={(node) => { this.container = node; }}>\n        <div className=\"background\">\n          <Affix target={() => this.container}>\n            <Button type=\"primary\">\n              Fixed at the top of container\n            </Button>\n          </Affix>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_affix_target() {\nreturn(<Demo />);\n};\n\nexport const demo = <DemoComponent_affix_target key=\"DemoComponent_affix_target\" />;\n"],"cssCodes":[]}]},{"name":"alert","demos":[{"name":"banner","content":"---\norder: 6\niframe: 250\ntitle:\n  zh-CN: 顶部公告\n  en-US: Banner\n---\n\n## zh-CN\n\n页面顶部通告形式，默认有图标且`type` 为 'warning'。\n\n## en-US\n\nDisplay Alert as a banner at top of page.\n\n````jsx\nimport { Alert } from 'antd';\n\nReactDOM.render(\n  <div>\n    <Alert message=\"Warning text\" banner />\n    <br />\n    <Alert message=\"Very long warning text warning text text text text text text text\" banner closable />\n    <br />\n    <Alert showIcon={false} message=\"Warning text without icon\" banner />\n    <br />\n    <Alert type=\"error\" message=\"Error text\" banner />\n  </div>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Alert } from 'antd';\n\nexport default function DemoComponent_alert_banner() {\nreturn(\n  <div>\n    <Alert message=\"Warning text\" banner />\n    <br />\n    <Alert message=\"Very long warning text warning text text text text text text text\" banner closable />\n    <br />\n    <Alert showIcon={false} message=\"Warning text without icon\" banner />\n    <br />\n    <Alert type=\"error\" message=\"Error text\" banner />\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_alert_banner key=\"DemoComponent_alert_banner\" />;\n"],"cssCodes":[]},{"name":"basic","content":"---\norder: 0\ntitle:\n  zh-CN: 基本\n  en-US: Basic\n---\n\n## zh-CN\n\n最简单的用法，适用于简短的警告提示。\n\n## en-US\n\nThe simplest usage for short messages.\n\n````jsx\nimport { Alert } from 'antd';\n\nReactDOM.render(\n  <Alert message=\"Success Text\" type=\"success\" />\n, mountNode);\n````\n\n<style>\n.ant-alert {\n  margin-bottom: 16px;\n}\n</style>\n","jsCodes":["import React from 'react';\nimport { Alert } from 'antd';\n\nexport default function DemoComponent_alert_basic() {\nreturn(\n  <Alert message=\"Success Text\" type=\"success\" />\n);\n};\n\nexport const demo = <DemoComponent_alert_basic key=\"DemoComponent_alert_basic\" />;\n"],"cssCodes":[]},{"name":"closable","content":"---\norder: 2\ntitle:\n  zh-CN: 可关闭的警告提示\n  en-US: Closable\n---\n\n## zh-CN\n\n显示关闭按钮，点击可关闭警告提示。\n\n## en-US\n\nTo show close button.\n\n````jsx\nimport { Alert } from 'antd';\n\nconst onClose = function (e) {\n  console.log(e, 'I was closed.');\n};\n\nReactDOM.render(<div>\n  <Alert message=\"Warning Text Warning Text Warning TextW arning Text Warning Text Warning TextWarning Text\"\n    type=\"warning\"\n    closable\n    onClose={onClose}\n  />\n  <Alert message=\"Error Text\"\n    description=\"Error Description Error Description Error Description Error Description Error Description Error Description\"\n    type=\"error\"\n    closable\n    onClose={onClose}\n  />\n</div>, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Alert } from 'antd';\n\nconst onClose = function (e) {\n  console.log(e, 'I was closed.');\n};\n\nexport default function DemoComponent_alert_closable() {\nreturn(<div>\n  <Alert message=\"Warning Text Warning Text Warning TextW arning Text Warning Text Warning TextWarning Text\"\n    type=\"warning\"\n    closable\n    onClose={onClose}\n  />\n  <Alert message=\"Error Text\"\n    description=\"Error Description Error Description Error Description Error Description Error Description Error Description\"\n    type=\"error\"\n    closable\n    onClose={onClose}\n  />\n</div>);\n};\n\nexport const demo = <DemoComponent_alert_closable key=\"DemoComponent_alert_closable\" />;\n"],"cssCodes":[]},{"name":"close_text","content":"---\norder: 5\ntitle:\n  zh-CN: 自定义关闭\n  en-US: Customized Close Text\n---\n\n## zh-CN\n\n可以自定义关闭，自定义的文字会替换原先的关闭 `Icon`。\n\n## en-US\n\nReplace the default icon with customized text.\n\n````jsx\nimport { Alert } from 'antd';\n\nReactDOM.render(\n  <Alert message=\"Info Text\" type=\"info\" closeText=\"Close Now\" />\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Alert } from 'antd';\n\nexport default function DemoComponent_alert_close_text() {\nreturn(\n  <Alert message=\"Info Text\" type=\"info\" closeText=\"Close Now\" />\n);\n};\n\nexport const demo = <DemoComponent_alert_close_text key=\"DemoComponent_alert_close_text\" />;\n"],"cssCodes":[]},{"name":"description","content":"---\norder: 3\ntitle:\n  zh-CN: 含有辅助性文字介绍\n  en-US: Description\n---\n\n## zh-CN\n\n含有辅助性文字介绍的警告提示。\n\n## en-US\n\nAdditional description for alert message.\n\n````jsx\nimport { Alert } from 'antd';\n\nReactDOM.render(<div>\n  <Alert\n    message=\"Success Text\"\n    description=\"Success Description Success Description Success Description\"\n    type=\"success\"\n  />\n  <Alert\n    message=\"Info Text\"\n    description=\"Info Description Info Description Info Description Info Description\"\n    type=\"info\"\n  />\n  <Alert\n    message=\"Warning Text\"\n    description=\"Warning Description Warning Description Warning Description Warning Description\"\n    type=\"warning\"\n  />\n  <Alert\n    message=\"Error Text\"\n    description=\"Error Description Error Description Error Description Error Description\"\n    type=\"error\"\n  />\n</div>, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Alert } from 'antd';\n\nexport default function DemoComponent_alert_description() {\nreturn(<div>\n  <Alert\n    message=\"Success Text\"\n    description=\"Success Description Success Description Success Description\"\n    type=\"success\"\n  />\n  <Alert\n    message=\"Info Text\"\n    description=\"Info Description Info Description Info Description Info Description\"\n    type=\"info\"\n  />\n  <Alert\n    message=\"Warning Text\"\n    description=\"Warning Description Warning Description Warning Description Warning Description\"\n    type=\"warning\"\n  />\n  <Alert\n    message=\"Error Text\"\n    description=\"Error Description Error Description Error Description Error Description\"\n    type=\"error\"\n  />\n</div>);\n};\n\nexport const demo = <DemoComponent_alert_description key=\"DemoComponent_alert_description\" />;\n"],"cssCodes":[]},{"name":"icon","content":"---\norder: 4\ntitle:\n  zh-CN: 图标\n  en-US: Icon\n---\n\n## zh-CN\n\n可口的图标让信息类型更加醒目。\n\n## en-US\n\nDecent icon make information more clear and more friendly.\n\n````jsx\nimport { Alert } from 'antd';\n\nReactDOM.render(<div>\n  <Alert message=\"Success Tips\" type=\"success\" showIcon />\n  <Alert message=\"Informational Notes\" type=\"info\" showIcon />\n  <Alert message=\"Warning\" type=\"warning\" showIcon />\n  <Alert message=\"Error\" type=\"error\" showIcon />\n  <Alert\n    message=\"success tips\"\n    description=\"Detailed description and advices about successful copywriting.\"\n    type=\"success\"\n    showIcon\n  />\n  <Alert\n    message=\"Informational Notes\"\n    description=\"Additional description and informations about copywriting.\"\n    type=\"info\"\n    showIcon\n  />\n  <Alert\n    message=\"Warning\"\n    description=\"This is a warning notice about copywriting.\"\n    type=\"warning\"\n    showIcon\n  />\n  <Alert\n    message=\"Error\"\n    description=\"This is an error message about copywriting.\"\n    type=\"error\"\n    showIcon\n  />\n</div>, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Alert } from 'antd';\n\nexport default function DemoComponent_alert_icon() {\nreturn(<div>\n  <Alert message=\"Success Tips\" type=\"success\" showIcon />\n  <Alert message=\"Informational Notes\" type=\"info\" showIcon />\n  <Alert message=\"Warning\" type=\"warning\" showIcon />\n  <Alert message=\"Error\" type=\"error\" showIcon />\n  <Alert\n    message=\"success tips\"\n    description=\"Detailed description and advices about successful copywriting.\"\n    type=\"success\"\n    showIcon\n  />\n  <Alert\n    message=\"Informational Notes\"\n    description=\"Additional description and informations about copywriting.\"\n    type=\"info\"\n    showIcon\n  />\n  <Alert\n    message=\"Warning\"\n    description=\"This is a warning notice about copywriting.\"\n    type=\"warning\"\n    showIcon\n  />\n  <Alert\n    message=\"Error\"\n    description=\"This is an error message about copywriting.\"\n    type=\"error\"\n    showIcon\n  />\n</div>);\n};\n\nexport const demo = <DemoComponent_alert_icon key=\"DemoComponent_alert_icon\" />;\n"],"cssCodes":[]},{"name":"style","content":"---\norder: 1\ntitle:\n  zh-CN: 四种样式\n  en-US: More types\n---\n\n## zh-CN\n\n共有四种样式 `success`、`info`、`warning`、`error`。\n\n## en-US\n\nThere are 4 types of Alert: `success`, `info`, `warning`, `error`.\n\n````jsx\nimport { Alert } from 'antd';\n\nReactDOM.render(<div>\n  <Alert message=\"Success Text\" type=\"success\" />\n  <Alert message=\"Info Text\" type=\"info\" />\n  <Alert message=\"Warning Text\" type=\"warning\" />\n  <Alert message=\"Error Text\" type=\"error\" />\n</div>, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Alert } from 'antd';\n\nexport default function DemoComponent_alert_style() {\nreturn(<div>\n  <Alert message=\"Success Text\" type=\"success\" />\n  <Alert message=\"Info Text\" type=\"info\" />\n  <Alert message=\"Warning Text\" type=\"warning\" />\n  <Alert message=\"Error Text\" type=\"error\" />\n</div>);\n};\n\nexport const demo = <DemoComponent_alert_style key=\"DemoComponent_alert_style\" />;\n"],"cssCodes":[]}]},{"name":"anchor","demos":[{"name":"basic","content":"---\norder: 0\ntitle:\n  zh-CN: 基本\n  en-US: Basic\n---\n\n## zh-CN\n\n最简单的用法。\n\n## en-US\n\nThe simplest usage.\n\n```jsx\nimport { Anchor } from 'antd';\nconst { Link } = Anchor;\n\nReactDOM.render(\n  <Anchor>\n    <Link href=\"#components-anchor-demo-basic\" title=\"Basic demo\" />\n    <Link href=\"#components-anchor-demo-fixed\" title=\"Fixed demo\" />\n    <Link href=\"#API\" title=\"API\">\n      <Link href=\"#Anchor-Props\" title=\"Anchor Props\" />\n      <Link href=\"#Link-Props\" title=\"Link Props\" />\n    </Link>\n  </Anchor>\n, mountNode);\n```\n\n<style>\n.code-box-demo .ant-affix {\n  z-index: 11;\n}\n</style>\n","jsCodes":[],"cssCodes":[]},{"name":"fixed","content":"---\norder: 2\ntitle:\n  zh-CN: 固定\n  en-US: Fixed Anchor\n---\n\n## zh-CN\n\n不浮动，状态不随页面滚动变化。\n\n## en-US\n\nDo not change state when page is scrolling.\n\n```jsx\nimport { Anchor } from 'antd';\nconst { Link } = Anchor;\n\nReactDOM.render(\n  <Anchor affix={false}>\n    <Link href=\"#components-anchor-demo-basic\" title=\"Basic demo\" />\n    <Link href=\"#components-anchor-demo-fixed\" title=\"Fixed demo\" />\n    <Link href=\"#API\" title=\"API\">\n      <Link href=\"#Anchor-Props\" title=\"Anchor Props\" />\n      <Link href=\"#Link-Props\" title=\"Link Props\" />\n    </Link>\n  </Anchor>\n, mountNode);\n```\n","jsCodes":[],"cssCodes":[]}]},{"name":"auto_complete","demos":[{"name":"antd","content":"---\norder: 3\ntitle:\n  zh-CN: 自定义输入组件\n  en-US: Customize Input Component\n---\n\n## zh-CN\n\n自定义输入组件。\n\n## en-US\n\nCustomize Input Component\n\n````jsx\nimport { AutoComplete, Input } from 'antd';\nconst { TextArea } = Input;\n\nfunction onSelect(value) {\n  console.log('onSelect', value);\n}\n\nclass Complete extends React.Component {\n  state = {\n    dataSource: [],\n  }\n\n  handleSearch = (value) => {\n    this.setState({\n      dataSource: !value ? [] : [\n        value,\n        value + value,\n        value + value + value,\n      ],\n    });\n  }\n\n  handleKeyPress = (ev) => {\n    console.log('handleKeyPress', ev);\n  }\n\n  render() {\n    const { dataSource } = this.state;\n    return (\n      <AutoComplete\n        dataSource={dataSource}\n        style={{ width: 200, height: 50 }}\n        onSelect={onSelect}\n        onSearch={this.handleSearch}\n        placeholder=\"input here\"\n      >\n        <TextArea onKeyPress={this.handleKeyPress} style={{ height: 50 }} />\n      </AutoComplete>\n    );\n  }\n}\n\nReactDOM.render(<Complete />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { AutoComplete, Input } from 'antd';\nconst { TextArea } = Input;\n\nfunction onSelect(value) {\n  console.log('onSelect', value);\n}\n\nclass Complete extends React.Component {\n  state = {\n    dataSource: [],\n  }\n\n  handleSearch = (value) => {\n    this.setState({\n      dataSource: !value ? [] : [\n        value,\n        value + value,\n        value + value + value,\n      ],\n    });\n  }\n\n  handleKeyPress = (ev) => {\n    console.log('handleKeyPress', ev);\n  }\n\n  render() {\n    const { dataSource } = this.state;\n    return (\n      <AutoComplete\n        dataSource={dataSource}\n        style={{ width: 200, height: 50 }}\n        onSelect={onSelect}\n        onSearch={this.handleSearch}\n        placeholder=\"input here\"\n      >\n        <TextArea onKeyPress={this.handleKeyPress} style={{ height: 50 }} />\n      </AutoComplete>\n    );\n  }\n}\n\nexport default function DemoComponent_auto_complete_antd() {\nreturn(<Complete />);\n};\n\nexport const demo = <DemoComponent_auto_complete_antd key=\"DemoComponent_auto_complete_antd\" />;\n"],"cssCodes":[]},{"name":"basic","content":"---\norder: 0\ntitle:\n  zh-CN: 基本使用\n  en-US: Basic Usage\n---\n\n## zh-CN\n\n基本使用。通过 dataSource 设置自动完成的数据源\n\n## en-US\n\nBasic Usage, set datasource of autocomplete with `dataSource` property.\n\n````jsx\nimport { AutoComplete } from 'antd';\n\nfunction onSelect(value) {\n  console.log('onSelect', value);\n}\n\nclass Complete extends React.Component {\n  state = {\n    dataSource: [],\n  }\n\n  handleSearch = (value) => {\n    this.setState({\n      dataSource: !value ? [] : [\n        value,\n        value + value,\n        value + value + value,\n      ],\n    });\n  }\n\n  render() {\n    const { dataSource } = this.state;\n    return (\n      <AutoComplete\n        dataSource={dataSource}\n        style={{ width: 200 }}\n        onSelect={onSelect}\n        onSearch={this.handleSearch}\n        placeholder=\"input here\"\n      />\n    );\n  }\n}\n\nReactDOM.render(<Complete />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { AutoComplete } from 'antd';\n\nfunction onSelect(value) {\n  console.log('onSelect', value);\n}\n\nclass Complete extends React.Component {\n  state = {\n    dataSource: [],\n  }\n\n  handleSearch = (value) => {\n    this.setState({\n      dataSource: !value ? [] : [\n        value,\n        value + value,\n        value + value + value,\n      ],\n    });\n  }\n\n  render() {\n    const { dataSource } = this.state;\n    return (\n      <AutoComplete\n        dataSource={dataSource}\n        style={{ width: 200 }}\n        onSelect={onSelect}\n        onSearch={this.handleSearch}\n        placeholder=\"input here\"\n      />\n    );\n  }\n}\n\nexport default function DemoComponent_auto_complete_basic() {\nreturn(<Complete />);\n};\n\nexport const demo = <DemoComponent_auto_complete_basic key=\"DemoComponent_auto_complete_basic\" />;\n"],"cssCodes":[]},{"name":"certain_category","content":"---\norder: 4\ntitle:\n  zh-CN: 查询模式 - 确定类目\n  en-US: Lookup-Patterns - Certain Category\n---\n\n## zh-CN\n\n[查询模式: 确定类目](https://ant.design/docs/spec/reaction#Lookup-Patterns) 示例。\n\n## en-US\n\nDemonstration of [Lookup Patterns: Certain Category](https://ant.design/docs/spec/reaction#Lookup-Patterns).\nBasic Usage, set datasource of autocomplete with `dataSource` property.\n\n````jsx\nimport { Icon, Input, AutoComplete } from 'antd';\nconst Option = AutoComplete.Option;\nconst OptGroup = AutoComplete.OptGroup;\n\nconst dataSource = [{\n  title: '话题',\n  children: [{\n    title: 'AntDesign',\n    count: 10000,\n  }, {\n    title: 'AntDesign UI',\n    count: 10600,\n  }],\n}, {\n  title: '问题',\n  children: [{\n    title: 'AntDesign UI 有多好',\n    count: 60100,\n  }, {\n    title: 'AntDesign 是啥',\n    count: 30010,\n  }],\n}, {\n  title: '文章',\n  children: [{\n    title: 'AntDesign 是一个设计语言',\n    count: 100000,\n  }],\n}];\n\nfunction renderTitle(title) {\n  return (\n    <span>\n      {title}\n      <a\n        style={{ float: 'right' }}\n        href=\"https://www.google.com/search?q=antd\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >更多\n      </a>\n    </span>\n  );\n}\n\nconst options = dataSource.map(group => (\n  <OptGroup\n    key={group.title}\n    label={renderTitle(group.title)}\n  >\n    {group.children.map(opt => (\n      <Option key={opt.title} value={opt.title}>\n        {opt.title}\n        <span className=\"certain-search-item-count\">{opt.count} 人 关注</span>\n      </Option>\n    ))}\n  </OptGroup>\n)).concat([\n  <Option disabled key=\"all\" className=\"show-all\">\n    <a\n      href=\"https://www.google.com/search?q=antd\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      查看所有结果\n    </a>\n  </Option>,\n]);\n\nfunction Complete() {\n  return (\n    <div className=\"certain-category-search-wrapper\" style={{ width: 250 }}>\n      <AutoComplete\n        className=\"certain-category-search\"\n        dropdownClassName=\"certain-category-search-dropdown\"\n        dropdownMatchSelectWidth={false}\n        dropdownStyle={{ width: 300 }}\n        size=\"large\"\n        style={{ width: '100%' }}\n        dataSource={options}\n        placeholder=\"input here\"\n        optionLabelProp=\"value\"\n      >\n        <Input suffix={<Icon type=\"search\" className=\"certain-category-icon\" />} />\n      </AutoComplete>\n    </div>\n  );\n}\n\nReactDOM.render(<Complete />, mountNode);\n````\n\n````css\n.certain-category-search.ant-select-auto-complete .ant-input-affix-wrapper .ant-input-suffix {\n  right: 12px;\n}\n\n.certain-category-search-dropdown .ant-select-dropdown-menu-item-group-title {\n  color: #666;\n  font-weight: bold;\n}\n\n.certain-category-search-dropdown .ant-select-dropdown-menu-item-group {\n  border-bottom: 1px solid #F6F6F6;\n}\n\n.certain-category-search-dropdown .ant-select-dropdown-menu-item {\n  padding-left: 16px;\n}\n\n.certain-category-search-dropdown .ant-select-dropdown-menu-item.show-all {\n  text-align: center;\n  cursor: default;\n}\n\n.certain-category-search-dropdown .ant-select-dropdown-menu {\n  max-height: 300px;\n}\n\n.certain-search-item-count {\n position: absolute;\n color: #999;\n right: 16px;\n}\n\n.certain-category-search.ant-select-focused .certain-category-icon {\n  color: #108ee9;\n}\n\n.certain-category-icon {\n  color: #6E6E6E;\n  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);\n  font-size: 16px;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Icon, Input, AutoComplete } from 'antd';\nconst Option = AutoComplete.Option;\nconst OptGroup = AutoComplete.OptGroup;\n\nconst dataSource = [{\n  title: '话题',\n  children: [{\n    title: 'AntDesign',\n    count: 10000,\n  }, {\n    title: 'AntDesign UI',\n    count: 10600,\n  }],\n}, {\n  title: '问题',\n  children: [{\n    title: 'AntDesign UI 有多好',\n    count: 60100,\n  }, {\n    title: 'AntDesign 是啥',\n    count: 30010,\n  }],\n}, {\n  title: '文章',\n  children: [{\n    title: 'AntDesign 是一个设计语言',\n    count: 100000,\n  }],\n}];\n\nfunction renderTitle(title) {\n  return (\n    <span>\n      {title}\n      <a\n        style={{ float: 'right' }}\n        href=\"https://www.google.com/search?q=antd\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >更多\n      </a>\n    </span>\n  );\n}\n\nconst options = dataSource.map(group => (\n  <OptGroup\n    key={group.title}\n    label={renderTitle(group.title)}\n  >\n    {group.children.map(opt => (\n      <Option key={opt.title} value={opt.title}>\n        {opt.title}\n        <span className=\"certain-search-item-count\">{opt.count} 人 关注</span>\n      </Option>\n    ))}\n  </OptGroup>\n)).concat([\n  <Option disabled key=\"all\" className=\"show-all\">\n    <a\n      href=\"https://www.google.com/search?q=antd\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      查看所有结果\n    </a>\n  </Option>,\n]);\n\nfunction Complete() {\n  return (\n    <div className=\"certain-category-search-wrapper\" style={{ width: 250 }}>\n      <AutoComplete\n        className=\"certain-category-search\"\n        dropdownClassName=\"certain-category-search-dropdown\"\n        dropdownMatchSelectWidth={false}\n        dropdownStyle={{ width: 300 }}\n        size=\"large\"\n        style={{ width: '100%' }}\n        dataSource={options}\n        placeholder=\"input here\"\n        optionLabelProp=\"value\"\n      >\n        <Input suffix={<Icon type=\"search\" className=\"certain-category-icon\" />} />\n      </AutoComplete>\n    </div>\n  );\n}\n\nexport default function DemoComponent_auto_complete_certain_category() {\nreturn(<Complete />);\n};\n\nexport const demo = <DemoComponent_auto_complete_certain_category key=\"DemoComponent_auto_complete_certain_category\" />;\n"],"cssCodes":[".certain-category-search.ant-select-auto-complete .ant-input-affix-wrapper .ant-input-suffix {\n  right: 12px;\n}\n\n.certain-category-search-dropdown .ant-select-dropdown-menu-item-group-title {\n  color: #666;\n  font-weight: bold;\n}\n\n.certain-category-search-dropdown .ant-select-dropdown-menu-item-group {\n  border-bottom: 1px solid #F6F6F6;\n}\n\n.certain-category-search-dropdown .ant-select-dropdown-menu-item {\n  padding-left: 16px;\n}\n\n.certain-category-search-dropdown .ant-select-dropdown-menu-item.show-all {\n  text-align: center;\n  cursor: default;\n}\n\n.certain-category-search-dropdown .ant-select-dropdown-menu {\n  max-height: 300px;\n}\n\n.certain-search-item-count {\n position: absolute;\n color: #999;\n right: 16px;\n}\n\n.certain-category-search.ant-select-focused .certain-category-icon {\n  color: #108ee9;\n}\n\n.certain-category-icon {\n  color: #6E6E6E;\n  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);\n  font-size: 16px;\n}\n"]},{"name":"non_case_sensitive","content":"---\norder: 3\ntitle:\n  zh-CN: 不区分大小写\n  en-US: Non-case-sensitive AutoComplete\n---\n\n## zh-CN\n\n不区分大小写的 AutoComplete\n\n## en-US\n\nA non-case-sensitive AutoComplete\n\n````jsx\nimport { AutoComplete } from 'antd';\n\nconst dataSource = ['Burns Bay Road', 'Downing Street', 'Wall Street'];\n\nfunction Complete() {\n  return (\n    <AutoComplete\n      style={{ width: 200 }}\n      dataSource={dataSource}\n      placeholder=\"try to type `b`\"\n      filterOption={(inputValue, option) => option.props.children.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1}\n    />\n  );\n}\n\nReactDOM.render(<Complete />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { AutoComplete } from 'antd';\n\nconst dataSource = ['Burns Bay Road', 'Downing Street', 'Wall Street'];\n\nfunction Complete() {\n  return (\n    <AutoComplete\n      style={{ width: 200 }}\n      dataSource={dataSource}\n      placeholder=\"try to type `b`\"\n      filterOption={(inputValue, option) => option.props.children.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1}\n    />\n  );\n}\n\nexport default function DemoComponent_auto_complete_non_case_sensitive() {\nreturn(<Complete />);\n};\n\nexport const demo = <DemoComponent_auto_complete_non_case_sensitive key=\"DemoComponent_auto_complete_non_case_sensitive\" />;\n"],"cssCodes":[]},{"name":"options","content":"---\norder: 2\ntitle:\n  zh-CN: 自定义选项\n  en-US: Customized\n---\n\n## zh-CN\n\n也可以直接传 `AutoComplete.Option` 作为 `AutoComplete` 的 `children`，而非使用 `dataSource`。\n\n## en-US\n\nYou could pass `AutoComplete.Option` as children of `AutoComplete`, instead of using `dataSource`。\n\n````jsx\nimport { AutoComplete } from 'antd';\n\nconst Option = AutoComplete.Option;\n\nclass Complete extends React.Component {\n  state = {\n    result: [],\n  }\n\n  handleSearch = (value) => {\n    let result;\n    if (!value || value.indexOf('@') >= 0) {\n      result = [];\n    } else {\n      result = ['gmail.com', '163.com', 'qq.com'].map(domain => `${value}@${domain}`);\n    }\n    this.setState({ result });\n  }\n\n  render() {\n    const { result } = this.state;\n    const children = result.map((email) => {\n      return <Option key={email}>{email}</Option>;\n    });\n    return (\n      <AutoComplete\n        style={{ width: 200 }}\n        onSearch={this.handleSearch}\n        placeholder=\"input here\"\n      >\n        {children}\n      </AutoComplete>\n    );\n  }\n}\n\nReactDOM.render(<Complete />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { AutoComplete } from 'antd';\n\nconst Option = AutoComplete.Option;\n\nclass Complete extends React.Component {\n  state = {\n    result: [],\n  }\n\n  handleSearch = (value) => {\n    let result;\n    if (!value || value.indexOf('@') >= 0) {\n      result = [];\n    } else {\n      result = ['gmail.com', '163.com', 'qq.com'].map(domain => `${value}@${domain}`);\n    }\n    this.setState({ result });\n  }\n\n  render() {\n    const { result } = this.state;\n    const children = result.map((email) => {\n      return <Option key={email}>{email}</Option>;\n    });\n    return (\n      <AutoComplete\n        style={{ width: 200 }}\n        onSearch={this.handleSearch}\n        placeholder=\"input here\"\n      >\n        {children}\n      </AutoComplete>\n    );\n  }\n}\n\nexport default function DemoComponent_auto_complete_options() {\nreturn(<Complete />);\n};\n\nexport const demo = <DemoComponent_auto_complete_options key=\"DemoComponent_auto_complete_options\" />;\n"],"cssCodes":[]},{"name":"uncertain_category","content":"---\norder: 5\ntitle:\n  zh-CN: 查询模式 - 不确定类目\n  en-US: Lookup-Patterns - Uncertain Category\n---\n\n## zh-CN\n\n[查询模式: 不确定类目](https://ant.design/docs/spec/reaction#Lookup-Patterns) 示例。\n\n## en-US\n\nDemonstration of [Lookup Patterns: Uncertain Category](https://ant.design/docs/spec/reaction#Lookup-Patterns).\nBasic Usage, set datasource of autocomplete with `dataSource` property.\n\n````jsx\nimport { Icon, Button, Input, AutoComplete } from 'antd';\nconst Option = AutoComplete.Option;\n\nfunction onSelect(value) {\n  console.log('onSelect', value);\n}\n\nfunction getRandomInt(max, min = 0) {\n  return Math.floor(Math.random() * (max - min + 1)) + min; // eslint-disable-line no-mixed-operators\n}\n\nfunction searchResult(query) {\n  return (new Array(getRandomInt(5))).join('.').split('.')\n    .map((item, idx) => ({\n      query,\n      category: `${query}${idx}`,\n      count: getRandomInt(200, 100),\n    }));\n}\n\nfunction renderOption(item) {\n  return (\n    <Option key={item.category} text={item.category}>\n      {item.query} 在\n      <a\n        href={`https://s.taobao.com/search?q=${item.query}`}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {item.category}\n      </a>\n      区块中\n      <span className=\"global-search-item-count\">约 {item.count} 个结果</span>\n    </Option>\n  );\n}\n\nclass Complete extends React.Component {\n  state = {\n    dataSource: [],\n  }\n\n  handleSearch = (value) => {\n    this.setState({\n      dataSource: value ? searchResult(value) : [],\n    });\n  }\n\n  render() {\n    const { dataSource } = this.state;\n    return (\n      <div className=\"global-search-wrapper\" style={{ width: 300 }}>\n        <AutoComplete\n          className=\"global-search\"\n          size=\"large\"\n          style={{ width: '100%' }}\n          dataSource={dataSource.map(renderOption)}\n          onSelect={onSelect}\n          onSearch={this.handleSearch}\n          placeholder=\"input here\"\n          optionLabelProp=\"text\"\n        >\n          <Input\n            suffix={(\n              <Button className=\"search-btn\" size=\"large\" type=\"primary\">\n                <Icon type=\"search\" />\n              </Button>\n            )}\n          />\n        </AutoComplete>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Complete />, mountNode);\n````\n\n````css\n.global-search-wrapper {\n  padding-right: 50px;\n}\n\n.global-search {\n  width: 100%;\n}\n\n.global-search.ant-select-auto-complete .ant-select-selection--single {\n  margin-right: -46px;\n}\n\n.global-search.ant-select-auto-complete .ant-input-affix-wrapper .ant-input:not(:last-child) {\n  padding-right: 62px;\n}\n\n.global-search.ant-select-auto-complete .ant-input-affix-wrapper .ant-input-suffix {\n  right: 0;\n}\n\n.global-search.ant-select-auto-complete .ant-input-affix-wrapper .ant-input-suffix button {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n\n.global-search-item-count {\n  position: absolute;\n  right: 16px;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Icon, Button, Input, AutoComplete } from 'antd';\nconst Option = AutoComplete.Option;\n\nfunction onSelect(value) {\n  console.log('onSelect', value);\n}\n\nfunction getRandomInt(max, min = 0) {\n  return Math.floor(Math.random() * (max - min + 1)) + min; // eslint-disable-line no-mixed-operators\n}\n\nfunction searchResult(query) {\n  return (new Array(getRandomInt(5))).join('.').split('.')\n    .map((item, idx) => ({\n      query,\n      category: `${query}${idx}`,\n      count: getRandomInt(200, 100),\n    }));\n}\n\nfunction renderOption(item) {\n  return (\n    <Option key={item.category} text={item.category}>\n      {item.query} 在\n      <a\n        href={`https://s.taobao.com/search?q=${item.query}`}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {item.category}\n      </a>\n      区块中\n      <span className=\"global-search-item-count\">约 {item.count} 个结果</span>\n    </Option>\n  );\n}\n\nclass Complete extends React.Component {\n  state = {\n    dataSource: [],\n  }\n\n  handleSearch = (value) => {\n    this.setState({\n      dataSource: value ? searchResult(value) : [],\n    });\n  }\n\n  render() {\n    const { dataSource } = this.state;\n    return (\n      <div className=\"global-search-wrapper\" style={{ width: 300 }}>\n        <AutoComplete\n          className=\"global-search\"\n          size=\"large\"\n          style={{ width: '100%' }}\n          dataSource={dataSource.map(renderOption)}\n          onSelect={onSelect}\n          onSearch={this.handleSearch}\n          placeholder=\"input here\"\n          optionLabelProp=\"text\"\n        >\n          <Input\n            suffix={(\n              <Button className=\"search-btn\" size=\"large\" type=\"primary\">\n                <Icon type=\"search\" />\n              </Button>\n            )}\n          />\n        </AutoComplete>\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_auto_complete_uncertain_category() {\nreturn(<Complete />);\n};\n\nexport const demo = <DemoComponent_auto_complete_uncertain_category key=\"DemoComponent_auto_complete_uncertain_category\" />;\n"],"cssCodes":[".global-search-wrapper {\n  padding-right: 50px;\n}\n\n.global-search {\n  width: 100%;\n}\n\n.global-search.ant-select-auto-complete .ant-select-selection--single {\n  margin-right: -46px;\n}\n\n.global-search.ant-select-auto-complete .ant-input-affix-wrapper .ant-input:not(:last-child) {\n  padding-right: 62px;\n}\n\n.global-search.ant-select-auto-complete .ant-input-affix-wrapper .ant-input-suffix {\n  right: 0;\n}\n\n.global-search.ant-select-auto-complete .ant-input-affix-wrapper .ant-input-suffix button {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n\n.global-search-item-count {\n  position: absolute;\n  right: 16px;\n}\n"]}]},{"name":"avatar","demos":[{"name":"badge","content":"---\norder: 3\ntitle:\n  zh-CN: 带徽标的头像\n  en-US: With Badge\n---\n\n## zh-CN\n\n通常用于消息提示。\n\n## en-US\n\nUsually used for messages remind.\n\n````jsx\nimport { Avatar, Badge } from 'antd';\n\nReactDOM.render(\n  <div>\n    <span style={{ marginRight: 24 }}>\n      <Badge count={1}><Avatar shape=\"square\" icon=\"user\" /></Badge>\n    </span>\n    <span>\n      <Badge dot><Avatar shape=\"square\" icon=\"user\" /></Badge>\n    </span>\n  </div>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Avatar, Badge } from 'antd';\n\nexport default function DemoComponent_avatar_badge() {\nreturn(\n  <div>\n    <span style={{ marginRight: 24 }}>\n      <Badge count={1}><Avatar shape=\"square\" icon=\"user\" /></Badge>\n    </span>\n    <span>\n      <Badge dot><Avatar shape=\"square\" icon=\"user\" /></Badge>\n    </span>\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_avatar_badge key=\"DemoComponent_avatar_badge\" />;\n"],"cssCodes":[]},{"name":"basic","content":"---\norder: 0\ntitle:\n  zh-CN: 基本\n  en-US: Basic\n---\n\n## zh-CN\n\n头像有三种尺寸，两种形状可选。\n\n## en-US\n\nThree sizes and two shapes are available.\n\n````jsx\nimport { Avatar } from 'antd';\n\nReactDOM.render(\n  <div>\n    <div>\n      <Avatar size=\"large\" icon=\"user\" />\n      <Avatar icon=\"user\" />\n      <Avatar size=\"small\" icon=\"user\" />\n    </div>\n    <div>\n      <Avatar shape=\"square\" size=\"large\" icon=\"user\" />\n      <Avatar shape=\"square\" icon=\"user\" />\n      <Avatar shape=\"square\" size=\"small\" icon=\"user\" />\n    </div>\n  </div>\n, mountNode);\n````\n\n<style>\n#components-avatar-demo-basic .ant-avatar {\n  margin-top: 16px;\n  margin-right: 16px;\n}\n</style>\n","jsCodes":["import React from 'react';\nimport { Avatar } from 'antd';\n\nexport default function DemoComponent_avatar_basic() {\nreturn(\n  <div>\n    <div>\n      <Avatar size=\"large\" icon=\"user\" />\n      <Avatar icon=\"user\" />\n      <Avatar size=\"small\" icon=\"user\" />\n    </div>\n    <div>\n      <Avatar shape=\"square\" size=\"large\" icon=\"user\" />\n      <Avatar shape=\"square\" icon=\"user\" />\n      <Avatar shape=\"square\" size=\"small\" icon=\"user\" />\n    </div>\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_avatar_basic key=\"DemoComponent_avatar_basic\" />;\n"],"cssCodes":[]},{"name":"dynamic","content":"---\norder: 2\ntitle:\n  zh-CN: 自动调整字符大小\n  en-US: Autoset Font Size\n---\n\n## zh-CN\n\n对于字符型的头像，当字符串较长时，字体大小可以根据头像宽度自动调整。\n\n## en-US\n\nFor letter type Avatar, when the letters are too long to display, the font size can be automatically adjusted according to the width of the Avatar.\n\n````jsx\nimport { Avatar, Button } from 'antd';\n\nconst UserList = ['U', 'Lucy', 'Tom', 'Edward'];\nconst colorList = ['#f56a00', '#7265e6', '#ffbf00', '#00a2ae'];\n\nclass Autoset extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: UserList[0],\n      color: colorList[0],\n    };\n  }\n  changeUser = () => {\n    const index = UserList.indexOf(this.state.user);\n    this.setState({\n      user: index < UserList.length - 1 ? UserList[index + 1] : UserList[0],\n      color: index < colorList.length - 1 ? colorList[index + 1] : colorList[0],\n    });\n  }\n  render() {\n    return (\n      <div>\n        <Avatar style={{ backgroundColor: this.state.color }} size=\"large\">{this.state.user}</Avatar>\n        <Button size=\"small\" style={{ marginLeft: 16 }} onClick={this.changeUser}>Change</Button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Autoset />\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Avatar, Button } from 'antd';\n\nconst UserList = ['U', 'Lucy', 'Tom', 'Edward'];\nconst colorList = ['#f56a00', '#7265e6', '#ffbf00', '#00a2ae'];\n\nclass Autoset extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: UserList[0],\n      color: colorList[0],\n    };\n  }\n  changeUser = () => {\n    const index = UserList.indexOf(this.state.user);\n    this.setState({\n      user: index < UserList.length - 1 ? UserList[index + 1] : UserList[0],\n      color: index < colorList.length - 1 ? colorList[index + 1] : colorList[0],\n    });\n  }\n  render() {\n    return (\n      <div>\n        <Avatar style={{ backgroundColor: this.state.color }} size=\"large\">{this.state.user}</Avatar>\n        <Button size=\"small\" style={{ marginLeft: 16 }} onClick={this.changeUser}>Change</Button>\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_avatar_dynamic() {\nreturn(<Autoset />\n);\n};\n\nexport const demo = <DemoComponent_avatar_dynamic key=\"DemoComponent_avatar_dynamic\" />;\n"],"cssCodes":[]},{"name":"type","content":"---\norder: 1\ntitle:\n  zh-CN: 类型\n  en-US: Type\n---\n\n## zh-CN\n\n支持三种类型：图片、Icon 以及字符，其中 Icon 和字符型可以自定义图标颜色及背景色。\n\n## en-US\n\nImage, Icon and letter are supported, and the latter two kinds avatar can have custom colors and background colors.\n\n````jsx\nimport { Avatar } from 'antd';\n\nReactDOM.render(\n  <div>\n    <Avatar icon=\"user\" />\n    <Avatar>U</Avatar>\n    <Avatar>USER</Avatar>\n    <Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />\n    <Avatar style={{ color: '#f56a00', backgroundColor: '#fde3cf' }}>U</Avatar>\n    <Avatar style={{ backgroundColor: '#87d068' }} icon=\"user\" />\n  </div>\n, mountNode);\n````\n\n<style>\n#components-avatar-demo-type .ant-avatar {\n  margin-top: 16px;\n  margin-right: 16px;\n}\n</style>\n","jsCodes":["import React from 'react';\nimport { Avatar } from 'antd';\n\nexport default function DemoComponent_avatar_type() {\nreturn(\n  <div>\n    <Avatar icon=\"user\" />\n    <Avatar>U</Avatar>\n    <Avatar>USER</Avatar>\n    <Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />\n    <Avatar style={{ color: '#f56a00', backgroundColor: '#fde3cf' }}>U</Avatar>\n    <Avatar style={{ backgroundColor: '#87d068' }} icon=\"user\" />\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_avatar_type key=\"DemoComponent_avatar_type\" />;\n"],"cssCodes":[]}]},{"name":"back_top","demos":[{"name":"basic","content":"---\norder: 0\ntitle:\n  zh-CN: 基本\n  en-US: Basic\n---\n\n## zh-CN\n\n最简单的用法。\n\n## en-US\n\nThe most basic usage.\n\n````jsx\nimport { BackTop } from 'antd';\n\nReactDOM.render(\n  <div>\n    <BackTop />\n    Scroll down to see the bottom-right\n    <strong style={{ color: 'rgba(64, 64, 64, 0.6)' }}> gray </strong>\n    button.\n  </div>,\n  mountNode\n);\n````\n","jsCodes":["import React from 'react';\nimport { BackTop } from 'antd';\n\nexport default function DemoComponent_back_top_basic() {\nreturn(\n  <div>\n    <BackTop />\n    Scroll down to see the bottom-right\n    <strong style={{ color: 'rgba(64, 64, 64, 0.6)' }}> gray </strong>\n    button.\n  </div>);\n};\n\nexport const demo = <DemoComponent_back_top_basic key=\"DemoComponent_back_top_basic\" />;\n"],"cssCodes":[]},{"name":"custom","content":"---\norder: 1\ntitle:\n  zh-CN: 自定义样式\n  en-US: Custom style\n---\n\n## zh-CN\n\n可以自定义回到顶部按钮的样式，限制宽高：`40px * 40px`。\n\n## en-US\n\nYou can customize the style of the button, just note the size limit: no more than `40px * 40px`.\n\n\n````jsx\nimport { BackTop } from 'antd';\n\nReactDOM.render(\n  <div>\n    <BackTop>\n      <div className=\"ant-back-top-inner\">UP</div>\n    </BackTop>\n    Scroll down to see the bottom-right\n    <strong style={{ color: '#1088e9' }}> blue </strong>\n    button.\n  </div>,\n  mountNode\n);\n````\n\n````css\n#components-back-top-demo-custom .ant-back-top {\n  bottom: 100px;\n}\n#components-back-top-demo-custom .ant-back-top-inner {\n  height: 40px;\n  width: 40px;\n  line-height: 40px;\n  border-radius: 4px;\n  background-color: #1088e9;\n  color: #fff;\n  text-align: center;\n  font-size: 20px;\n}\n````\n","jsCodes":["import React from 'react';\nimport { BackTop } from 'antd';\n\nexport default function DemoComponent_back_top_custom() {\nreturn(\n  <div>\n    <BackTop>\n      <div className=\"ant-back-top-inner\">UP</div>\n    </BackTop>\n    Scroll down to see the bottom-right\n    <strong style={{ color: '#1088e9' }}> blue </strong>\n    button.\n  </div>);\n};\n\nexport const demo = <DemoComponent_back_top_custom key=\"DemoComponent_back_top_custom\" />;\n"],"cssCodes":["#components-back-top-demo-custom .ant-back-top {\n  bottom: 100px;\n}\n#components-back-top-demo-custom .ant-back-top-inner {\n  height: 40px;\n  width: 40px;\n  line-height: 40px;\n  border-radius: 4px;\n  background-color: #1088e9;\n  color: #fff;\n  text-align: center;\n  font-size: 20px;\n}\n"]}]},{"name":"badge","demos":[{"name":"basic","content":"---\norder: 0\ntitle:\n  zh-CN: 基本\n  en-US: Basic\n---\n\n## zh-CN\n\n简单的徽章展示，当 `count` 为 `0` 时，默认不显示，但是可以使用 `showZero` 修改为显示。\n\n## en-US\n\nSimplest Usage. Badge will be hidden when `count` is `0`, but we can use `showZero` to show it.\n\n````jsx\nimport { Badge } from 'antd';\n\nReactDOM.render(\n  <div>\n    <Badge count={5}>\n      <a href=\"#\" className=\"head-example\" />\n    </Badge>\n    <Badge count={0} showZero>\n      <a href=\"#\" className=\"head-example\" />\n    </Badge>\n  </div>\n, mountNode);\n````\n\n<style>\n.ant-badge:not(.ant-badge-status) {\n  margin-right: 16px;\n}\n.head-example {\n  width: 42px;\n  height: 42px;\n  border-radius: 6px;\n  background: #eee;\n  display: inline-block;\n}\n</style>\n","jsCodes":["import React from 'react';\nimport { Badge } from 'antd';\n\nexport default function DemoComponent_badge_basic() {\nreturn(\n  <div>\n    <Badge count={5}>\n      <a href=\"#\" className=\"head-example\" />\n    </Badge>\n    <Badge count={0} showZero>\n      <a href=\"#\" className=\"head-example\" />\n    </Badge>\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_badge_basic key=\"DemoComponent_badge_basic\" />;\n"],"cssCodes":[]},{"name":"change","content":"---\norder: 4\ntitle:\n  zh-CN: 动态\n  en-US: Dynamic\n---\n\n## zh-CN\n\n展示动态变化的效果。\n\n## en-US\n\nThe count will be animated as it changes.\n\n````jsx\nimport { Badge, Button, Icon, Switch } from 'antd';\nconst ButtonGroup = Button.Group;\n\nclass Demo extends React.Component {\n  state = {\n    count: 5,\n    show: true,\n  }\n\n  increase = () => {\n    const count = this.state.count + 1;\n    this.setState({ count });\n  }\n\n  decline = () => {\n    let count = this.state.count - 1;\n    if (count < 0) {\n      count = 0;\n    }\n    this.setState({ count });\n  }\n\n  onChange = (show) => {\n    this.setState({ show });\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <Badge count={this.state.count}>\n            <a href=\"#\" className=\"head-example\" />\n          </Badge>\n          <ButtonGroup>\n            <Button onClick={this.decline}>\n              <Icon type=\"minus\" />\n            </Button>\n            <Button onClick={this.increase}>\n              <Icon type=\"plus\" />\n            </Button>\n          </ButtonGroup>\n        </div>\n        <div style={{ marginTop: 10 }}>\n          <Badge dot={this.state.show}>\n            <a href=\"#\" className=\"head-example\" />\n          </Badge>\n          <Switch onChange={this.onChange} />\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Badge, Button, Icon, Switch } from 'antd';\nconst ButtonGroup = Button.Group;\n\nclass Demo extends React.Component {\n  state = {\n    count: 5,\n    show: true,\n  }\n\n  increase = () => {\n    const count = this.state.count + 1;\n    this.setState({ count });\n  }\n\n  decline = () => {\n    let count = this.state.count - 1;\n    if (count < 0) {\n      count = 0;\n    }\n    this.setState({ count });\n  }\n\n  onChange = (show) => {\n    this.setState({ show });\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <Badge count={this.state.count}>\n            <a href=\"#\" className=\"head-example\" />\n          </Badge>\n          <ButtonGroup>\n            <Button onClick={this.decline}>\n              <Icon type=\"minus\" />\n            </Button>\n            <Button onClick={this.increase}>\n              <Icon type=\"plus\" />\n            </Button>\n          </ButtonGroup>\n        </div>\n        <div style={{ marginTop: 10 }}>\n          <Badge dot={this.state.show}>\n            <a href=\"#\" className=\"head-example\" />\n          </Badge>\n          <Switch onChange={this.onChange} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_badge_change() {\nreturn(<Demo />);\n};\n\nexport const demo = <DemoComponent_badge_change key=\"DemoComponent_badge_change\" />;\n"],"cssCodes":[]},{"name":"dot","content":"---\norder: 3\ntitle:\n  zh-CN: 讨嫌的小红点\n  en-US: Red badge\n---\n\n## zh-CN\n\n没有具体的数字。\n\n## en-US\n\nThis will simply display a red badge, without a specific count.\n\n````jsx\nimport { Badge, Icon } from 'antd';\n\nReactDOM.render(\n  <div>\n    <Badge dot>\n      <Icon type=\"notification\" />\n    </Badge>\n    <Badge dot>\n      <a href=\"#\">Link something</a>\n    </Badge>\n  </div>\n, mountNode);\n````\n\n<style>\n.anticon-notification {\n  width: 16px;\n  height: 16px;\n  line-height: 16px;\n  font-size: 16px;\n}\n</style>\n","jsCodes":["import React from 'react';\nimport { Badge, Icon } from 'antd';\n\nexport default function DemoComponent_badge_dot() {\nreturn(\n  <div>\n    <Badge dot>\n      <Icon type=\"notification\" />\n    </Badge>\n    <Badge dot>\n      <a href=\"#\">Link something</a>\n    </Badge>\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_badge_dot key=\"DemoComponent_badge_dot\" />;\n"],"cssCodes":[]},{"name":"link","content":"---\norder: 3\ntitle:\n  zh-CN: 可点击\n  en-US: Clickable\n---\n\n## zh-CN\n\n用 a 标签进行包裹即可。\n\n## en-US\n\nThe badge can be wrapped with `a` tag to make it linkable.\n\n````jsx\nimport { Badge } from 'antd';\n\nReactDOM.render(\n  <a href=\"#\">\n    <Badge count={5}>\n      <span className=\"head-example\" />\n    </Badge>\n  </a>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Badge } from 'antd';\n\nexport default function DemoComponent_badge_link() {\nreturn(\n  <a href=\"#\">\n    <Badge count={5}>\n      <span className=\"head-example\" />\n    </Badge>\n  </a>\n);\n};\n\nexport const demo = <DemoComponent_badge_link key=\"DemoComponent_badge_link\" />;\n"],"cssCodes":[]},{"name":"no_wrapper","content":"---\norder: 1\ntitle:\n  zh-CN: 独立使用\n  en-US: Standalone\n---\n\n## zh-CN\n\n不包裹任何元素即是独立使用，可自定样式展现。\n\n> 在右上角的 badge 则限定为红色。\n\n## en-US\n\nUsed in standalone when children is empty.\n\n````jsx\nimport { Badge } from 'antd';\n\nReactDOM.render(\n  <div>\n    <Badge count={25} />\n    <Badge count={4} style={{ backgroundColor: '#fff', color: '#999', boxShadow: '0 0 0 1px #d9d9d9 inset' }} />\n    <Badge count={109} style={{ backgroundColor: '#87d068' }} />\n  </div>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Badge } from 'antd';\n\nexport default function DemoComponent_badge_no_wrapper() {\nreturn(\n  <div>\n    <Badge count={25} />\n    <Badge count={4} style={{ backgroundColor: '#fff', color: '#999', boxShadow: '0 0 0 1px #d9d9d9 inset' }} />\n    <Badge count={109} style={{ backgroundColor: '#87d068' }} />\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_badge_no_wrapper key=\"DemoComponent_badge_no_wrapper\" />;\n"],"cssCodes":[]},{"name":"overflow","content":"---\norder: 2\ntitle:\n  zh-CN: 封顶数字\n  en-US: Overflow Count\n---\n\n## zh-CN\n\n超过 `overflowCount` 的会显示为 `${overflowCount}+`，默认的 `overflowCount` 为 `99`。\n\n## en-US\n\n`${overflowCount}+` is displayed when count is larger than `overflowCount`. The default value of `overflowCount` is `99`.\n\n````jsx\nimport { Badge } from 'antd';\n\nReactDOM.render(\n  <div>\n    <Badge count={99}>\n      <a href=\"#\" className=\"head-example\" />\n    </Badge>\n    <Badge count={100}>\n      <a href=\"#\" className=\"head-example\" />\n    </Badge>\n    <Badge count={99} overflowCount={10}>\n      <a href=\"#\" className=\"head-example\" />\n    </Badge>\n    <Badge count={1000} overflowCount={999}>\n      <a href=\"#\" className=\"head-example\" />\n    </Badge>\n  </div>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Badge } from 'antd';\n\nexport default function DemoComponent_badge_overflow() {\nreturn(\n  <div>\n    <Badge count={99}>\n      <a href=\"#\" className=\"head-example\" />\n    </Badge>\n    <Badge count={100}>\n      <a href=\"#\" className=\"head-example\" />\n    </Badge>\n    <Badge count={99} overflowCount={10}>\n      <a href=\"#\" className=\"head-example\" />\n    </Badge>\n    <Badge count={1000} overflowCount={999}>\n      <a href=\"#\" className=\"head-example\" />\n    </Badge>\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_badge_overflow key=\"DemoComponent_badge_overflow\" />;\n"],"cssCodes":[]},{"name":"status","content":"---\norder: 6\ntitle:\n  zh-CN: 状态点\n  en-US: Status\n---\n\n## zh-CN\n\n用于表示状态的小圆点。\n\n## en-US\n\nStandalone badge with status.\n\n````jsx\nimport { Badge } from 'antd';\n\nReactDOM.render(\n  <div>\n    <Badge status=\"success\" />\n    <Badge status=\"error\" />\n    <Badge status=\"default\" />\n    <Badge status=\"processing\" />\n    <Badge status=\"warning\" />\n    <br />\n    <Badge status=\"success\" text=\"Success\" />\n    <br />\n    <Badge status=\"error\" text=\"Error\" />\n    <br />\n    <Badge status=\"default\" text=\"Default\" />\n    <br />\n    <Badge status=\"processing\" text=\"Processing\" />\n    <br />\n    <Badge status=\"warning\" text=\"Warning\" />\n  </div>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Badge } from 'antd';\n\nexport default function DemoComponent_badge_status() {\nreturn(\n  <div>\n    <Badge status=\"success\" />\n    <Badge status=\"error\" />\n    <Badge status=\"default\" />\n    <Badge status=\"processing\" />\n    <Badge status=\"warning\" />\n    <br />\n    <Badge status=\"success\" text=\"Success\" />\n    <br />\n    <Badge status=\"error\" text=\"Error\" />\n    <br />\n    <Badge status=\"default\" text=\"Default\" />\n    <br />\n    <Badge status=\"processing\" text=\"Processing\" />\n    <br />\n    <Badge status=\"warning\" text=\"Warning\" />\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_badge_status key=\"DemoComponent_badge_status\" />;\n"],"cssCodes":[]}]},{"name":"breadcrumb","demos":[{"name":"basic","content":"---\norder: 0\ntitle:\n  zh-CN: 基本\n  en-US: Basic Usage\n---\n\n## zh-CN\n\n最简单的用法。\n\n## en-US\n\nThe simplest use\n\n````jsx\nimport { Breadcrumb } from 'antd';\n\nReactDOM.render(\n  <Breadcrumb>\n    <Breadcrumb.Item>Home</Breadcrumb.Item>\n    <Breadcrumb.Item><a href=\"\">Application Center</a></Breadcrumb.Item>\n    <Breadcrumb.Item><a href=\"\">Application List</a></Breadcrumb.Item>\n    <Breadcrumb.Item>An Application</Breadcrumb.Item>\n  </Breadcrumb>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Breadcrumb } from 'antd';\n\nexport default function DemoComponent_breadcrumb_basic() {\nreturn(\n  <Breadcrumb>\n    <Breadcrumb.Item>Home</Breadcrumb.Item>\n    <Breadcrumb.Item><a href=\"\">Application Center</a></Breadcrumb.Item>\n    <Breadcrumb.Item><a href=\"\">Application List</a></Breadcrumb.Item>\n    <Breadcrumb.Item>An Application</Breadcrumb.Item>\n  </Breadcrumb>\n);\n};\n\nexport const demo = <DemoComponent_breadcrumb_basic key=\"DemoComponent_breadcrumb_basic\" />;\n"],"cssCodes":[]},{"name":"router_4","content":"---\norder: 3\niframe: 200\nreactRouter: react-router-dom\ntitle:\n  zh-CN: 其它路由\n  en-US: Other Router Integration\n---\n\n## zh-CN\n\n和 `react-router@4`，或其他路由进行结合使用。\n\n## en-US\n\nUsed together with `react-router@4` or other router.\n\n````jsx\nimport { HashRouter as Router, Route, Switch, Link, withRouter } from 'react-router-dom';\nimport { Breadcrumb, Alert } from 'antd';\n\nconst Apps = () => (\n  <ul className=\"app-list\">\n    <li>\n      <Link to=\"/apps/1\">Application1</Link>：<Link to=\"/apps/1/detail\">Detail</Link>\n    </li>\n    <li>\n      <Link to=\"/apps/2\">Application2</Link>：<Link to=\"/apps/2/detail\">Detail</Link>\n    </li>\n  </ul>\n);\n\nconst breadcrumbNameMap = {\n  '/apps': 'Application List',\n  '/apps/1': 'Application1',\n  '/apps/2': 'Application2',\n  '/apps/1/detail': 'Detail',\n  '/apps/2/detail': 'Detail',\n};\nconst Home = withRouter((props) => {\n  const { location } = props;\n  const pathSnippets = location.pathname.split('/').filter(i => i);\n  const extraBreadcrumbItems = pathSnippets.map((_, index) => {\n    const url = `/${pathSnippets.slice(0, index + 1).join('/')}`;\n    return (\n      <Breadcrumb.Item key={url}>\n        <Link to={url}>\n          {breadcrumbNameMap[url]}\n        </Link>\n      </Breadcrumb.Item>\n    );\n  });\n  const breadcrumbItems = [(\n    <Breadcrumb.Item key=\"home\">\n      <Link to=\"/\">Home</Link>\n    </Breadcrumb.Item>\n  )].concat(extraBreadcrumbItems);\n  return (\n    <div className=\"demo\">\n      <div className=\"demo-nav\">\n        <Link to=\"/\">Home</Link>\n        <Link to=\"/apps\">Application List</Link>\n      </div>\n      <Switch>\n        <Route path=\"/apps\" component={Apps} />\n        <Route render={() => <span>Home Page</span>} />\n      </Switch>\n      <Alert style={{ margin: '16px 0' }} message=\"Click the navigation above to switch:\" />\n      <Breadcrumb>\n        {breadcrumbItems}\n      </Breadcrumb>\n    </div>\n  );\n});\n\nReactDOM.render(\n  <Router>\n    <Home />\n  </Router>\n, mountNode);\n````\n\n````css\n.demo {\n  margin: 16px;\n}\n.demo-nav {\n  height: 30px;\n  line-height: 30px;\n  margin-bottom: 16px;\n  background: #f8f8f8;\n}\n.demo-nav a {\n  line-height: 30px;\n  padding: 0 8px;\n}\n.app-list {\n  margin-top: 16px;\n}\n````\n","jsCodes":["import React from 'react';\nimport { HashRouter as Router, Route, Switch, Link, withRouter } from 'react-router-dom';\nimport { Breadcrumb, Alert } from 'antd';\n\nconst Apps = () => (\n  <ul className=\"app-list\">\n    <li>\n      <Link to=\"/apps/1\">Application1</Link>：<Link to=\"/apps/1/detail\">Detail</Link>\n    </li>\n    <li>\n      <Link to=\"/apps/2\">Application2</Link>：<Link to=\"/apps/2/detail\">Detail</Link>\n    </li>\n  </ul>\n);\n\nconst breadcrumbNameMap = {\n  '/apps': 'Application List',\n  '/apps/1': 'Application1',\n  '/apps/2': 'Application2',\n  '/apps/1/detail': 'Detail',\n  '/apps/2/detail': 'Detail',\n};\nconst Home = withRouter((props) => {\n  const { location } = props;\n  const pathSnippets = location.pathname.split('/').filter(i => i);\n  const extraBreadcrumbItems = pathSnippets.map((_, index) => {\n    const url = `/${pathSnippets.slice(0, index + 1).join('/')}`;\n    return (\n      <Breadcrumb.Item key={url}>\n        <Link to={url}>\n          {breadcrumbNameMap[url]}\n        </Link>\n      </Breadcrumb.Item>\n    );\n  });\n  const breadcrumbItems = [(\n    <Breadcrumb.Item key=\"home\">\n      <Link to=\"/\">Home</Link>\n    </Breadcrumb.Item>\n  )].concat(extraBreadcrumbItems);\n  return (\n    <div className=\"demo\">\n      <div className=\"demo-nav\">\n        <Link to=\"/\">Home</Link>\n        <Link to=\"/apps\">Application List</Link>\n      </div>\n      <Switch>\n        <Route path=\"/apps\" component={Apps} />\n        <Route render={() => <span>Home Page</span>} />\n      </Switch>\n      <Alert style={{ margin: '16px 0' }} message=\"Click the navigation above to switch:\" />\n      <Breadcrumb>\n        {breadcrumbItems}\n      </Breadcrumb>\n    </div>\n  );\n});\n\nexport default function DemoComponent_breadcrumb_router_4() {\nreturn(\n  <Router>\n    <Home />\n  </Router>\n);\n};\n\nexport const demo = <DemoComponent_breadcrumb_router_4 key=\"DemoComponent_breadcrumb_router_4\" />;\n"],"cssCodes":[".demo {\n  margin: 16px;\n}\n.demo-nav {\n  height: 30px;\n  line-height: 30px;\n  margin-bottom: 16px;\n  background: #f8f8f8;\n}\n.demo-nav a {\n  line-height: 30px;\n  padding: 0 8px;\n}\n.app-list {\n  margin-top: 16px;\n}\n"]},{"name":"router","content":"---\norder: 2\niframe: 200\nreactRouter: react-router\ntitle:\n  zh-CN: react-router\n  en-US: React Router Integration\n---\n\n## zh-CN\n\n和 `react-router@2` `react-router@3` 进行结合使用。\n\n## en-US\n\nUsed together with `react-router@2` `react-router@3`.\n\n````jsx\nimport { Router, Route, Link, hashHistory } from 'react-router';\nimport { Breadcrumb, Alert } from 'antd';\n\nconst Apps = () => (\n  <ul className=\"app-list\">\n    <li>\n      <Link to=\"/apps/1\">Application1</Link>：<Link to=\"/apps/1/detail\">Detail</Link>\n    </li>\n    <li>\n      <Link to=\"/apps/2\">Application2</Link>：<Link to=\"/apps/2/detail\">Detail</Link>\n    </li>\n  </ul>\n);\n\nconst Home = ({ routes, params, children }) => (\n  <div className=\"demo\">\n    <div className=\"demo-nav\">\n      <Link to=\"/\">Home</Link>\n      <Link to=\"/apps\">Application List</Link>\n    </div>\n    {children || 'Home Page'}\n    <Alert style={{ margin: '16px 0' }} message=\"Click the navigation above to switch:\" />\n    <Breadcrumb routes={routes} params={params} />\n  </div>\n);\n\nReactDOM.render(\n  <Router history={hashHistory}>\n    <Route name=\"home\" breadcrumbName=\"Home\" path=\"/\" component={Home}>\n      <Route name=\"apps\" breadcrumbName=\"Application List\" path=\"apps\" component={Apps}>\n        <Route name=\"app\" breadcrumbName=\"Application:id\" path=\":id\">\n          <Route name=\"detail\" breadcrumbName=\"Detail\" path=\"detail\" />\n        </Route>\n      </Route>\n    </Route>\n  </Router>\n, mountNode);\n````\n\n````css\n.demo {\n  margin: 16px;\n}\n.demo-nav {\n  height: 30px;\n  line-height: 30px;\n  margin-bottom: 16px;\n  background: #f8f8f8;\n}\n.demo-nav a {\n  line-height: 30px;\n  padding: 0 8px;\n}\n.app-list {\n  margin-top: 16px;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Router, Route, Link, hashHistory } from 'react-router';\nimport { Breadcrumb, Alert } from 'antd';\n\nconst Apps = () => (\n  <ul className=\"app-list\">\n    <li>\n      <Link to=\"/apps/1\">Application1</Link>：<Link to=\"/apps/1/detail\">Detail</Link>\n    </li>\n    <li>\n      <Link to=\"/apps/2\">Application2</Link>：<Link to=\"/apps/2/detail\">Detail</Link>\n    </li>\n  </ul>\n);\n\nconst Home = ({ routes, params, children }) => (\n  <div className=\"demo\">\n    <div className=\"demo-nav\">\n      <Link to=\"/\">Home</Link>\n      <Link to=\"/apps\">Application List</Link>\n    </div>\n    {children || 'Home Page'}\n    <Alert style={{ margin: '16px 0' }} message=\"Click the navigation above to switch:\" />\n    <Breadcrumb routes={routes} params={params} />\n  </div>\n);\n\nexport default function DemoComponent_breadcrumb_router() {\nreturn(\n  <Router history={hashHistory}>\n    <Route name=\"home\" breadcrumbName=\"Home\" path=\"/\" component={Home}>\n      <Route name=\"apps\" breadcrumbName=\"Application List\" path=\"apps\" component={Apps}>\n        <Route name=\"app\" breadcrumbName=\"Application:id\" path=\":id\">\n          <Route name=\"detail\" breadcrumbName=\"Detail\" path=\"detail\" />\n        </Route>\n      </Route>\n    </Route>\n  </Router>\n);\n};\n\nexport const demo = <DemoComponent_breadcrumb_router key=\"DemoComponent_breadcrumb_router\" />;\n"],"cssCodes":[".demo {\n  margin: 16px;\n}\n.demo-nav {\n  height: 30px;\n  line-height: 30px;\n  margin-bottom: 16px;\n  background: #f8f8f8;\n}\n.demo-nav a {\n  line-height: 30px;\n  padding: 0 8px;\n}\n.app-list {\n  margin-top: 16px;\n}\n"]},{"name":"separator","content":"---\norder: 4\ntitle: \n  zh-CN: 分隔符\n  en-US: Configuring the Separator\n---\n\n## zh-CN\n\n使用 `separator=\">\"` 可以自定义分隔符。\n\n## en-US\n\nThe separator can be customized by setting the separator property: separator=\">\"\n\n````jsx\nimport { Breadcrumb } from 'antd';\n\nReactDOM.render(\n  <Breadcrumb separator=\">\">\n    <Breadcrumb.Item>Home</Breadcrumb.Item>\n    <Breadcrumb.Item href=\"\">Application Center</Breadcrumb.Item>\n    <Breadcrumb.Item href=\"\">Application List</Breadcrumb.Item>\n    <Breadcrumb.Item>An Application</Breadcrumb.Item>\n  </Breadcrumb>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Breadcrumb } from 'antd';\n\nexport default function DemoComponent_breadcrumb_separator() {\nreturn(\n  <Breadcrumb separator=\">\">\n    <Breadcrumb.Item>Home</Breadcrumb.Item>\n    <Breadcrumb.Item href=\"\">Application Center</Breadcrumb.Item>\n    <Breadcrumb.Item href=\"\">Application List</Breadcrumb.Item>\n    <Breadcrumb.Item>An Application</Breadcrumb.Item>\n  </Breadcrumb>\n);\n};\n\nexport const demo = <DemoComponent_breadcrumb_separator key=\"DemoComponent_breadcrumb_separator\" />;\n"],"cssCodes":[]},{"name":"withIcon","content":"---\norder: 1\ntitle:\n  zh-CN: 带有图标的\n  en-US: With an Icon\n---\n\n## zh-CN\n\n图标放在文字前面。\n\n## en-US\n\nThe icon should be placed in front of the text.\n\n````jsx\nimport { Breadcrumb, Icon } from 'antd';\n\nReactDOM.render(\n  <Breadcrumb>\n    <Breadcrumb.Item href=\"\">\n      <Icon type=\"home\" />\n    </Breadcrumb.Item>\n    <Breadcrumb.Item href=\"\">\n      <Icon type=\"user\" />\n      <span>Application List</span>\n    </Breadcrumb.Item>\n    <Breadcrumb.Item>\n      Application\n    </Breadcrumb.Item>\n  </Breadcrumb>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Breadcrumb, Icon } from 'antd';\n\nexport default function DemoComponent_breadcrumb_withIcon() {\nreturn(\n  <Breadcrumb>\n    <Breadcrumb.Item href=\"\">\n      <Icon type=\"home\" />\n    </Breadcrumb.Item>\n    <Breadcrumb.Item href=\"\">\n      <Icon type=\"user\" />\n      <span>Application List</span>\n    </Breadcrumb.Item>\n    <Breadcrumb.Item>\n      Application\n    </Breadcrumb.Item>\n  </Breadcrumb>\n);\n};\n\nexport const demo = <DemoComponent_breadcrumb_withIcon key=\"DemoComponent_breadcrumb_withIcon\" />;\n"],"cssCodes":[]}]},{"name":"button","demos":[{"name":"basic","content":"---\norder: 0\ntitle:\n  zh-CN: 按钮类型\n  en-US: Type\n---\n\n## zh-CN\n\n按钮有四种类型：主按钮、次按钮、虚线按钮、危险按钮。主按钮在同一个操作区域最多出现一次。\n\n> `danger` 在 `antd@2.7` 后支持。\n\n## en-US\n\nThere are `primary` button, `default` button, `dashed` button and `danger` button in antd.\n\n> `danger` is supported after `antd@2.7`.\n\n````jsx\nimport { Button } from 'antd';\n\nReactDOM.render(\n  <div>\n    <Button type=\"primary\">Primary</Button>\n    <Button>Default</Button>\n    <Button type=\"dashed\">Dashed</Button>\n    <Button type=\"danger\">Danger</Button>\n  </div>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Button } from 'antd';\n\nexport default function DemoComponent_button_basic() {\nreturn(\n  <div>\n    <Button type=\"primary\">Primary</Button>\n    <Button>Default</Button>\n    <Button type=\"dashed\">Dashed</Button>\n    <Button type=\"danger\">Danger</Button>\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_button_basic key=\"DemoComponent_button_basic\" />;\n"],"cssCodes":[]},{"name":"button_group","content":"---\norder: 6\ntitle:\n  zh-CN: 按钮组合\n  en-US: Button Group\n---\n\n## zh-CN\n\n可以将多个 `Button` 放入 `Button.Group` 的容器中。\n\n通过设置 `size` 为 `large` `small` 分别把按钮组合设为大、小尺寸。若不设置 `size`，则尺寸为中。\n\n## en-US\n\nButtons can be grouped by placing multiple `Button` components into a `Button.Group`.\n\nThe `size` can be set to `large`, `small` or left unset resulting in a default size.\n\n````jsx\nimport { Button, Icon } from 'antd';\nconst ButtonGroup = Button.Group;\n\nReactDOM.render(\n  <div>\n    <h4>Basic</h4>\n    <ButtonGroup>\n      <Button>Cancel</Button>\n      <Button type=\"primary\">OK</Button>\n    </ButtonGroup>\n    <ButtonGroup>\n      <Button disabled>L</Button>\n      <Button disabled>M</Button>\n      <Button disabled>R</Button>\n    </ButtonGroup>\n    <ButtonGroup>\n      <Button type=\"primary\">L</Button>\n      <Button>M</Button>\n      <Button>M</Button>\n      <Button type=\"dashed\">R</Button>\n    </ButtonGroup>\n\n    <h4>With Icon</h4>\n    <ButtonGroup>\n      <Button type=\"primary\">\n        <Icon type=\"left\" />Go back\n      </Button>\n      <Button type=\"primary\">\n        Go forward<Icon type=\"right\" />\n      </Button>\n    </ButtonGroup>\n    <ButtonGroup>\n      <Button type=\"primary\" icon=\"cloud\" />\n      <Button type=\"primary\" icon=\"cloud-download\" />\n    </ButtonGroup>\n  </div>,\n  mountNode\n);\n````\n\n<style>\n#components-button-demo-button-group h4 {\n  margin: 16px 0;\n  font-size: 14px;\n  line-height: 1;\n  font-weight: normal;\n}\n#components-button-demo-button-group h4:first-child {\n  margin-top: 0;\n}\n#components-button-demo-button-group .ant-btn-group {\n  margin-right: 8px;\n}\n</style>\n","jsCodes":["import React from 'react';\nimport { Button, Icon } from 'antd';\nconst ButtonGroup = Button.Group;\n\nexport default function DemoComponent_button_button_group() {\nreturn(\n  <div>\n    <h4>Basic</h4>\n    <ButtonGroup>\n      <Button>Cancel</Button>\n      <Button type=\"primary\">OK</Button>\n    </ButtonGroup>\n    <ButtonGroup>\n      <Button disabled>L</Button>\n      <Button disabled>M</Button>\n      <Button disabled>R</Button>\n    </ButtonGroup>\n    <ButtonGroup>\n      <Button type=\"primary\">L</Button>\n      <Button>M</Button>\n      <Button>M</Button>\n      <Button type=\"dashed\">R</Button>\n    </ButtonGroup>\n\n    <h4>With Icon</h4>\n    <ButtonGroup>\n      <Button type=\"primary\">\n        <Icon type=\"left\" />Go back\n      </Button>\n      <Button type=\"primary\">\n        Go forward<Icon type=\"right\" />\n      </Button>\n    </ButtonGroup>\n    <ButtonGroup>\n      <Button type=\"primary\" icon=\"cloud\" />\n      <Button type=\"primary\" icon=\"cloud-download\" />\n    </ButtonGroup>\n  </div>);\n};\n\nexport const demo = <DemoComponent_button_button_group key=\"DemoComponent_button_button_group\" />;\n"],"cssCodes":[]},{"name":"disabled","content":"---\norder: 3\ntitle:\n  zh-CN: 不可用状态\n  en-US: Disabled\n---\n\n## zh-CN\n\n添加 `disabled` 属性即可让按钮处于不可用状态，同时按钮样式也会改变。\n\n## en-US\n\nTo mark a button as disabled, add the `disabled` property to the `Button`.\n\n````jsx\nimport { Button } from 'antd';\n\nReactDOM.render(\n  <div>\n    <Button type=\"primary\">Primary</Button>\n    <Button type=\"primary\" disabled>Primary(disabled)</Button>\n    <br />\n    <Button>Default</Button>\n    <Button disabled>Default(disabled)</Button>\n    <br />\n    <Button>Ghost</Button>\n    <Button disabled>Ghost(disabled)</Button>\n    <br />\n    <Button type=\"dashed\">Dashed</Button>\n    <Button type=\"dashed\" disabled>Dashed(disabled)</Button>\n  </div>,\n  mountNode\n);\n````\n","jsCodes":["import React from 'react';\nimport { Button } from 'antd';\n\nexport default function DemoComponent_button_disabled() {\nreturn(\n  <div>\n    <Button type=\"primary\">Primary</Button>\n    <Button type=\"primary\" disabled>Primary(disabled)</Button>\n    <br />\n    <Button>Default</Button>\n    <Button disabled>Default(disabled)</Button>\n    <br />\n    <Button>Ghost</Button>\n    <Button disabled>Ghost(disabled)</Button>\n    <br />\n    <Button type=\"dashed\">Dashed</Button>\n    <Button type=\"dashed\" disabled>Dashed(disabled)</Button>\n  </div>);\n};\n\nexport const demo = <DemoComponent_button_disabled key=\"DemoComponent_button_disabled\" />;\n"],"cssCodes":[]},{"name":"ghost","content":"---\norder: 8\ntitle:\n  zh-CN: 幽灵按钮\n  en-US: Ghost Button\n---\n\n## zh-CN\n\n幽灵按钮将其他按钮的内容反色，背景变为透明，常用在有色背景上。\n\n## en-US\n\n`ghost` property will make button's background transparent, it is common used in colored background.\n\n````jsx\nimport { Button } from 'antd';\n\nReactDOM.render(\n  <div style={{ background: 'rgb(190, 200, 200)', padding: '26px 16px 16px' }}>\n    <Button type=\"primary\" ghost>Primary</Button>\n    <Button ghost>Default</Button>\n    <Button type=\"dashed\" ghost>Dashed</Button>\n    <Button type=\"danger\" ghost>danger</Button>\n  </div>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Button } from 'antd';\n\nexport default function DemoComponent_button_ghost() {\nreturn(\n  <div style={{ background: 'rgb(190, 200, 200)', padding: '26px 16px 16px' }}>\n    <Button type=\"primary\" ghost>Primary</Button>\n    <Button ghost>Default</Button>\n    <Button type=\"dashed\" ghost>Dashed</Button>\n    <Button type=\"danger\" ghost>danger</Button>\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_button_ghost key=\"DemoComponent_button_ghost\" />;\n"],"cssCodes":[]},{"name":"icon","content":"---\norder: 1\ntitle:\n  zh-CN: 图标按钮\n  en-US: Icon\n---\n\n## zh-CN\n\n当需要在 `Button` 内嵌入 `Icon` 时，可以设置 `icon` 属性，或者直接在 `Button` 内使用 `Icon` 组件。\n\n如果想控制 `Icon` 具体的位置，只能直接使用 `Icon` 组件，而非 `icon` 属性。\n\n## en-US\n\n`Button` components can contain an `Icon`. This is done by setting the `icon` property or placing an `Icon` component within the `Button`\n\nIf you want specific control over the positioning and placement of the `Icon`, then that should be done by placing the `Icon` component within the `Button` rather than using the `icon` property.\n\n````jsx\nimport { Button } from 'antd';\n\nReactDOM.render(\n  <div>\n    <Button type=\"primary\" shape=\"circle\" icon=\"search\" />\n    <Button type=\"primary\" icon=\"search\">Search</Button>\n    <Button shape=\"circle\" icon=\"search\" />\n    <Button icon=\"search\">Search</Button>\n    <br />\n    <Button shape=\"circle\" icon=\"search\" />\n    <Button icon=\"search\">Search</Button>\n    <Button type=\"dashed\" shape=\"circle\" icon=\"search\" />\n    <Button type=\"dashed\" icon=\"search\">Search</Button>\n  </div>,\n  mountNode\n);\n````\n","jsCodes":["import React from 'react';\nimport { Button } from 'antd';\n\nexport default function DemoComponent_button_icon() {\nreturn(\n  <div>\n    <Button type=\"primary\" shape=\"circle\" icon=\"search\" />\n    <Button type=\"primary\" icon=\"search\">Search</Button>\n    <Button shape=\"circle\" icon=\"search\" />\n    <Button icon=\"search\">Search</Button>\n    <br />\n    <Button shape=\"circle\" icon=\"search\" />\n    <Button icon=\"search\">Search</Button>\n    <Button type=\"dashed\" shape=\"circle\" icon=\"search\" />\n    <Button type=\"dashed\" icon=\"search\">Search</Button>\n  </div>);\n};\n\nexport const demo = <DemoComponent_button_icon key=\"DemoComponent_button_icon\" />;\n"],"cssCodes":[]},{"name":"loading","content":"---\norder: 4\ntitle:\n  zh-CN: 加载中状态\n  en-US: Loading\n---\n\n## zh-CN\n\n添加 `loading` 属性即可让按钮处于加载状态，最后两个按钮演示点击后进入加载状态。\n\n## en-US\n\nA loading indicator can be added to a button by setting the `loading` property on the `Button`.\n\n````jsx\nimport { Button } from 'antd';\n\nclass App extends React.Component {\n  state = {\n    loading: false,\n    iconLoading: false,\n  }\n\n  enterLoading = () => {\n    this.setState({ loading: true });\n  }\n\n  enterIconLoading = () => {\n    this.setState({ iconLoading: true });\n  }\n\n  render() {\n    return (\n      <span>\n        <Button type=\"primary\" loading>\n          Loading\n        </Button>\n        <Button type=\"primary\" size=\"small\" loading>\n          Loading\n        </Button>\n        <br />\n        <Button type=\"primary\" loading={this.state.loading} onClick={this.enterLoading}>\n          Click me!\n        </Button>\n        <Button type=\"primary\" icon=\"poweroff\" loading={this.state.iconLoading} onClick={this.enterIconLoading}>\n          Click me!\n        </Button>\n        <br />\n        <Button shape=\"circle\" loading />\n        <Button type=\"primary\" shape=\"circle\" loading />\n      </span>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Button } from 'antd';\n\nclass App extends React.Component {\n  state = {\n    loading: false,\n    iconLoading: false,\n  }\n\n  enterLoading = () => {\n    this.setState({ loading: true });\n  }\n\n  enterIconLoading = () => {\n    this.setState({ iconLoading: true });\n  }\n\n  render() {\n    return (\n      <span>\n        <Button type=\"primary\" loading>\n          Loading\n        </Button>\n        <Button type=\"primary\" size=\"small\" loading>\n          Loading\n        </Button>\n        <br />\n        <Button type=\"primary\" loading={this.state.loading} onClick={this.enterLoading}>\n          Click me!\n        </Button>\n        <Button type=\"primary\" icon=\"poweroff\" loading={this.state.iconLoading} onClick={this.enterIconLoading}>\n          Click me!\n        </Button>\n        <br />\n        <Button shape=\"circle\" loading />\n        <Button type=\"primary\" shape=\"circle\" loading />\n      </span>\n    );\n  }\n}\n\nexport default function DemoComponent_button_loading() {\nreturn(<App />);\n};\n\nexport const demo = <DemoComponent_button_loading key=\"DemoComponent_button_loading\" />;\n"],"cssCodes":[]},{"name":"multiple","content":"---\norder: 5\ntitle:\n  zh-CN: 多个按钮组合\n  en-US: Multiple Buttons\n---\n\n## zh-CN\n\n按钮组合使用时，推荐使用1个主操作 + n 个次操作，3个以上操作时把更多操作放到 `Dropdown.Button` 中组合使用。\n\n## en-US\n\nIf you need several buttons, we recommend that you use 1 primary button + n secondary buttons, and if there are more than three operations, you can group some of them into `Dropdown.Button`.\n\n\n````jsx\nimport { Button, Menu, Dropdown, Icon } from 'antd';\n\nfunction handleMenuClick(e) {\n  console.log('click', e);\n}\n\nconst menu = (\n  <Menu onClick={handleMenuClick}>\n    <Menu.Item key=\"1\">1st item</Menu.Item>\n    <Menu.Item key=\"2\">2nd item</Menu.Item>\n    <Menu.Item key=\"3\">3rd item</Menu.Item>\n  </Menu>\n);\n\nReactDOM.render(\n  <div>\n    <Button type=\"primary\">primary</Button>\n    <Button>secondary</Button>\n    <Dropdown overlay={menu}>\n      <Button>\n        more <Icon type=\"down\" />\n      </Button>\n    </Dropdown>\n  </div>,\n  mountNode\n);\n````\n","jsCodes":["import React from 'react';\nimport { Button, Menu, Dropdown, Icon } from 'antd';\n\nfunction handleMenuClick(e) {\n  console.log('click', e);\n}\n\nconst menu = (\n  <Menu onClick={handleMenuClick}>\n    <Menu.Item key=\"1\">1st item</Menu.Item>\n    <Menu.Item key=\"2\">2nd item</Menu.Item>\n    <Menu.Item key=\"3\">3rd item</Menu.Item>\n  </Menu>\n);\n\nexport default function DemoComponent_button_multiple() {\nreturn(\n  <div>\n    <Button type=\"primary\">primary</Button>\n    <Button>secondary</Button>\n    <Dropdown overlay={menu}>\n      <Button>\n        more <Icon type=\"down\" />\n      </Button>\n    </Dropdown>\n  </div>);\n};\n\nexport const demo = <DemoComponent_button_multiple key=\"DemoComponent_button_multiple\" />;\n"],"cssCodes":[]},{"name":"size","content":"---\norder: 2\ntitle:\n  zh-CN: 按钮尺寸\n  en-US: Size\n---\n\n## zh-CN\n\n按钮有大、中、小三种尺寸。\n\n通过设置 `size` 为 `large` `small` 分别把按钮设为大、小尺寸。若不设置 `size`，则尺寸为中。\n\n## en-US\n\nAnt Design supports a default button size as well as a large and small size.\n\nIf a large or small button is desired, set the `size` property to either `large` or `small` respectively. Omit the `size` property for a button with the default size.\n\n````jsx\nimport { Button, Radio, Icon } from 'antd';\n\nclass ButtonSize extends React.Component {\n  state = {\n    size: 'default',\n  };\n\n  handleSizeChange = (e) => {\n    this.setState({ size: e.target.value });\n  }\n\n  render() {\n    const size = this.state.size;\n    return (\n      <div>\n        <Radio.Group value={size} onChange={this.handleSizeChange}>\n          <Radio.Button value=\"large\">Large</Radio.Button>\n          <Radio.Button value=\"default\">Default</Radio.Button>\n          <Radio.Button value=\"small\">Small</Radio.Button>\n        </Radio.Group>\n        <br /><br />\n        <Button type=\"primary\" shape=\"circle\" icon=\"download\" size={size} />\n        <Button type=\"primary\" icon=\"download\" size={size}>Download</Button>\n        <Button type=\"primary\" size={size}>Normal</Button>\n        <br />\n        <Button.Group size={size}>\n          <Button type=\"primary\">\n            <Icon type=\"left\" />Backward\n          </Button>\n          <Button type=\"primary\">\n            Forward<Icon type=\"right\" />\n          </Button>\n        </Button.Group>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<ButtonSize />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Button, Radio, Icon } from 'antd';\n\nclass ButtonSize extends React.Component {\n  state = {\n    size: 'default',\n  };\n\n  handleSizeChange = (e) => {\n    this.setState({ size: e.target.value });\n  }\n\n  render() {\n    const size = this.state.size;\n    return (\n      <div>\n        <Radio.Group value={size} onChange={this.handleSizeChange}>\n          <Radio.Button value=\"large\">Large</Radio.Button>\n          <Radio.Button value=\"default\">Default</Radio.Button>\n          <Radio.Button value=\"small\">Small</Radio.Button>\n        </Radio.Group>\n        <br /><br />\n        <Button type=\"primary\" shape=\"circle\" icon=\"download\" size={size} />\n        <Button type=\"primary\" icon=\"download\" size={size}>Download</Button>\n        <Button type=\"primary\" size={size}>Normal</Button>\n        <br />\n        <Button.Group size={size}>\n          <Button type=\"primary\">\n            <Icon type=\"left\" />Backward\n          </Button>\n          <Button type=\"primary\">\n            Forward<Icon type=\"right\" />\n          </Button>\n        </Button.Group>\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_button_size() {\nreturn(<ButtonSize />);\n};\n\nexport const demo = <DemoComponent_button_size key=\"DemoComponent_button_size\" />;\n"],"cssCodes":[]}]},{"name":"calendar","demos":[{"name":"basic","content":"---\norder: 0\ntitle:\n  zh-CN: 基本\n  en-US: Basic\n---\n\n## zh-CN\n\n一个通用的日历面板，支持年/月切换。\n\n## en-US\n\nA basic calendar component with Year/Month switch.\n\n````jsx\nimport { Calendar } from 'antd';\n\nfunction onPanelChange(value, mode) {\n  console.log(value, mode);\n}\n\nReactDOM.render(\n  <Calendar onPanelChange={onPanelChange} />\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Calendar } from 'antd';\n\nfunction onPanelChange(value, mode) {\n  console.log(value, mode);\n}\n\nexport default function DemoComponent_calendar_basic() {\nreturn(\n  <Calendar onPanelChange={onPanelChange} />\n);\n};\n\nexport const demo = <DemoComponent_calendar_basic key=\"DemoComponent_calendar_basic\" />;\n"],"cssCodes":[]},{"name":"card","content":"---\norder: 2\ntitle: \n  zh-CN: 卡片模式\n  en-US: Card\n---\n\n## zh-CN\n\n用于嵌套在空间有限的容器中。\n\n## en-US\n\nNested inside a container element for rendering in limited space.\n\n````jsx\nimport { Calendar } from 'antd';\n\nfunction onPanelChange(value, mode) {\n  console.log(value, mode);\n}\n\nReactDOM.render(\n  <div style={{ width: 290, border: '1px solid #d9d9d9', borderRadius: 4 }}>\n    <Calendar fullscreen={false} onPanelChange={onPanelChange} />\n  </div>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Calendar } from 'antd';\n\nfunction onPanelChange(value, mode) {\n  console.log(value, mode);\n}\n\nexport default function DemoComponent_calendar_card() {\nreturn(\n  <div style={{ width: 290, border: '1px solid #d9d9d9', borderRadius: 4 }}>\n    <Calendar fullscreen={false} onPanelChange={onPanelChange} />\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_calendar_card key=\"DemoComponent_calendar_card\" />;\n"],"cssCodes":[]},{"name":"notice_calendar","content":"---\norder: 1\ntitle:\n  zh-CN: 通知事项日历\n  en-US: Notice Calendar\n---\n\n## zh-CN\n\n一个复杂的应用示例，用 `dateCellRender` 和 `monthCellRender` 函数来自定义需要渲染的数据。\n\n## en-US\n\nThis component can be rendered by using `dateCellRender` and `monthCellRender` with the data you need.\n\n````jsx\nimport { Calendar } from 'antd';\n\nfunction getListData(value) {\n  let listData;\n  switch (value.date()) {\n    case 8:\n      listData = [\n        { type: 'warning', content: 'This is warning event.' },\n        { type: 'normal', content: 'This is usual event.' },\n      ]; break;\n    case 10:\n      listData = [\n        { type: 'warning', content: 'This is warning event.' },\n        { type: 'normal', content: 'This is usual event.' },\n        { type: 'error', content: 'This is error event.' },\n      ]; break;\n    case 15:\n      listData = [\n        { type: 'warning', content: 'This is warning event' },\n        { type: 'normal', content: 'This is very long usual event。。....' },\n        { type: 'error', content: 'This is error event 1.' },\n        { type: 'error', content: 'This is error event 2.' },\n        { type: 'error', content: 'This is error event 3.' },\n        { type: 'error', content: 'This is error event 4.' },\n      ]; break;\n    default:\n  }\n  return listData || [];\n}\n\nfunction dateCellRender(value) {\n  const listData = getListData(value);\n  return (\n    <ul className=\"events\">\n      {\n        listData.map(item => (\n          <li key={item.content}>\n            <span className={`event-${item.type}`}>●</span>\n            {item.content}\n          </li>\n        ))\n      }\n    </ul>\n  );\n}\n\nfunction getMonthData(value) {\n  if (value.month() === 8) {\n    return 1394;\n  }\n}\n\nfunction monthCellRender(value) {\n  const num = getMonthData(value);\n  return num ? <div className=\"notes-month\">\n    <section>{num}</section>\n    <span>Backlog number</span>\n  </div> : null;\n}\n\nReactDOM.render(\n  <Calendar dateCellRender={dateCellRender} monthCellRender={monthCellRender} />\n, mountNode);\n````\n\n````css\n.events {\n  line-height: 24px;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n.events li {\n  color: #999;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.events li span {\n  vertical-align: middle;\n}\n\n.events li span:first-child {\n  font-size: 9px;\n  margin-right: 4px;\n}\n\n.event-warning {\n  color: #fac450;\n}\n\n.event-normal {\n  color: #108ee9;\n}\n\n.event-error {\n  color: #f50;\n}\n\n.notes-month {\n  text-align: center;\n}\n.notes-month section {\n  font-size: 28px;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Calendar } from 'antd';\n\nfunction getListData(value) {\n  let listData;\n  switch (value.date()) {\n    case 8:\n      listData = [\n        { type: 'warning', content: 'This is warning event.' },\n        { type: 'normal', content: 'This is usual event.' },\n      ]; break;\n    case 10:\n      listData = [\n        { type: 'warning', content: 'This is warning event.' },\n        { type: 'normal', content: 'This is usual event.' },\n        { type: 'error', content: 'This is error event.' },\n      ]; break;\n    case 15:\n      listData = [\n        { type: 'warning', content: 'This is warning event' },\n        { type: 'normal', content: 'This is very long usual event。。....' },\n        { type: 'error', content: 'This is error event 1.' },\n        { type: 'error', content: 'This is error event 2.' },\n        { type: 'error', content: 'This is error event 3.' },\n        { type: 'error', content: 'This is error event 4.' },\n      ]; break;\n    default:\n  }\n  return listData || [];\n}\n\nfunction dateCellRender(value) {\n  const listData = getListData(value);\n  return (\n    <ul className=\"events\">\n      {\n        listData.map(item => (\n          <li key={item.content}>\n            <span className={`event-${item.type}`}>●</span>\n            {item.content}\n          </li>\n        ))\n      }\n    </ul>\n  );\n}\n\nfunction getMonthData(value) {\n  if (value.month() === 8) {\n    return 1394;\n  }\n}\n\nfunction monthCellRender(value) {\n  const num = getMonthData(value);\n  return num ? <div className=\"notes-month\">\n    <section>{num}</section>\n    <span>Backlog number</span>\n  </div> : null;\n}\n\nexport default function DemoComponent_calendar_notice_calendar() {\nreturn(\n  <Calendar dateCellRender={dateCellRender} monthCellRender={monthCellRender} />\n);\n};\n\nexport const demo = <DemoComponent_calendar_notice_calendar key=\"DemoComponent_calendar_notice_calendar\" />;\n"],"cssCodes":[".events {\n  line-height: 24px;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n.events li {\n  color: #999;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.events li span {\n  vertical-align: middle;\n}\n\n.events li span:first-child {\n  font-size: 9px;\n  margin-right: 4px;\n}\n\n.event-warning {\n  color: #fac450;\n}\n\n.event-normal {\n  color: #108ee9;\n}\n\n.event-error {\n  color: #f50;\n}\n\n.notes-month {\n  text-align: center;\n}\n.notes-month section {\n  font-size: 28px;\n}\n"]},{"name":"select","content":"---\norder: 3\ntitle:\n  zh-CN: 选择功能\n  en-US: Selectable Calendar\n---\n\n## zh-CN\n\n一个通用的日历面板，支持年/月切换。\n\n## en-US\n\nA basic calendar component with Year/Month switch.\n\n````jsx\nimport { Calendar, Alert } from 'antd';\nimport moment from 'moment';\n\nclass App extends React.Component {\n  state = {\n    value: moment('2017-01-25'),\n    selectedValue: moment('2017-01-25'),\n  }\n  onSelect = (value) => {\n    this.setState({\n      value,\n      selectedValue: value,\n    });\n  }\n  onPanelChange = (value) => {\n    this.setState({ value });\n  }\n  render() {\n    const { value, selectedValue } = this.state;\n    return (\n      <div>\n        <Alert message={`You selected date: ${selectedValue && selectedValue.format('YYYY-MM-DD')}`} />\n        <Calendar value={value} onSelect={this.onSelect} onPanelChange={this.onPanelChange} />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Calendar, Alert } from 'antd';\nimport moment from 'moment';\n\nclass App extends React.Component {\n  state = {\n    value: moment('2017-01-25'),\n    selectedValue: moment('2017-01-25'),\n  }\n  onSelect = (value) => {\n    this.setState({\n      value,\n      selectedValue: value,\n    });\n  }\n  onPanelChange = (value) => {\n    this.setState({ value });\n  }\n  render() {\n    const { value, selectedValue } = this.state;\n    return (\n      <div>\n        <Alert message={`You selected date: ${selectedValue && selectedValue.format('YYYY-MM-DD')}`} />\n        <Calendar value={value} onSelect={this.onSelect} onPanelChange={this.onPanelChange} />\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_calendar_select() {\nreturn(<App />);\n};\n\nexport const demo = <DemoComponent_calendar_select key=\"DemoComponent_calendar_select\" />;\n"],"cssCodes":[]}]},{"name":"card","demos":[{"name":"basic","content":"---\norder: 0\ntitle:\n  zh-CN: 典型卡片\n  en-US: Basic card\n---\n\n## zh-CN\n\n包含标题、内容、操作区域。\n\n## en-US\n\nA basic card containing a title, content and an extra corner content.\n\n````jsx\nimport { Card } from 'antd';\n\nReactDOM.render(\n  <Card title=\"Card title\" extra={<a href=\"#\">More</a>} style={{ width: 300 }}>\n    <p>Card content</p>\n    <p>Card content</p>\n    <p>Card content</p>\n  </Card>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Card } from 'antd';\n\nexport default function DemoComponent_card_basic() {\nreturn(\n  <Card title=\"Card title\" extra={<a href=\"#\">More</a>} style={{ width: 300 }}>\n    <p>Card content</p>\n    <p>Card content</p>\n    <p>Card content</p>\n  </Card>\n);\n};\n\nexport const demo = <DemoComponent_card_basic key=\"DemoComponent_card_basic\" />;\n"],"cssCodes":[]},{"name":"border_less","content":"---\norder: 1\ntitle:\n  zh-CN: 无边框\n  en-US: No border\n---\n\n## zh-CN\n\n在灰色背景上使用无边框的卡片。\n\n## en-US\n\nA borderless card on a gray background.\n\n````jsx\nimport { Card } from 'antd';\n\nReactDOM.render(\n  <div style={{ background: '#ECECEC', padding: '30px' }}>\n    <Card title=\"Card title\" bordered={false} style={{ width: 300 }}>\n      <p>Card content</p>\n      <p>Card content</p>\n      <p>Card content</p>\n    </Card>\n  </div>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Card } from 'antd';\n\nexport default function DemoComponent_card_border_less() {\nreturn(\n  <div style={{ background: '#ECECEC', padding: '30px' }}>\n    <Card title=\"Card title\" bordered={false} style={{ width: 300 }}>\n      <p>Card content</p>\n      <p>Card content</p>\n      <p>Card content</p>\n    </Card>\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_card_border_less key=\"DemoComponent_card_border_less\" />;\n"],"cssCodes":[]},{"name":"grid_card","content":"---\norder: 6\ntitle:\n  zh-CN: 网格型内嵌卡片\n  en-US: Grid card\n---\n\n## zh-CN\n\n一种常见的卡片内容区隔模式。\n\n## en-US\n\nGrid style card content.\n\n````jsx\nimport { Card } from 'antd';\n\nconst gridStyle = {\n  width: '25%',\n  textAlign: 'center',\n};\n\nReactDOM.render(\n  <Card title=\"卡片标题\" noHovering bodyStyle={{ padding: 0 }}>\n    <Card.Grid style={gridStyle}>卡片内容</Card.Grid>\n    <Card.Grid style={gridStyle}>卡片内容</Card.Grid>\n    <Card.Grid style={gridStyle}>卡片内容</Card.Grid>\n    <Card.Grid style={gridStyle}>卡片内容</Card.Grid>\n    <Card.Grid style={gridStyle}>卡片内容</Card.Grid>\n    <Card.Grid style={gridStyle}>卡片内容</Card.Grid>\n    <Card.Grid style={gridStyle}>卡片内容</Card.Grid>\n  </Card>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Card } from 'antd';\n\nconst gridStyle = {\n  width: '25%',\n  textAlign: 'center',\n};\n\nexport default function DemoComponent_card_grid_card() {\nreturn(\n  <Card title=\"卡片标题\" noHovering bodyStyle={{ padding: 0 }}>\n    <Card.Grid style={gridStyle}>卡片内容</Card.Grid>\n    <Card.Grid style={gridStyle}>卡片内容</Card.Grid>\n    <Card.Grid style={gridStyle}>卡片内容</Card.Grid>\n    <Card.Grid style={gridStyle}>卡片内容</Card.Grid>\n    <Card.Grid style={gridStyle}>卡片内容</Card.Grid>\n    <Card.Grid style={gridStyle}>卡片内容</Card.Grid>\n    <Card.Grid style={gridStyle}>卡片内容</Card.Grid>\n  </Card>\n);\n};\n\nexport const demo = <DemoComponent_card_grid_card key=\"DemoComponent_card_grid_card\" />;\n"],"cssCodes":[]},{"name":"in_column","content":"---\norder: 4\ntitle:\n  zh-CN: 栅格卡片\n  en-US: Card in column\n---\n\n## zh-CN\n\n在系统概览页面常常和栅格进行配合。\n\n## en-US\n\nCards usually cooperate with grid column layout in overview page.\n\n````jsx\nimport { Card, Col, Row } from 'antd';\n\nReactDOM.render(\n  <div style={{ background: '#ECECEC', padding: '30px' }}>\n    <Row gutter={16}>\n      <Col span={8}>\n        <Card title=\"Card title\" bordered={false}>Card content</Card>\n      </Col>\n      <Col span={8}>\n        <Card title=\"Card title\" bordered={false}>Card content</Card>\n      </Col>\n      <Col span={8}>\n        <Card title=\"Card title\" bordered={false}>Card content</Card>\n      </Col>\n    </Row>\n  </div>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Card, Col, Row } from 'antd';\n\nexport default function DemoComponent_card_in_column() {\nreturn(\n  <div style={{ background: '#ECECEC', padding: '30px' }}>\n    <Row gutter={16}>\n      <Col span={8}>\n        <Card title=\"Card title\" bordered={false}>Card content</Card>\n      </Col>\n      <Col span={8}>\n        <Card title=\"Card title\" bordered={false}>Card content</Card>\n      </Col>\n      <Col span={8}>\n        <Card title=\"Card title\" bordered={false}>Card content</Card>\n      </Col>\n    </Row>\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_card_in_column key=\"DemoComponent_card_in_column\" />;\n"],"cssCodes":[]},{"name":"loading","content":"---\norder: 5\ntitle:\n  zh-CN: 预加载的卡片\n  en-US: Loading card\n---\n\n## zh-CN\n\n数据读入前会有文本块样式。\n\n## en-US\n\nShows a loading indicator while the contents of the card is being fetched.\n\n````jsx\nimport { Card } from 'antd';\n\nReactDOM.render(\n  <Card loading title=\"Card title\" style={{ width: '34%' }}>\n    Whatever content\n  </Card>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Card } from 'antd';\n\nexport default function DemoComponent_card_loading() {\nreturn(\n  <Card loading title=\"Card title\" style={{ width: '34%' }}>\n    Whatever content\n  </Card>\n);\n};\n\nexport const demo = <DemoComponent_card_loading key=\"DemoComponent_card_loading\" />;\n"],"cssCodes":[]},{"name":"no_padding","content":"---\norder: 3\ntitle:\n  zh-CN: 更灵活的内容展示\n  en-US: Customized content\n---\n\n## zh-CN\n\n可以调整默认边距，设定宽度。\n\n## en-US\n\nCustomizing default width and margin.\n\n\n````jsx\nimport { Card } from 'antd';\n\nReactDOM.render(\n  <Card style={{ width: 240 }} bodyStyle={{ padding: 0 }}>\n    <div className=\"custom-image\">\n      <img alt=\"example\" width=\"100%\" src=\"https://os.alipayobjects.com/rmsportal/QBnOOoLaAfKPirc.png\" />\n    </div>\n    <div className=\"custom-card\">\n      <h3>Europe Street beat</h3>\n      <p>www.instagram.com</p>\n    </div>\n  </Card>\n, mountNode);\n````\n\n````css\n.custom-image img {\n  display: block;\n}\n.custom-card {\n  padding: 10px 16px;\n}\n.custom-card p {\n  color: #999;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Card } from 'antd';\n\nexport default function DemoComponent_card_no_padding() {\nreturn(\n  <Card style={{ width: 240 }} bodyStyle={{ padding: 0 }}>\n    <div className=\"custom-image\">\n      <img alt=\"example\" width=\"100%\" src=\"https://os.alipayobjects.com/rmsportal/QBnOOoLaAfKPirc.png\" />\n    </div>\n    <div className=\"custom-card\">\n      <h3>Europe Street beat</h3>\n      <p>www.instagram.com</p>\n    </div>\n  </Card>\n);\n};\n\nexport const demo = <DemoComponent_card_no_padding key=\"DemoComponent_card_no_padding\" />;\n"],"cssCodes":[".custom-image img {\n  display: block;\n}\n.custom-card {\n  padding: 10px 16px;\n}\n.custom-card p {\n  color: #999;\n}\n"]},{"name":"simple","content":"---\norder: 2\ntitle:\n  zh-CN: 简洁卡片\n  en-US: Simple card\n---\n\n## zh-CN\n\n只包含内容区域。\n\n## en-US\n\nA simple card only containing a content area.\n\n````jsx\nimport { Card } from 'antd';\n\nReactDOM.render(\n  <Card style={{ width: 300 }}>\n    <p>Card content</p>\n    <p>Card content</p>\n    <p>Card content</p>\n  </Card>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Card } from 'antd';\n\nexport default function DemoComponent_card_simple() {\nreturn(\n  <Card style={{ width: 300 }}>\n    <p>Card content</p>\n    <p>Card content</p>\n    <p>Card content</p>\n  </Card>\n);\n};\n\nexport const demo = <DemoComponent_card_simple key=\"DemoComponent_card_simple\" />;\n"],"cssCodes":[]}]},{"name":"carousel","demos":[{"name":"autoplay","content":"---\norder: 3\ntitle:\n  zh-CN: 自动切换\n  en-US: Scroll automatically\n---\n\n## zh-CN\n\n定时切换下一张。\n\n## en-US\n\nTiming of scrolling to the next card/picture.\n\n````jsx\nimport { Carousel } from 'antd';\n\nReactDOM.render(\n  <Carousel autoplay>\n    <div><h3>1</h3></div>\n    <div><h3>2</h3></div>\n    <div><h3>3</h3></div>\n    <div><h3>4</h3></div>\n  </Carousel>\n, mountNode);\n````\n\n````css\n/* For demo */\n.ant-carousel .slick-slide {\n  text-align: center;\n  height: 160px;\n  line-height: 160px;\n  background: #364d79;\n  overflow: hidden;\n}\n\n.ant-carousel .slick-slide h3 {\n  color: #fff;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Carousel } from 'antd';\n\nexport default function DemoComponent_carousel_autoplay() {\nreturn(\n  <Carousel autoplay>\n    <div><h3>1</h3></div>\n    <div><h3>2</h3></div>\n    <div><h3>3</h3></div>\n    <div><h3>4</h3></div>\n  </Carousel>\n);\n};\n\nexport const demo = <DemoComponent_carousel_autoplay key=\"DemoComponent_carousel_autoplay\" />;\n"],"cssCodes":["/* For demo */\n.ant-carousel .slick-slide {\n  text-align: center;\n  height: 160px;\n  line-height: 160px;\n  background: #364d79;\n  overflow: hidden;\n}\n\n.ant-carousel .slick-slide h3 {\n  color: #fff;\n}\n"]},{"name":"basic","content":"---\norder: 0\ntitle:\n  zh-CN: 基本\n  en-US: Basic\n---\n\n## zh-CN\n\n最简单的用法。\n\n## en-US\n\nBasic usage.\n\n````jsx\nimport { Carousel } from 'antd';\n\nfunction onChange(a, b, c) {\n  console.log(a, b, c);\n}\n\nReactDOM.render(\n  <Carousel afterChange={onChange}>\n    <div><h3>1</h3></div>\n    <div><h3>2</h3></div>\n    <div><h3>3</h3></div>\n    <div><h3>4</h3></div>\n  </Carousel>\n, mountNode);\n````\n\n````css\n/* For demo */\n.ant-carousel .slick-slide {\n  text-align: center;\n  height: 160px;\n  line-height: 160px;\n  background: #364d79;\n  overflow: hidden;\n}\n\n.ant-carousel .slick-slide h3 {\n  color: #fff;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Carousel } from 'antd';\n\nfunction onChange(a, b, c) {\n  console.log(a, b, c);\n}\n\nexport default function DemoComponent_carousel_basic() {\nreturn(\n  <Carousel afterChange={onChange}>\n    <div><h3>1</h3></div>\n    <div><h3>2</h3></div>\n    <div><h3>3</h3></div>\n    <div><h3>4</h3></div>\n  </Carousel>\n);\n};\n\nexport const demo = <DemoComponent_carousel_basic key=\"DemoComponent_carousel_basic\" />;\n"],"cssCodes":["/* For demo */\n.ant-carousel .slick-slide {\n  text-align: center;\n  height: 160px;\n  line-height: 160px;\n  background: #364d79;\n  overflow: hidden;\n}\n\n.ant-carousel .slick-slide h3 {\n  color: #fff;\n}\n"]},{"name":"fade","content":"---\norder: 2\ntitle:\n  zh-CN: 渐显\n  en-US: Fade in\n---\n\n## zh-CN\n\n切换效果为渐显。\n\n## en-US\n\nSlides use fade for transition.\n\n````jsx\nimport { Carousel } from 'antd';\n\nReactDOM.render(\n  <Carousel effect=\"fade\">\n    <div><h3>1</h3></div>\n    <div><h3>2</h3></div>\n    <div><h3>3</h3></div>\n    <div><h3>4</h3></div>\n  </Carousel>\n, mountNode);\n````\n\n````css\n/* For demo */\n.ant-carousel .slick-slide {\n  text-align: center;\n  height: 160px;\n  line-height: 160px;\n  background: #364d79;\n  overflow: hidden;\n}\n\n.ant-carousel .slick-slide h3 {\n  color: #fff;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Carousel } from 'antd';\n\nexport default function DemoComponent_carousel_fade() {\nreturn(\n  <Carousel effect=\"fade\">\n    <div><h3>1</h3></div>\n    <div><h3>2</h3></div>\n    <div><h3>3</h3></div>\n    <div><h3>4</h3></div>\n  </Carousel>\n);\n};\n\nexport const demo = <DemoComponent_carousel_fade key=\"DemoComponent_carousel_fade\" />;\n"],"cssCodes":["/* For demo */\n.ant-carousel .slick-slide {\n  text-align: center;\n  height: 160px;\n  line-height: 160px;\n  background: #364d79;\n  overflow: hidden;\n}\n\n.ant-carousel .slick-slide h3 {\n  color: #fff;\n}\n"]},{"name":"vertical","content":"---\norder: 1\ntitle:\n  zh-CN: 垂直\n  en-US: Vertical\n---\n\n## zh-CN\n\n垂直显示。\n\n## en-US\n\nVertical pagination.\n\n````jsx\nimport { Carousel } from 'antd';\n\nReactDOM.render(\n  <Carousel vertical>\n    <div><h3>1</h3></div>\n    <div><h3>2</h3></div>\n    <div><h3>3</h3></div>\n    <div><h3>4</h3></div>\n  </Carousel>\n, mountNode);\n````\n\n````css\n/* For demo */\n.ant-carousel .slick-slide {\n  text-align: center;\n  height: 160px;\n  line-height: 160px;\n  background: #364d79;\n  overflow: hidden;\n}\n\n.ant-carousel .slick-slide h3 {\n  color: #fff;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Carousel } from 'antd';\n\nexport default function DemoComponent_carousel_vertical() {\nreturn(\n  <Carousel vertical>\n    <div><h3>1</h3></div>\n    <div><h3>2</h3></div>\n    <div><h3>3</h3></div>\n    <div><h3>4</h3></div>\n  </Carousel>\n);\n};\n\nexport const demo = <DemoComponent_carousel_vertical key=\"DemoComponent_carousel_vertical\" />;\n"],"cssCodes":["/* For demo */\n.ant-carousel .slick-slide {\n  text-align: center;\n  height: 160px;\n  line-height: 160px;\n  background: #364d79;\n  overflow: hidden;\n}\n\n.ant-carousel .slick-slide h3 {\n  color: #fff;\n}\n"]}]},{"name":"cascader","demos":[{"name":"basic","content":"---\norder: 0\ntitle:\n  zh-CN: 基本\n  en-US: Basic\n---\n\n## zh-CN\n\n省市区级联。\n\n## en-US\n\nCascade selection box for selecting province/city/district.\n\n````jsx\nimport { Cascader } from 'antd';\n\nconst options = [{\n  value: 'zhejiang',\n  label: 'Zhejiang',\n  children: [{\n    value: 'hangzhou',\n    label: 'Hangzhou',\n    children: [{\n      value: 'xihu',\n      label: 'West Lake',\n    }],\n  }],\n}, {\n  value: 'jiangsu',\n  label: 'Jiangsu',\n  children: [{\n    value: 'nanjing',\n    label: 'Nanjing',\n    children: [{\n      value: 'zhonghuamen',\n      label: 'Zhong Hua Men',\n    }],\n  }],\n}];\n\nfunction onChange(value) {\n  console.log(value);\n}\n\nReactDOM.render(\n  <Cascader options={options} onChange={onChange} placeholder=\"Please select\" />\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Cascader } from 'antd';\n\nconst options = [{\n  value: 'zhejiang',\n  label: 'Zhejiang',\n  children: [{\n    value: 'hangzhou',\n    label: 'Hangzhou',\n    children: [{\n      value: 'xihu',\n      label: 'West Lake',\n    }],\n  }],\n}, {\n  value: 'jiangsu',\n  label: 'Jiangsu',\n  children: [{\n    value: 'nanjing',\n    label: 'Nanjing',\n    children: [{\n      value: 'zhonghuamen',\n      label: 'Zhong Hua Men',\n    }],\n  }],\n}];\n\nfunction onChange(value) {\n  console.log(value);\n}\n\nexport default function DemoComponent_cascader_basic() {\nreturn(\n  <Cascader options={options} onChange={onChange} placeholder=\"Please select\" />\n);\n};\n\nexport const demo = <DemoComponent_cascader_basic key=\"DemoComponent_cascader_basic\" />;\n"],"cssCodes":[]},{"name":"change_on_select","content":"---\norder: 5\ntitle:\n  zh-CN: 选择即改变\n  en-US: Change on select\n---\n\n## zh-CN\n\n这种交互允许只选中父级选项。\n\n## en-US\n\nAllow only select parent options.\n\n````jsx\nimport { Cascader } from 'antd';\n\nconst options = [{\n  value: 'zhejiang',\n  label: 'Zhejiang',\n  children: [{\n    value: 'hangzhou',\n    label: 'Hanzhou',\n    children: [{\n      value: 'xihu',\n      label: 'West Lake',\n    }],\n  }],\n}, {\n  value: 'jiangsu',\n  label: 'Jiangsu',\n  children: [{\n    value: 'nanjing',\n    label: 'Nanjing',\n    children: [{\n      value: 'zhonghuamen',\n      label: 'Zhong Hua Men',\n    }],\n  }],\n}];\n\nfunction onChange(value) {\n  console.log(value);\n}\n\nReactDOM.render(\n  <Cascader options={options} onChange={onChange} changeOnSelect />\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Cascader } from 'antd';\n\nconst options = [{\n  value: 'zhejiang',\n  label: 'Zhejiang',\n  children: [{\n    value: 'hangzhou',\n    label: 'Hanzhou',\n    children: [{\n      value: 'xihu',\n      label: 'West Lake',\n    }],\n  }],\n}, {\n  value: 'jiangsu',\n  label: 'Jiangsu',\n  children: [{\n    value: 'nanjing',\n    label: 'Nanjing',\n    children: [{\n      value: 'zhonghuamen',\n      label: 'Zhong Hua Men',\n    }],\n  }],\n}];\n\nfunction onChange(value) {\n  console.log(value);\n}\n\nexport default function DemoComponent_cascader_change_on_select() {\nreturn(\n  <Cascader options={options} onChange={onChange} changeOnSelect />\n);\n};\n\nexport const demo = <DemoComponent_cascader_change_on_select key=\"DemoComponent_cascader_change_on_select\" />;\n"],"cssCodes":[]},{"name":"custom_render","content":"---\norder: 7\ntitle:\n  zh-CN: 自定义已选项\n  en-US: Custom render\n---\n\n## zh-CN\n\n例如给最后一项加上邮编链接。\n\n## en-US\n\nFor instance, add an external link after the selected value.\n\n````jsx\nimport { Cascader } from 'antd';\n\nconst options = [{\n  value: 'zhejiang',\n  label: 'Zhejiang',\n  children: [{\n    value: 'hangzhou',\n    label: 'Hangzhou',\n    children: [{\n      value: 'xihu',\n      label: 'West Lake',\n      code: 752100,\n    }],\n  }],\n}, {\n  value: 'jiangsu',\n  label: 'Jiangsu',\n  children: [{\n    value: 'nanjing',\n    label: 'Nanjing',\n    children: [{\n      value: 'zhonghuamen',\n      label: 'Zhong Hua Men',\n      code: 453400,\n    }],\n  }],\n}];\n\nfunction handleAreaClick(e, label, option) {\n  e.stopPropagation();\n  console.log('clicked', label, option);\n}\n\nconst displayRender = (labels, selectedOptions) => labels.map((label, i) => {\n  const option = selectedOptions[i];\n  if (i === labels.length - 1) {\n    return (\n      <span key={option.value}>\n        {label} (<a onClick={e => handleAreaClick(e, label, option)}>{option.code}</a>)\n      </span>\n    );\n  }\n  return <span key={option.value}>{label} / </span>;\n});\n\nReactDOM.render(\n  <Cascader\n    options={options}\n    defaultValue={['zhejiang', 'hangzhou', 'xihu']}\n    displayRender={displayRender}\n    style={{ width: 270 }}\n  />\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Cascader } from 'antd';\n\nconst options = [{\n  value: 'zhejiang',\n  label: 'Zhejiang',\n  children: [{\n    value: 'hangzhou',\n    label: 'Hangzhou',\n    children: [{\n      value: 'xihu',\n      label: 'West Lake',\n      code: 752100,\n    }],\n  }],\n}, {\n  value: 'jiangsu',\n  label: 'Jiangsu',\n  children: [{\n    value: 'nanjing',\n    label: 'Nanjing',\n    children: [{\n      value: 'zhonghuamen',\n      label: 'Zhong Hua Men',\n      code: 453400,\n    }],\n  }],\n}];\n\nfunction handleAreaClick(e, label, option) {\n  e.stopPropagation();\n  console.log('clicked', label, option);\n}\n\nconst displayRender = (labels, selectedOptions) => labels.map((label, i) => {\n  const option = selectedOptions[i];\n  if (i === labels.length - 1) {\n    return (\n      <span key={option.value}>\n        {label} (<a onClick={e => handleAreaClick(e, label, option)}>{option.code}</a>)\n      </span>\n    );\n  }\n  return <span key={option.value}>{label} / </span>;\n});\n\nexport default function DemoComponent_cascader_custom_render() {\nreturn(\n  <Cascader\n    options={options}\n    defaultValue={['zhejiang', 'hangzhou', 'xihu']}\n    displayRender={displayRender}\n    style={{ width: 270 }}\n  />\n);\n};\n\nexport const demo = <DemoComponent_cascader_custom_render key=\"DemoComponent_cascader_custom_render\" />;\n"],"cssCodes":[]},{"name":"custom_trigger","content":"---\norder: 2\ntitle:\n  zh-CN: 可以自定义显示\n  en-US: Custom trigger\n---\n\n## zh-CN\n\n切换按钮和结果分开。\n\n## en-US\n\nSeparate trigger button and result.\n\n````jsx\nimport { Cascader } from 'antd';\n\nconst options = [{\n  value: 'zhejiang',\n  label: 'Zhejiang',\n  children: [{\n    value: 'hangzhou',\n    label: 'Hangzhou',\n  }],\n}, {\n  value: 'jiangsu',\n  label: 'Jiangsu',\n  children: [{\n    value: 'nanjing',\n    label: 'Nanjing',\n  }],\n}];\n\nclass CitySwitcher extends React.Component {\n  state = {\n    text: 'Unselect',\n  };\n\n  onChange = (value, selectedOptions) => {\n    this.setState({\n      text: selectedOptions.map(o => o.label).join(', '),\n    });\n  }\n  render() {\n    return (\n      <span>\n        {this.state.text}\n        &nbsp;\n        <Cascader options={options} onChange={this.onChange}>\n          <a href=\"#\">Change city</a>\n        </Cascader>\n      </span>\n    );\n  }\n}\n\nReactDOM.render(<CitySwitcher />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Cascader } from 'antd';\n\nconst options = [{\n  value: 'zhejiang',\n  label: 'Zhejiang',\n  children: [{\n    value: 'hangzhou',\n    label: 'Hangzhou',\n  }],\n}, {\n  value: 'jiangsu',\n  label: 'Jiangsu',\n  children: [{\n    value: 'nanjing',\n    label: 'Nanjing',\n  }],\n}];\n\nclass CitySwitcher extends React.Component {\n  state = {\n    text: 'Unselect',\n  };\n\n  onChange = (value, selectedOptions) => {\n    this.setState({\n      text: selectedOptions.map(o => o.label).join(', '),\n    });\n  }\n  render() {\n    return (\n      <span>\n        {this.state.text}\n        &nbsp;\n        <Cascader options={options} onChange={this.onChange}>\n          <a href=\"#\">Change city</a>\n        </Cascader>\n      </span>\n    );\n  }\n}\n\nexport default function DemoComponent_cascader_custom_trigger() {\nreturn(<CitySwitcher />);\n};\n\nexport const demo = <DemoComponent_cascader_custom_trigger key=\"DemoComponent_cascader_custom_trigger\" />;\n"],"cssCodes":[]},{"name":"default_value","content":"---\norder: 1\ntitle:\n  zh-CN: 默认值\n  en-US: Default value\n---\n\n## zh-CN\n\n默认值通过数组的方式指定。\n\n## en-US\n\nSpecifies default value by an array.\n\n````jsx\nimport { Cascader } from 'antd';\n\nconst options = [{\n  value: 'zhejiang',\n  label: 'Zhejiang',\n  children: [{\n    value: 'hangzhou',\n    label: 'Hangzhou',\n    children: [{\n      value: 'xihu',\n      label: 'West Lake',\n    }],\n  }],\n}, {\n  value: 'jiangsu',\n  label: 'Jiangsu',\n  children: [{\n    value: 'nanjing',\n    label: 'Nanjing',\n    children: [{\n      value: 'zhonghuamen',\n      label: 'Zhong Hua Men',\n    }],\n  }],\n}];\n\nfunction onChange(value) {\n  console.log(value);\n}\n\nReactDOM.render(\n  <Cascader defaultValue={['zhejiang', 'hangzhou', 'xihu']} options={options} onChange={onChange} />\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Cascader } from 'antd';\n\nconst options = [{\n  value: 'zhejiang',\n  label: 'Zhejiang',\n  children: [{\n    value: 'hangzhou',\n    label: 'Hangzhou',\n    children: [{\n      value: 'xihu',\n      label: 'West Lake',\n    }],\n  }],\n}, {\n  value: 'jiangsu',\n  label: 'Jiangsu',\n  children: [{\n    value: 'nanjing',\n    label: 'Nanjing',\n    children: [{\n      value: 'zhonghuamen',\n      label: 'Zhong Hua Men',\n    }],\n  }],\n}];\n\nfunction onChange(value) {\n  console.log(value);\n}\n\nexport default function DemoComponent_cascader_default_value() {\nreturn(\n  <Cascader defaultValue={['zhejiang', 'hangzhou', 'xihu']} options={options} onChange={onChange} />\n);\n};\n\nexport const demo = <DemoComponent_cascader_default_value key=\"DemoComponent_cascader_default_value\" />;\n"],"cssCodes":[]},{"name":"disabled_option","content":"---\norder: 4\ntitle:\n  zh-CN: 禁用选项\n  en-US: Disabled option\n---\n\n## zh-CN\n\n通过指定 options 里的 `disabled` 字段。\n\n## en-US\n\nDisable option by specifying the `disabled` property in `options`.\n\n````jsx\nimport { Cascader } from 'antd';\n\nconst options = [{\n  value: 'zhejiang',\n  label: 'Zhejiang',\n  children: [{\n    value: 'hangzhou',\n    label: 'Hangzhou',\n    children: [{\n      value: 'xihu',\n      label: 'West Lake',\n    }],\n  }],\n}, {\n  value: 'jiangsu',\n  label: 'Jiangsu',\n  disabled: true,\n  children: [{\n    value: 'nanjing',\n    label: 'Nanjing',\n    children: [{\n      value: 'zhonghuamen',\n      label: 'Zhong Hua Men',\n    }],\n  }],\n}];\n\nfunction onChange(value) {\n  console.log(value);\n}\n\nReactDOM.render(\n  <Cascader options={options} onChange={onChange} />\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Cascader } from 'antd';\n\nconst options = [{\n  value: 'zhejiang',\n  label: 'Zhejiang',\n  children: [{\n    value: 'hangzhou',\n    label: 'Hangzhou',\n    children: [{\n      value: 'xihu',\n      label: 'West Lake',\n    }],\n  }],\n}, {\n  value: 'jiangsu',\n  label: 'Jiangsu',\n  disabled: true,\n  children: [{\n    value: 'nanjing',\n    label: 'Nanjing',\n    children: [{\n      value: 'zhonghuamen',\n      label: 'Zhong Hua Men',\n    }],\n  }],\n}];\n\nfunction onChange(value) {\n  console.log(value);\n}\n\nexport default function DemoComponent_cascader_disabled_option() {\nreturn(\n  <Cascader options={options} onChange={onChange} />\n);\n};\n\nexport const demo = <DemoComponent_cascader_disabled_option key=\"DemoComponent_cascader_disabled_option\" />;\n"],"cssCodes":[]},{"name":"hover","content":"---\norder: 3\ntitle:\n  zh-CN: 移入展开\n  en-US: Hover\n---\n\n## zh-CN\n\n通过移入展开下级菜单，点击完成选择。\n\n## en-US\n\nHover to expand sub menu, click to select option.\n\n````jsx\nimport { Cascader } from 'antd';\n\nconst options = [{\n  value: 'zhejiang',\n  label: 'Zhejiang',\n  children: [{\n    value: 'hangzhou',\n    label: 'Hangzhou',\n    children: [{\n      value: 'xihu',\n      label: 'West Lake',\n    }],\n  }],\n}, {\n  value: 'jiangsu',\n  label: 'Jiangsu',\n  children: [{\n    value: 'nanjing',\n    label: 'Nanjing',\n    children: [{\n      value: 'zhonghuamen',\n      label: 'Zhong Hua Men',\n    }],\n  }],\n}];\n\nfunction onChange(value) {\n  console.log(value);\n}\n\n// Just show the latest item.\nfunction displayRender(label) {\n  return label[label.length - 1];\n}\n\nReactDOM.render(\n  <Cascader\n    options={options}\n    expandTrigger=\"hover\"\n    displayRender={displayRender}\n    onChange={onChange}\n  />\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Cascader } from 'antd';\n\nconst options = [{\n  value: 'zhejiang',\n  label: 'Zhejiang',\n  children: [{\n    value: 'hangzhou',\n    label: 'Hangzhou',\n    children: [{\n      value: 'xihu',\n      label: 'West Lake',\n    }],\n  }],\n}, {\n  value: 'jiangsu',\n  label: 'Jiangsu',\n  children: [{\n    value: 'nanjing',\n    label: 'Nanjing',\n    children: [{\n      value: 'zhonghuamen',\n      label: 'Zhong Hua Men',\n    }],\n  }],\n}];\n\nfunction onChange(value) {\n  console.log(value);\n}\n\n// Just show the latest item.\nfunction displayRender(label) {\n  return label[label.length - 1];\n}\n\nexport default function DemoComponent_cascader_hover() {\nreturn(\n  <Cascader\n    options={options}\n    expandTrigger=\"hover\"\n    displayRender={displayRender}\n    onChange={onChange}\n  />\n);\n};\n\nexport const demo = <DemoComponent_cascader_hover key=\"DemoComponent_cascader_hover\" />;\n"],"cssCodes":[]},{"name":"lazy","content":"---\norder: 9\ntitle:\n  zh-CN: 动态加载选项\n  en-US: Load Options Lazily\n---\n\n## zh-CN\n\n使用 `loadData` 实现动态加载选项。\n\n> 注意：`loadData` 与 `showSearch` 无法一起使用。\n\n## en-US\n\nLoad options lazily with `loadData`.\n\n> Note: `loadData` cannot work with `showSearch`.\n\n````jsx\nimport { Cascader } from 'antd';\n\nconst options = [{\n  value: 'zhejiang',\n  label: 'Zhejiang',\n  isLeaf: false,\n}, {\n  value: 'jiangsu',\n  label: 'Jiangsu',\n  isLeaf: false,\n}];\n\nclass LazyOptions extends React.Component {\n  state = {\n    inputValue: '',\n    options,\n  };\n  onChange = (value, selectedOptions) => {\n    console.log(value, selectedOptions);\n    this.setState({\n      inputValue: selectedOptions.map(o => o.label).join(', '),\n    });\n  }\n  loadData = (selectedOptions) => {\n    const targetOption = selectedOptions[selectedOptions.length - 1];\n    targetOption.loading = true;\n\n    // load options lazily\n    setTimeout(() => {\n      targetOption.loading = false;\n      targetOption.children = [{\n        label: `${targetOption.label} Dynamic 1`,\n        value: 'dynamic1',\n      }, {\n        label: `${targetOption.label} Dynamic 2`,\n        value: 'dynamic2',\n      }];\n      this.setState({\n        options: [...this.state.options],\n      });\n    }, 1000);\n  }\n  render() {\n    return (\n      <Cascader\n        options={this.state.options}\n        loadData={this.loadData}\n        onChange={this.onChange}\n        changeOnSelect\n      />\n    );\n  }\n}\n\nReactDOM.render(<LazyOptions />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Cascader } from 'antd';\n\nconst options = [{\n  value: 'zhejiang',\n  label: 'Zhejiang',\n  isLeaf: false,\n}, {\n  value: 'jiangsu',\n  label: 'Jiangsu',\n  isLeaf: false,\n}];\n\nclass LazyOptions extends React.Component {\n  state = {\n    inputValue: '',\n    options,\n  };\n  onChange = (value, selectedOptions) => {\n    console.log(value, selectedOptions);\n    this.setState({\n      inputValue: selectedOptions.map(o => o.label).join(', '),\n    });\n  }\n  loadData = (selectedOptions) => {\n    const targetOption = selectedOptions[selectedOptions.length - 1];\n    targetOption.loading = true;\n\n    // load options lazily\n    setTimeout(() => {\n      targetOption.loading = false;\n      targetOption.children = [{\n        label: `${targetOption.label} Dynamic 1`,\n        value: 'dynamic1',\n      }, {\n        label: `${targetOption.label} Dynamic 2`,\n        value: 'dynamic2',\n      }];\n      this.setState({\n        options: [...this.state.options],\n      });\n    }, 1000);\n  }\n  render() {\n    return (\n      <Cascader\n        options={this.state.options}\n        loadData={this.loadData}\n        onChange={this.onChange}\n        changeOnSelect\n      />\n    );\n  }\n}\n\nexport default function DemoComponent_cascader_lazy() {\nreturn(<LazyOptions />);\n};\n\nexport const demo = <DemoComponent_cascader_lazy key=\"DemoComponent_cascader_lazy\" />;\n"],"cssCodes":[]},{"name":"search","content":"---\norder: 8\ntitle:\n  zh-CN: 搜索\n  en-US: Search\n---\n\n## zh-CN\n\n可以直接搜索选项并选择。\n\n> `Cascader[showSearch]` 暂不支持服务端搜索，更多信息见 [#5547](https://github.com/ant-design/ant-design/issues/5547)\n\n## en-US\n\nSearch and select options directly.\n\n> Now, `Cascader[showSearch]` doesn't support search on server, more info [#5547](https://github.com/ant-design/ant-design/issues/5547)\n\n````jsx\nimport { Cascader } from 'antd';\n\nconst options = [{\n  value: 'zhejiang',\n  label: 'Zhejiang',\n  children: [{\n    value: 'hangzhou',\n    label: 'Hangzhou',\n    children: [{\n      value: 'xihu',\n      label: 'West Lake',\n    }, {\n      value: 'xiasha',\n      label: 'Xia Sha',\n      disabled: true,\n    }],\n  }],\n}, {\n  value: 'jiangsu',\n  label: 'Jiangsu',\n  children: [{\n    value: 'nanjing',\n    label: 'Nanjing',\n    children: [{\n      value: 'zhonghuamen',\n      label: 'Zhong Hua men',\n    }],\n  }],\n}];\n\nfunction onChange(value, selectedOptions) {\n  console.log(value, selectedOptions);\n}\n\nReactDOM.render(\n  <Cascader\n    options={options}\n    onChange={onChange}\n    placeholder=\"Please select\"\n    showSearch\n  />,\n  mountNode\n);\n````\n","jsCodes":["import React from 'react';\nimport { Cascader } from 'antd';\n\nconst options = [{\n  value: 'zhejiang',\n  label: 'Zhejiang',\n  children: [{\n    value: 'hangzhou',\n    label: 'Hangzhou',\n    children: [{\n      value: 'xihu',\n      label: 'West Lake',\n    }, {\n      value: 'xiasha',\n      label: 'Xia Sha',\n      disabled: true,\n    }],\n  }],\n}, {\n  value: 'jiangsu',\n  label: 'Jiangsu',\n  children: [{\n    value: 'nanjing',\n    label: 'Nanjing',\n    children: [{\n      value: 'zhonghuamen',\n      label: 'Zhong Hua men',\n    }],\n  }],\n}];\n\nfunction onChange(value, selectedOptions) {\n  console.log(value, selectedOptions);\n}\n\nexport default function DemoComponent_cascader_search() {\nreturn(\n  <Cascader\n    options={options}\n    onChange={onChange}\n    placeholder=\"Please select\"\n    showSearch\n  />);\n};\n\nexport const demo = <DemoComponent_cascader_search key=\"DemoComponent_cascader_search\" />;\n"],"cssCodes":[]},{"name":"size","content":"---\norder: 6\ntitle:\n  zh-CN: 大小\n  en-US: Size\n---\n\n## zh-CN\n\n不同大小的级联选择器。\n\n## en-US\n\nCascade selection box of different sizes.\n\n````jsx\nimport { Cascader } from 'antd';\n\nconst options = [{\n  value: 'zhejiang',\n  label: 'Zhejiang',\n  children: [{\n    value: 'hangzhou',\n    label: 'Hangzhou',\n    children: [{\n      value: 'xihu',\n      label: 'West Lake',\n    }],\n  }],\n}, {\n  value: 'jiangsu',\n  label: 'Jiangsu',\n  children: [{\n    value: 'nanjing',\n    label: 'Nanjing',\n    children: [{\n      value: 'zhonghuamen',\n      label: 'Zhong Hua Men',\n    }],\n  }],\n}];\n\nfunction onChange(value) {\n  console.log(value);\n}\n\nReactDOM.render(\n  <div>\n    <Cascader size=\"large\" options={options} onChange={onChange} /><br /><br />\n    <Cascader options={options} onChange={onChange} /><br /><br />\n    <Cascader size=\"small\" options={options} onChange={onChange} /><br /><br />\n  </div>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Cascader } from 'antd';\n\nconst options = [{\n  value: 'zhejiang',\n  label: 'Zhejiang',\n  children: [{\n    value: 'hangzhou',\n    label: 'Hangzhou',\n    children: [{\n      value: 'xihu',\n      label: 'West Lake',\n    }],\n  }],\n}, {\n  value: 'jiangsu',\n  label: 'Jiangsu',\n  children: [{\n    value: 'nanjing',\n    label: 'Nanjing',\n    children: [{\n      value: 'zhonghuamen',\n      label: 'Zhong Hua Men',\n    }],\n  }],\n}];\n\nfunction onChange(value) {\n  console.log(value);\n}\n\nexport default function DemoComponent_cascader_size() {\nreturn(\n  <div>\n    <Cascader size=\"large\" options={options} onChange={onChange} /><br /><br />\n    <Cascader options={options} onChange={onChange} /><br /><br />\n    <Cascader size=\"small\" options={options} onChange={onChange} /><br /><br />\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_cascader_size key=\"DemoComponent_cascader_size\" />;\n"],"cssCodes":[]}]},{"name":"checkbox","demos":[{"name":"basic","content":"---\norder: 0\ntitle:\n    zh-CN: 基本用法\n    en-US: Basic\n---\n\n## zh-CN\n\n简单的 checkbox。\n\n## en-US\n\nBasic usage of checkbox.\n\n````jsx\nimport { Checkbox } from 'antd';\n\nfunction onChange(e) {\n  console.log(`checked = ${e.target.checked}`);\n}\n\nReactDOM.render(\n  <Checkbox onChange={onChange}>Checkbox</Checkbox>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Checkbox } from 'antd';\n\nfunction onChange(e) {\n  console.log(`checked = ${e.target.checked}`);\n}\n\nexport default function DemoComponent_checkbox_basic() {\nreturn(\n  <Checkbox onChange={onChange}>Checkbox</Checkbox>\n);\n};\n\nexport const demo = <DemoComponent_checkbox_basic key=\"DemoComponent_checkbox_basic\" />;\n"],"cssCodes":[]},{"name":"check_all","content":"---\norder: 4\ntitle:\n    zh-CN: 全选\n    en-US: Check all\n---\n\n## zh-CN\n\n在实现全选效果时，你可能会用到 `indeterminate` 属性。\n\n## en-US\n\nThe `indeterminate` property can help you to achieve a 'check all' effect.\n\n````jsx\nimport { Checkbox } from 'antd';\nconst CheckboxGroup = Checkbox.Group;\n\nconst plainOptions = ['Apple', 'Pear', 'Orange'];\nconst defaultCheckedList = ['Apple', 'Orange'];\n\nclass App extends React.Component {\n  state = {\n    checkedList: defaultCheckedList,\n    indeterminate: true,\n    checkAll: false,\n  };\n  render() {\n    return (\n      <div>\n        <div style={{ borderBottom: '1px solid #E9E9E9' }}>\n          <Checkbox\n            indeterminate={this.state.indeterminate}\n            onChange={this.onCheckAllChange}\n            checked={this.state.checkAll}\n          >\n            Check all\n          </Checkbox>\n        </div>\n        <br />\n        <CheckboxGroup options={plainOptions} value={this.state.checkedList} onChange={this.onChange} />\n      </div>\n    );\n  }\n  onChange = (checkedList) => {\n    this.setState({\n      checkedList,\n      indeterminate: !!checkedList.length && (checkedList.length < plainOptions.length),\n      checkAll: checkedList.length === plainOptions.length,\n    });\n  }\n  onCheckAllChange = (e) => {\n    this.setState({\n      checkedList: e.target.checked ? plainOptions : [],\n      indeterminate: false,\n      checkAll: e.target.checked,\n    });\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Checkbox } from 'antd';\nconst CheckboxGroup = Checkbox.Group;\n\nconst plainOptions = ['Apple', 'Pear', 'Orange'];\nconst defaultCheckedList = ['Apple', 'Orange'];\n\nclass App extends React.Component {\n  state = {\n    checkedList: defaultCheckedList,\n    indeterminate: true,\n    checkAll: false,\n  };\n  render() {\n    return (\n      <div>\n        <div style={{ borderBottom: '1px solid #E9E9E9' }}>\n          <Checkbox\n            indeterminate={this.state.indeterminate}\n            onChange={this.onCheckAllChange}\n            checked={this.state.checkAll}\n          >\n            Check all\n          </Checkbox>\n        </div>\n        <br />\n        <CheckboxGroup options={plainOptions} value={this.state.checkedList} onChange={this.onChange} />\n      </div>\n    );\n  }\n  onChange = (checkedList) => {\n    this.setState({\n      checkedList,\n      indeterminate: !!checkedList.length && (checkedList.length < plainOptions.length),\n      checkAll: checkedList.length === plainOptions.length,\n    });\n  }\n  onCheckAllChange = (e) => {\n    this.setState({\n      checkedList: e.target.checked ? plainOptions : [],\n      indeterminate: false,\n      checkAll: e.target.checked,\n    });\n  }\n}\n\nexport default function DemoComponent_checkbox_check_all() {\nreturn(<App />);\n};\n\nexport const demo = <DemoComponent_checkbox_check_all key=\"DemoComponent_checkbox_check_all\" />;\n"],"cssCodes":[]},{"name":"controller","content":"---\norder: 2\ntitle:\n    zh-CN: 受控的 Checkbox\n    en-US: Controlled Checkbox\n---\n\n## zh-CN\n\n联动 checkbox。\n\n## en-US\n\nCommunicated with other components.\n\n````jsx\nimport { Checkbox, Button } from 'antd';\n\nclass App extends React.Component {\n  state = {\n    checked: true,\n    disabled: false,\n  };\n  render() {\n    const label = `${this.state.checked ? 'Checked' : 'Unchecked'}-${this.state.disabled ? 'Disabled' : 'Enabled'}`;\n    return (\n      <div>\n        <p style={{ marginBottom: '20px' }}>\n          <Checkbox\n            checked={this.state.checked}\n            disabled={this.state.disabled}\n            onChange={this.onChange}\n          >\n            {label}\n          </Checkbox>\n        </p>\n        <p>\n          <Button\n            type=\"primary\"\n            size=\"small\"\n            onClick={this.toggleChecked}\n          >\n            {!this.state.checked ? 'Check' : 'Uncheck'}\n          </Button>\n          <Button\n            style={{ marginLeft: '10px' }}\n            type=\"primary\"\n            size=\"small\"\n            onClick={this.toggleDisable}\n          >\n            {!this.state.disabled ? 'Disable' : 'Enable'}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n  toggleChecked = () => {\n    this.setState({ checked: !this.state.checked });\n  }\n  toggleDisable = () => {\n    this.setState({ disabled: !this.state.disabled });\n  }\n  onChange = (e) => {\n    console.log('checked = ', e.target.checked);\n    this.setState({\n      checked: e.target.checked,\n    });\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Checkbox, Button } from 'antd';\n\nclass App extends React.Component {\n  state = {\n    checked: true,\n    disabled: false,\n  };\n  render() {\n    const label = `${this.state.checked ? 'Checked' : 'Unchecked'}-${this.state.disabled ? 'Disabled' : 'Enabled'}`;\n    return (\n      <div>\n        <p style={{ marginBottom: '20px' }}>\n          <Checkbox\n            checked={this.state.checked}\n            disabled={this.state.disabled}\n            onChange={this.onChange}\n          >\n            {label}\n          </Checkbox>\n        </p>\n        <p>\n          <Button\n            type=\"primary\"\n            size=\"small\"\n            onClick={this.toggleChecked}\n          >\n            {!this.state.checked ? 'Check' : 'Uncheck'}\n          </Button>\n          <Button\n            style={{ marginLeft: '10px' }}\n            type=\"primary\"\n            size=\"small\"\n            onClick={this.toggleDisable}\n          >\n            {!this.state.disabled ? 'Disable' : 'Enable'}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n  toggleChecked = () => {\n    this.setState({ checked: !this.state.checked });\n  }\n  toggleDisable = () => {\n    this.setState({ disabled: !this.state.disabled });\n  }\n  onChange = (e) => {\n    console.log('checked = ', e.target.checked);\n    this.setState({\n      checked: e.target.checked,\n    });\n  }\n}\n\nexport default function DemoComponent_checkbox_controller() {\nreturn(<App />);\n};\n\nexport const demo = <DemoComponent_checkbox_controller key=\"DemoComponent_checkbox_controller\" />;\n"],"cssCodes":[]},{"name":"disabled","content":"---\norder: 1\ntitle:\n    zh-CN: 不可用\n    en-US: Disabled\n---\n\n## zh-CN\n\ncheckbox 不可用。\n\n## en-US\n\nDisabled checkbox.\n\n````jsx\nimport { Checkbox } from 'antd';\n\nReactDOM.render(\n  <div>\n    <Checkbox defaultChecked={false} disabled />\n    <br />\n    <Checkbox defaultChecked disabled />\n  </div>\n  , mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Checkbox } from 'antd';\n\nexport default function DemoComponent_checkbox_disabled() {\nreturn(\n  <div>\n    <Checkbox defaultChecked={false} disabled />\n    <br />\n    <Checkbox defaultChecked disabled />\n  </div>\n  );\n};\n\nexport const demo = <DemoComponent_checkbox_disabled key=\"DemoComponent_checkbox_disabled\" />;\n"],"cssCodes":[]},{"name":"group","content":"---\norder: 3\ntitle:\n    zh-CN: Checkbox 组\n    en-US: Checkbox Group\n---\n\n## zh-CN\n\n方便的从数组生成 Checkbox 组。\n\n## en-US\n\nGenerate a group of checkboxes from an array.\n\n````jsx\nimport { Checkbox } from 'antd';\nconst CheckboxGroup = Checkbox.Group;\n\nfunction onChange(checkedValues) {\n  console.log('checked = ', checkedValues);\n}\n\nconst plainOptions = ['Apple', 'Pear', 'Orange'];\nconst options = [\n  { label: 'Apple', value: 'Apple' },\n  { label: 'Pear', value: 'Pear' },\n  { label: 'Orange', value: 'Orange' },\n];\nconst optionsWithDisabled = [\n  { label: 'Apple', value: 'Apple' },\n  { label: 'Pear', value: 'Pear' },\n  { label: 'Orange', value: 'Orange', disabled: false },\n];\n\nReactDOM.render(\n  <div>\n    <CheckboxGroup options={plainOptions} defaultValue={['Apple']} onChange={onChange} />\n    <br />\n    <CheckboxGroup options={options} defaultValue={['Pear']} onChange={onChange} />\n    <br />\n    <CheckboxGroup options={optionsWithDisabled} disabled defaultValue={['Apple']} onChange={onChange} />\n  </div>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Checkbox } from 'antd';\nconst CheckboxGroup = Checkbox.Group;\n\nfunction onChange(checkedValues) {\n  console.log('checked = ', checkedValues);\n}\n\nconst plainOptions = ['Apple', 'Pear', 'Orange'];\nconst options = [\n  { label: 'Apple', value: 'Apple' },\n  { label: 'Pear', value: 'Pear' },\n  { label: 'Orange', value: 'Orange' },\n];\nconst optionsWithDisabled = [\n  { label: 'Apple', value: 'Apple' },\n  { label: 'Pear', value: 'Pear' },\n  { label: 'Orange', value: 'Orange', disabled: false },\n];\n\nexport default function DemoComponent_checkbox_group() {\nreturn(\n  <div>\n    <CheckboxGroup options={plainOptions} defaultValue={['Apple']} onChange={onChange} />\n    <br />\n    <CheckboxGroup options={options} defaultValue={['Pear']} onChange={onChange} />\n    <br />\n    <CheckboxGroup options={optionsWithDisabled} disabled defaultValue={['Apple']} onChange={onChange} />\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_checkbox_group key=\"DemoComponent_checkbox_group\" />;\n"],"cssCodes":[]},{"name":"layout","content":"---\norder: 5\ntitle:\n  zh-CN: 布局\n  en-US: Use with Grid\n---\n\n## zh-CN\n\nCheckbox.Group 内嵌 Checkbox 并与 Grid 组件一起使用，可以实现灵活的布局。\n\n## en-US\n\nWe can use Checkbox and Grid in Checkbox.Group, to implement complex layout.\n\n````jsx\nimport { Checkbox, Row, Col } from 'antd';\n\nfunction onChange(checkedValues) {\n  console.log('checked = ', checkedValues);\n}\n\nReactDOM.render(\n  <Checkbox.Group onChange={onChange}>\n    <Row>\n      <Col span={8}><Checkbox value=\"A\">A</Checkbox></Col>\n      <Col span={8}><Checkbox value=\"B\">B</Checkbox></Col>\n      <Col span={8}><Checkbox value=\"C\">C</Checkbox></Col>\n      <Col span={8}><Checkbox value=\"D\">D</Checkbox></Col>\n      <Col span={8}><Checkbox value=\"E\">E</Checkbox></Col>\n    </Row>\n  </Checkbox.Group>,\n  mountNode\n);\n````\n","jsCodes":["import React from 'react';\nimport { Checkbox, Row, Col } from 'antd';\n\nfunction onChange(checkedValues) {\n  console.log('checked = ', checkedValues);\n}\n\nexport default function DemoComponent_checkbox_layout() {\nreturn(\n  <Checkbox.Group onChange={onChange}>\n    <Row>\n      <Col span={8}><Checkbox value=\"A\">A</Checkbox></Col>\n      <Col span={8}><Checkbox value=\"B\">B</Checkbox></Col>\n      <Col span={8}><Checkbox value=\"C\">C</Checkbox></Col>\n      <Col span={8}><Checkbox value=\"D\">D</Checkbox></Col>\n      <Col span={8}><Checkbox value=\"E\">E</Checkbox></Col>\n    </Row>\n  </Checkbox.Group>);\n};\n\nexport const demo = <DemoComponent_checkbox_layout key=\"DemoComponent_checkbox_layout\" />;\n"],"cssCodes":[]}]},{"name":"collapse","demos":[{"name":"accordion","content":"---\norder: 1\ntitle: \n  zh-CN: 手风琴\n  en-US: Accordion\n---\n\n## zh-CN\n\n手风琴，每次只打开一个tab。默认打开第一个。\n\n## en-US\n\nAccordion mode, only one panel can be expanded at a time. The first panel will be expanded by default.\n\n````jsx\nimport { Collapse } from 'antd';\nconst Panel = Collapse.Panel;\n\nconst text = `\n  A dog is a type of domesticated animal.\n  Known for its loyalty and faithfulness,\n  it can be found as a welcome guest in many households across the world.\n`;\n\nReactDOM.render(\n  <Collapse accordion>\n    <Panel header={'This is panel header 1'} key=\"1\">\n      <p>{text}</p>\n    </Panel>\n    <Panel header={'This is panel header 2'} key=\"2\">\n      <p>{text}</p>\n    </Panel>\n    <Panel header={'This is panel header 3'} key=\"3\">\n      <p>{text}</p>\n    </Panel>\n  </Collapse>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Collapse } from 'antd';\nconst Panel = Collapse.Panel;\n\nconst text = `\n  A dog is a type of domesticated animal.\n  Known for its loyalty and faithfulness,\n  it can be found as a welcome guest in many households across the world.\n`;\n\nexport default function DemoComponent_collapse_accordion() {\nreturn(\n  <Collapse accordion>\n    <Panel header={'This is panel header 1'} key=\"1\">\n      <p>{text}</p>\n    </Panel>\n    <Panel header={'This is panel header 2'} key=\"2\">\n      <p>{text}</p>\n    </Panel>\n    <Panel header={'This is panel header 3'} key=\"3\">\n      <p>{text}</p>\n    </Panel>\n  </Collapse>\n);\n};\n\nexport const demo = <DemoComponent_collapse_accordion key=\"DemoComponent_collapse_accordion\" />;\n"],"cssCodes":[]},{"name":"basic","content":"---\norder: 0\ntitle: \n  zh-CN: 折叠面板\n  en-US: Collapse\n---\n\n## zh-CN\n\n可以同时展开多个面板，这个例子默认展开了第一个。\n\n## en-US\n\nMore than one panel can be expanded at a time, the first panel is initialized to be active in this case.\n\n````jsx\nimport { Collapse } from 'antd';\nconst Panel = Collapse.Panel;\n\nfunction callback(key) {\n  console.log(key);\n}\n\nconst text = `\n  A dog is a type of domesticated animal.\n  Known for its loyalty and faithfulness,\n  it can be found as a welcome guest in many households across the world.\n`;\n\nReactDOM.render(\n  <Collapse defaultActiveKey={['1']} onChange={callback}>\n    <Panel header=\"This is panel header 1\" key=\"1\">\n      <p>{text}</p>\n    </Panel>\n    <Panel header=\"This is panel header 2\" key=\"2\">\n      <p>{text}</p>\n    </Panel>\n    <Panel header=\"This is panel header 3\" key=\"3\" disabled>\n      <p>{text}</p>\n    </Panel>\n  </Collapse>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Collapse } from 'antd';\nconst Panel = Collapse.Panel;\n\nfunction callback(key) {\n  console.log(key);\n}\n\nconst text = `\n  A dog is a type of domesticated animal.\n  Known for its loyalty and faithfulness,\n  it can be found as a welcome guest in many households across the world.\n`;\n\nexport default function DemoComponent_collapse_basic() {\nreturn(\n  <Collapse defaultActiveKey={['1']} onChange={callback}>\n    <Panel header=\"This is panel header 1\" key=\"1\">\n      <p>{text}</p>\n    </Panel>\n    <Panel header=\"This is panel header 2\" key=\"2\">\n      <p>{text}</p>\n    </Panel>\n    <Panel header=\"This is panel header 3\" key=\"3\" disabled>\n      <p>{text}</p>\n    </Panel>\n  </Collapse>\n);\n};\n\nexport const demo = <DemoComponent_collapse_basic key=\"DemoComponent_collapse_basic\" />;\n"],"cssCodes":[]},{"name":"borderless","content":"---\norder: 3\ntitle:\n  zh-CN: 简洁风格\n  en-US: Borderless\n---\n\n## zh-CN\n\n一套没有边框的简洁样式。\n\n## en-US\n\nA borderless style of Collapse.\n\n````jsx\nimport { Collapse } from 'antd';\nconst Panel = Collapse.Panel;\n\nconst text = `\n  A dog is a type of domesticated animal.\n  Known for its loyalty and faithfulness,\n  it can be found as a welcome guest in many households across the world.\n`;\n\nReactDOM.render(\n  <Collapse bordered={false} defaultActiveKey={['1']}>\n    <Panel header=\"This is panel header 1\" key=\"1\">\n      <p>{text}</p>\n    </Panel>\n    <Panel header=\"This is panel header 2\" key=\"2\">\n      <p>{text}</p>\n    </Panel>\n    <Panel header=\"This is panel header 3\" key=\"3\">\n      <p>{text}</p>\n    </Panel>\n  </Collapse>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Collapse } from 'antd';\nconst Panel = Collapse.Panel;\n\nconst text = `\n  A dog is a type of domesticated animal.\n  Known for its loyalty and faithfulness,\n  it can be found as a welcome guest in many households across the world.\n`;\n\nexport default function DemoComponent_collapse_borderless() {\nreturn(\n  <Collapse bordered={false} defaultActiveKey={['1']}>\n    <Panel header=\"This is panel header 1\" key=\"1\">\n      <p>{text}</p>\n    </Panel>\n    <Panel header=\"This is panel header 2\" key=\"2\">\n      <p>{text}</p>\n    </Panel>\n    <Panel header=\"This is panel header 3\" key=\"3\">\n      <p>{text}</p>\n    </Panel>\n  </Collapse>\n);\n};\n\nexport const demo = <DemoComponent_collapse_borderless key=\"DemoComponent_collapse_borderless\" />;\n"],"cssCodes":[]},{"name":"custom","content":"---\norder: 3\ntitle:\n  zh-CN: 自定义面板\n  en-US: Custom Panel\n---\n\n## zh-CN\n\n自定义各个面板的背景色、圆角和边距。\n\n## en-US\n\nCustomize the background, border and margin styles for each panel.\n\n````jsx\nimport { Collapse } from 'antd';\nconst Panel = Collapse.Panel;\n\nconst text = `\n  A dog is a type of domesticated animal.\n  Known for its loyalty and faithfulness,\n  it can be found as a welcome guest in many households across the world.\n`;\n\nconst customPanelStyle = {\n  background: '#f7f7f7',\n  borderRadius: 4,\n  marginBottom: 24,\n  border: 0,\n};\n\nReactDOM.render(\n  <Collapse bordered={false} defaultActiveKey={['1']}>\n    <Panel header=\"This is panel header 1\" key=\"1\" style={customPanelStyle}>\n      <p>{text}</p>\n    </Panel>\n    <Panel header=\"This is panel header 2\" key=\"2\" style={customPanelStyle}>\n      <p>{text}</p>\n    </Panel>\n    <Panel header=\"This is panel header 3\" key=\"3\" style={customPanelStyle}>\n      <p>{text}</p>\n    </Panel>\n  </Collapse>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Collapse } from 'antd';\nconst Panel = Collapse.Panel;\n\nconst text = `\n  A dog is a type of domesticated animal.\n  Known for its loyalty and faithfulness,\n  it can be found as a welcome guest in many households across the world.\n`;\n\nconst customPanelStyle = {\n  background: '#f7f7f7',\n  borderRadius: 4,\n  marginBottom: 24,\n  border: 0,\n};\n\nexport default function DemoComponent_collapse_custom() {\nreturn(\n  <Collapse bordered={false} defaultActiveKey={['1']}>\n    <Panel header=\"This is panel header 1\" key=\"1\" style={customPanelStyle}>\n      <p>{text}</p>\n    </Panel>\n    <Panel header=\"This is panel header 2\" key=\"2\" style={customPanelStyle}>\n      <p>{text}</p>\n    </Panel>\n    <Panel header=\"This is panel header 3\" key=\"3\" style={customPanelStyle}>\n      <p>{text}</p>\n    </Panel>\n  </Collapse>\n);\n};\n\nexport const demo = <DemoComponent_collapse_custom key=\"DemoComponent_collapse_custom\" />;\n"],"cssCodes":[]},{"name":"mix","content":"---\norder: 2\ntitle:\n  zh-CN: 面板嵌套\n  en-US: Nested panel\n---\n\n## zh-CN\n\n嵌套折叠面板。\n\n## en-US\n\n`Collapse` is nested inside the `Collapse`.\n\n````jsx\nimport { Collapse } from 'antd';\nconst Panel = Collapse.Panel;\n\nfunction callback(key) {\n  console.log(key);\n}\n\nconst text = `\n  A dog is a type of domesticated animal.\n  Known for its loyalty and faithfulness,\n  it can be found as a welcome guest in many households across the world.\n`;\n\nReactDOM.render(\n  <Collapse onChange={callback}>\n    <Panel header={'This is panel header 1'} key=\"1\">\n      <Collapse defaultActiveKey=\"1\">\n        <Panel header={'This is panel nest panel'} key=\"1\">\n          <p>{text}</p>\n        </Panel>\n      </Collapse>\n    </Panel>\n    <Panel header={'This is panel header 2'} key=\"2\">\n      <p>{text}</p>\n    </Panel>\n    <Panel header={'This is panel header 3'} key=\"3\">\n      <p>{text}</p>\n    </Panel>\n  </Collapse>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Collapse } from 'antd';\nconst Panel = Collapse.Panel;\n\nfunction callback(key) {\n  console.log(key);\n}\n\nconst text = `\n  A dog is a type of domesticated animal.\n  Known for its loyalty and faithfulness,\n  it can be found as a welcome guest in many households across the world.\n`;\n\nexport default function DemoComponent_collapse_mix() {\nreturn(\n  <Collapse onChange={callback}>\n    <Panel header={'This is panel header 1'} key=\"1\">\n      <Collapse defaultActiveKey=\"1\">\n        <Panel header={'This is panel nest panel'} key=\"1\">\n          <p>{text}</p>\n        </Panel>\n      </Collapse>\n    </Panel>\n    <Panel header={'This is panel header 2'} key=\"2\">\n      <p>{text}</p>\n    </Panel>\n    <Panel header={'This is panel header 3'} key=\"3\">\n      <p>{text}</p>\n    </Panel>\n  </Collapse>\n);\n};\n\nexport const demo = <DemoComponent_collapse_mix key=\"DemoComponent_collapse_mix\" />;\n"],"cssCodes":[]}]},{"name":"date_picker","demos":[{"name":"basic","content":"---\norder: 0\ntitle:\n  zh-CN: 基本\n  en-US: Basic\n---\n\n## zh-CN\n\n最简单的用法，在浮层中可以选择或者输入日期。\n\n## en-US\n\nBasic use case. Users can select or input a date in panel.\n\n````jsx\nimport { DatePicker } from 'antd';\nconst { MonthPicker, RangePicker } = DatePicker;\n\nfunction onChange(date, dateString) {\n  console.log(date, dateString);\n}\n\nReactDOM.render(\n  <div>\n    <DatePicker onChange={onChange} />\n    <br />\n    <MonthPicker onChange={onChange} placeholder=\"Select month\" />\n    <br />\n    <RangePicker onChange={onChange} />\n  </div>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { DatePicker } from 'antd';\nconst { MonthPicker, RangePicker } = DatePicker;\n\nfunction onChange(date, dateString) {\n  console.log(date, dateString);\n}\n\nexport default function DemoComponent_date_picker_basic() {\nreturn(\n  <div>\n    <DatePicker onChange={onChange} />\n    <br />\n    <MonthPicker onChange={onChange} placeholder=\"Select month\" />\n    <br />\n    <RangePicker onChange={onChange} />\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_date_picker_basic key=\"DemoComponent_date_picker_basic\" />;\n"],"cssCodes":[]},{"name":"disabled_date","content":"---\norder: 6\ntitle:\n  zh-CN: 不可选择日期和时间\n  en-US: Disabled Date & Time\n---\n\n## zh-CN\n\n可用 `disabledDate` 和 `disabledTime` 分别禁止选择部分日期和时间，其中 `disabledTime` 需要和 `showTime` 一起使用。\n\n## en-US\n\nDisabled part of dates and time by `disabledDate` and `disabledTime` respectively, and `disabledTime` only works with `showTime`.\n\n````jsx\nimport moment from 'moment';\nimport { DatePicker } from 'antd';\nconst { MonthPicker, RangePicker } = DatePicker;\n\nfunction range(start, end) {\n  const result = [];\n  for (let i = start; i < end; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\nfunction disabledDate(current) {\n  // Can not select days before today and today\n  return current && current.valueOf() < Date.now();\n}\n\nfunction disabledDateTime() {\n  return {\n    disabledHours: () => range(0, 24).splice(4, 20),\n    disabledMinutes: () => range(30, 60),\n    disabledSeconds: () => [55, 56],\n  };\n}\n\nfunction disabledRangeTime(_, type) {\n  if (type === 'start') {\n    return {\n      disabledHours: () => range(0, 60).splice(4, 20),\n      disabledMinutes: () => range(30, 60),\n      disabledSeconds: () => [55, 56],\n    };\n  }\n  return {\n    disabledHours: () => range(0, 60).splice(20, 4),\n    disabledMinutes: () => range(0, 31),\n    disabledSeconds: () => [55, 56],\n  };\n}\n\nReactDOM.render(\n  <div>\n    <DatePicker\n      format=\"YYYY-MM-DD HH:mm:ss\"\n      disabledDate={disabledDate}\n      disabledTime={disabledDateTime}\n      showTime={{ defaultValue: moment('00:00:00', 'HH:mm:ss') }}\n    />\n    <br />\n    <MonthPicker disabledDate={disabledDate} placeholder=\"Select month\" />\n    <br />\n    <RangePicker\n      disabledDate={disabledDate}\n      disabledTime={disabledRangeTime}\n      showTime={{\n        hideDisabledOptions: true,\n        defaultValue: [moment('00:00:00', 'HH:mm:ss'), moment('11:59:59', 'HH:mm:ss')],\n      }}\n      format=\"YYYY-MM-DD HH:mm:ss\"\n    />\n  </div>,\n  mountNode\n);\n````\n","jsCodes":["import React from 'react';\nimport moment from 'moment';\nimport { DatePicker } from 'antd';\nconst { MonthPicker, RangePicker } = DatePicker;\n\nfunction range(start, end) {\n  const result = [];\n  for (let i = start; i < end; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\nfunction disabledDate(current) {\n  // Can not select days before today and today\n  return current && current.valueOf() < Date.now();\n}\n\nfunction disabledDateTime() {\n  return {\n    disabledHours: () => range(0, 24).splice(4, 20),\n    disabledMinutes: () => range(30, 60),\n    disabledSeconds: () => [55, 56],\n  };\n}\n\nfunction disabledRangeTime(_, type) {\n  if (type === 'start') {\n    return {\n      disabledHours: () => range(0, 60).splice(4, 20),\n      disabledMinutes: () => range(30, 60),\n      disabledSeconds: () => [55, 56],\n    };\n  }\n  return {\n    disabledHours: () => range(0, 60).splice(20, 4),\n    disabledMinutes: () => range(0, 31),\n    disabledSeconds: () => [55, 56],\n  };\n}\n\nexport default function DemoComponent_date_picker_disabled_date() {\nreturn(\n  <div>\n    <DatePicker\n      format=\"YYYY-MM-DD HH:mm:ss\"\n      disabledDate={disabledDate}\n      disabledTime={disabledDateTime}\n      showTime={{ defaultValue: moment('00:00:00', 'HH:mm:ss') }}\n    />\n    <br />\n    <MonthPicker disabledDate={disabledDate} placeholder=\"Select month\" />\n    <br />\n    <RangePicker\n      disabledDate={disabledDate}\n      disabledTime={disabledRangeTime}\n      showTime={{\n        hideDisabledOptions: true,\n        defaultValue: [moment('00:00:00', 'HH:mm:ss'), moment('11:59:59', 'HH:mm:ss')],\n      }}\n      format=\"YYYY-MM-DD HH:mm:ss\"\n    />\n  </div>);\n};\n\nexport const demo = <DemoComponent_date_picker_disabled_date key=\"DemoComponent_date_picker_disabled_date\" />;\n"],"cssCodes":[]},{"name":"disabled","content":"---\norder: 4\ntitle:\n  zh-CN: 禁用\n  en-US: Disabled\n---\n\n## zh-CN\n\n选择框的不可用状态。\n\n## en-US\n\nA disabled state of the `DatePicker`.\n\n````jsx\nimport { DatePicker } from 'antd';\nimport moment from 'moment';\nconst { MonthPicker, RangePicker } = DatePicker;\n\nconst dateFormat = 'YYYY-MM-DD';\nReactDOM.render(\n  <div>\n    <DatePicker defaultValue={moment('2015-06-06', dateFormat)} disabled />\n    <br />\n    <MonthPicker defaultValue={moment('2015-06', 'YYYY-MM')} disabled />\n    <br />\n    <RangePicker\n      defaultValue={[moment('2015-06-06', dateFormat), moment('2015-06-06', dateFormat)]}\n      disabled\n    />\n  </div>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { DatePicker } from 'antd';\nimport moment from 'moment';\nconst { MonthPicker, RangePicker } = DatePicker;\n\nconst dateFormat = 'YYYY-MM-DD';\nexport default function DemoComponent_date_picker_disabled() {\nreturn(\n  <div>\n    <DatePicker defaultValue={moment('2015-06-06', dateFormat)} disabled />\n    <br />\n    <MonthPicker defaultValue={moment('2015-06', 'YYYY-MM')} disabled />\n    <br />\n    <RangePicker\n      defaultValue={[moment('2015-06-06', dateFormat), moment('2015-06-06', dateFormat)]}\n      disabled\n    />\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_date_picker_disabled key=\"DemoComponent_date_picker_disabled\" />;\n"],"cssCodes":[]},{"name":"extra_footer","content":"---\norder: 10\ntitle:\n  zh-CN: 额外的页脚\n  en-US: Extra Footer\n---\n\n## zh-CN\n\n在浮层中加入额外的页脚，以满足某些定制信息的需求。\n\n## en-US\n\nRender extra footer in panel for customized requirements.\n\n````jsx\nimport { DatePicker } from 'antd';\nconst { RangePicker } = DatePicker;\n\nReactDOM.render(\n  <div>\n    <DatePicker renderExtraFooter={() => 'extra footer'} />\n    <DatePicker renderExtraFooter={() => 'extra footer'} showTime />\n    <RangePicker renderExtraFooter={() => 'extra footer'} />\n    <RangePicker renderExtraFooter={() => 'extra footer'} showTime />\n  </div>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { DatePicker } from 'antd';\nconst { RangePicker } = DatePicker;\n\nexport default function DemoComponent_date_picker_extra_footer() {\nreturn(\n  <div>\n    <DatePicker renderExtraFooter={() => 'extra footer'} />\n    <DatePicker renderExtraFooter={() => 'extra footer'} showTime />\n    <RangePicker renderExtraFooter={() => 'extra footer'} />\n    <RangePicker renderExtraFooter={() => 'extra footer'} showTime />\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_date_picker_extra_footer key=\"DemoComponent_date_picker_extra_footer\" />;\n"],"cssCodes":[]},{"name":"format","content":"---\norder: 1\ntitle:\n  zh-CN: 日期格式\n  en-US: Date Format\n---\n\n## zh-CN\n\n使用 `format` 属性，可以自定义日期显示格式。\n\n## en-US\n\nWe can set the date format by `format`.\n\n````jsx\nimport { DatePicker } from 'antd';\nimport moment from 'moment';\nconst { MonthPicker, RangePicker } = DatePicker;\n\nconst dateFormat = 'YYYY/MM/DD';\nconst monthFormat = 'YYYY/MM';\nReactDOM.render(\n  <div>\n    <DatePicker defaultValue={moment('2015/01/01', dateFormat)} format={dateFormat} />\n    <br />\n    <MonthPicker defaultValue={moment('2015/01', monthFormat)} format={monthFormat} />\n    <br />\n    <RangePicker\n      defaultValue={[moment('2015/01/01', dateFormat), moment('2015/01/01', dateFormat)]}\n      format={dateFormat}\n    />\n  </div>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { DatePicker } from 'antd';\nimport moment from 'moment';\nconst { MonthPicker, RangePicker } = DatePicker;\n\nconst dateFormat = 'YYYY/MM/DD';\nconst monthFormat = 'YYYY/MM';\nexport default function DemoComponent_date_picker_format() {\nreturn(\n  <div>\n    <DatePicker defaultValue={moment('2015/01/01', dateFormat)} format={dateFormat} />\n    <br />\n    <MonthPicker defaultValue={moment('2015/01', monthFormat)} format={monthFormat} />\n    <br />\n    <RangePicker\n      defaultValue={[moment('2015/01/01', dateFormat), moment('2015/01/01', dateFormat)]}\n      format={dateFormat}\n    />\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_date_picker_format key=\"DemoComponent_date_picker_format\" />;\n"],"cssCodes":[]},{"name":"presetted_ranges","content":"---\norder: 8\ntitle:\n  zh-CN: 预设范围\n  en-US: Presetted Ranges\n---\n\n## zh-CN\n\nRangePicker 可以设置常用的 预设范围 提高用户体验。\n\n## en-US\n\nWe can set presetted ranges to RangePicker to improve user experience.\n\n````jsx\nimport { DatePicker } from 'antd';\nimport moment from 'moment';\nconst RangePicker = DatePicker.RangePicker;\n\nfunction onChange(dates, dateStrings) {\n  console.log('From: ', dates[0], ', to: ', dates[1]);\n  console.log('From: ', dateStrings[0], ', to: ', dateStrings[1]);\n}\n\nReactDOM.render(\n  <div>\n    <RangePicker\n      ranges={{ Today: [moment(), moment()], 'This Month': [moment(), moment().endOf('month')] }}\n      onChange={onChange}\n    />\n    <br />\n    <RangePicker\n      ranges={{ Today: [moment(), moment()], 'This Month': [moment(), moment().endOf('month')] }}\n      showTime\n      format=\"YYYY/MM/DD HH:mm:ss\"\n      onChange={onChange}\n    />\n  </div>,\n  mountNode\n);\n````\n","jsCodes":["import React from 'react';\nimport { DatePicker } from 'antd';\nimport moment from 'moment';\nconst RangePicker = DatePicker.RangePicker;\n\nfunction onChange(dates, dateStrings) {\n  console.log('From: ', dates[0], ', to: ', dates[1]);\n  console.log('From: ', dateStrings[0], ', to: ', dateStrings[1]);\n}\n\nexport default function DemoComponent_date_picker_presetted_ranges() {\nreturn(\n  <div>\n    <RangePicker\n      ranges={{ Today: [moment(), moment()], 'This Month': [moment(), moment().endOf('month')] }}\n      onChange={onChange}\n    />\n    <br />\n    <RangePicker\n      ranges={{ Today: [moment(), moment()], 'This Month': [moment(), moment().endOf('month')] }}\n      showTime\n      format=\"YYYY/MM/DD HH:mm:ss\"\n      onChange={onChange}\n    />\n  </div>);\n};\n\nexport const demo = <DemoComponent_date_picker_presetted_ranges key=\"DemoComponent_date_picker_presetted_ranges\" />;\n"],"cssCodes":[]},{"name":"size","content":"---\norder: 2\ntitle:\n  zh-CN: 三种大小\n  en-US: Three Sizes\n---\n\n## zh-CN\n\n三种大小的输入框，若不设置，则为 `default`。\n\n## en-US\n\nThe input box comes in three sizes. `default` will be used if `size` is omitted.\n\n\n````jsx\nimport { DatePicker, Radio } from 'antd';\nconst { MonthPicker, RangePicker } = DatePicker;\n\nclass PickerSizesDemo extends React.Component {\n  state = {\n    size: 'default',\n  };\n\n  handleSizeChange = (e) => {\n    this.setState({ size: e.target.value });\n  }\n\n  render() {\n    const { size } = this.state;\n    return (\n      <div>\n        <Radio.Group value={size} onChange={this.handleSizeChange}>\n          <Radio.Button value=\"large\">Large</Radio.Button>\n          <Radio.Button value=\"default\">Default</Radio.Button>\n          <Radio.Button value=\"small\">Small</Radio.Button>\n        </Radio.Group>\n        <br /><br />\n        <DatePicker size={size} />\n        <br />\n        <MonthPicker size={size} />\n        <br />\n        <RangePicker size={size} />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<PickerSizesDemo />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { DatePicker, Radio } from 'antd';\nconst { MonthPicker, RangePicker } = DatePicker;\n\nclass PickerSizesDemo extends React.Component {\n  state = {\n    size: 'default',\n  };\n\n  handleSizeChange = (e) => {\n    this.setState({ size: e.target.value });\n  }\n\n  render() {\n    const { size } = this.state;\n    return (\n      <div>\n        <Radio.Group value={size} onChange={this.handleSizeChange}>\n          <Radio.Button value=\"large\">Large</Radio.Button>\n          <Radio.Button value=\"default\">Default</Radio.Button>\n          <Radio.Button value=\"small\">Small</Radio.Button>\n        </Radio.Group>\n        <br /><br />\n        <DatePicker size={size} />\n        <br />\n        <MonthPicker size={size} />\n        <br />\n        <RangePicker size={size} />\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_date_picker_size() {\nreturn(<PickerSizesDemo />);\n};\n\nexport const demo = <DemoComponent_date_picker_size key=\"DemoComponent_date_picker_size\" />;\n"],"cssCodes":[]},{"name":"start_end","content":"---\norder: 6\ntitle:\n  zh-CN: 自定义日期范围选择\n  en-US: Customized Range Picker\n---\n\n## zh-CN\n\n当 `RangePicker` 无法满足业务需求时，可以使用两个 `DatePicker` 实现类似的功能。\n> * 通过设置 `disabledDate` 方法，来约束开始和结束日期。\n> * 通过 `open` `onOpenChange` 来优化交互。\n\n## en-US\n\nWhen `RangePicker` is not satisfied your requirements, try to implement similar functionality with two `DatePicker`.\n> * Use the `disabledDate` property to limit the start and end dates.\n> * Imporve user experience with `open` `onOpenChange`.\n\n````jsx\nimport { DatePicker } from 'antd';\n\nclass DateRange extends React.Component {\n  state = {\n    startValue: null,\n    endValue: null,\n    endOpen: false,\n  };\n\n  disabledStartDate = (startValue) => {\n    const endValue = this.state.endValue;\n    if (!startValue || !endValue) {\n      return false;\n    }\n    return startValue.valueOf() > endValue.valueOf();\n  }\n\n  disabledEndDate = (endValue) => {\n    const startValue = this.state.startValue;\n    if (!endValue || !startValue) {\n      return false;\n    }\n    return endValue.valueOf() <= startValue.valueOf();\n  }\n\n  onChange = (field, value) => {\n    this.setState({\n      [field]: value,\n    });\n  }\n\n  onStartChange = (value) => {\n    this.onChange('startValue', value);\n  }\n\n  onEndChange = (value) => {\n    this.onChange('endValue', value);\n  }\n\n  handleStartOpenChange = (open) => {\n    if (!open) {\n      this.setState({ endOpen: true });\n    }\n  }\n\n  handleEndOpenChange = (open) => {\n    this.setState({ endOpen: open });\n  }\n\n  render() {\n    const { startValue, endValue, endOpen } = this.state;\n    return (\n      <div>\n        <DatePicker\n          disabledDate={this.disabledStartDate}\n          showTime\n          format=\"YYYY-MM-DD HH:mm:ss\"\n          value={startValue}\n          placeholder=\"Start\"\n          onChange={this.onStartChange}\n          onOpenChange={this.handleStartOpenChange}\n        />\n        <DatePicker\n          disabledDate={this.disabledEndDate}\n          showTime\n          format=\"YYYY-MM-DD HH:mm:ss\"\n          value={endValue}\n          placeholder=\"End\"\n          onChange={this.onEndChange}\n          open={endOpen}\n          onOpenChange={this.handleEndOpenChange}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<DateRange />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { DatePicker } from 'antd';\n\nclass DateRange extends React.Component {\n  state = {\n    startValue: null,\n    endValue: null,\n    endOpen: false,\n  };\n\n  disabledStartDate = (startValue) => {\n    const endValue = this.state.endValue;\n    if (!startValue || !endValue) {\n      return false;\n    }\n    return startValue.valueOf() > endValue.valueOf();\n  }\n\n  disabledEndDate = (endValue) => {\n    const startValue = this.state.startValue;\n    if (!endValue || !startValue) {\n      return false;\n    }\n    return endValue.valueOf() <= startValue.valueOf();\n  }\n\n  onChange = (field, value) => {\n    this.setState({\n      [field]: value,\n    });\n  }\n\n  onStartChange = (value) => {\n    this.onChange('startValue', value);\n  }\n\n  onEndChange = (value) => {\n    this.onChange('endValue', value);\n  }\n\n  handleStartOpenChange = (open) => {\n    if (!open) {\n      this.setState({ endOpen: true });\n    }\n  }\n\n  handleEndOpenChange = (open) => {\n    this.setState({ endOpen: open });\n  }\n\n  render() {\n    const { startValue, endValue, endOpen } = this.state;\n    return (\n      <div>\n        <DatePicker\n          disabledDate={this.disabledStartDate}\n          showTime\n          format=\"YYYY-MM-DD HH:mm:ss\"\n          value={startValue}\n          placeholder=\"Start\"\n          onChange={this.onStartChange}\n          onOpenChange={this.handleStartOpenChange}\n        />\n        <DatePicker\n          disabledDate={this.disabledEndDate}\n          showTime\n          format=\"YYYY-MM-DD HH:mm:ss\"\n          value={endValue}\n          placeholder=\"End\"\n          onChange={this.onEndChange}\n          open={endOpen}\n          onOpenChange={this.handleEndOpenChange}\n        />\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_date_picker_start_end() {\nreturn(<DateRange />);\n};\n\nexport const demo = <DemoComponent_date_picker_start_end key=\"DemoComponent_date_picker_start_end\" />;\n"],"cssCodes":[]},{"name":"time","content":"---\norder: 3\ntitle:\n  zh-CN: 日期时间选择\n  en-US: Choose Time\n---\n\n## zh-CN\n\n增加选择时间功能，当 `showTime` 为一个对象时，其属性会传递给内建的 `TimePicker`。\n\n## en-US\n\nThis property provide an additional time selection. When `showTime` is an Object, its properties will be passed on to built-in `TimePicker`.\n\n````jsx\nimport { DatePicker } from 'antd';\nconst { RangePicker } = DatePicker;\n\nfunction onChange(value, dateString) {\n  console.log('Selected Time: ', value);\n  console.log('Formatted Selected Time: ', dateString);\n}\n\nfunction onOk(value) {\n  console.log('onOk: ', value);\n}\n\nReactDOM.render(\n  <div>\n    <DatePicker\n      showTime\n      format=\"YYYY-MM-DD HH:mm:ss\"\n      placeholder=\"Select Time\"\n      onChange={onChange}\n      onOk={onOk}\n    />\n    <br />\n    <RangePicker\n      showTime={{ format: 'HH:mm' }}\n      format=\"YYYY-MM-DD HH:mm\"\n      placeholder={['Start Time', 'End Time']}\n      onChange={onChange}\n      onOk={onOk}\n    />\n  </div>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { DatePicker } from 'antd';\nconst { RangePicker } = DatePicker;\n\nfunction onChange(value, dateString) {\n  console.log('Selected Time: ', value);\n  console.log('Formatted Selected Time: ', dateString);\n}\n\nfunction onOk(value) {\n  console.log('onOk: ', value);\n}\n\nexport default function DemoComponent_date_picker_time() {\nreturn(\n  <div>\n    <DatePicker\n      showTime\n      format=\"YYYY-MM-DD HH:mm:ss\"\n      placeholder=\"Select Time\"\n      onChange={onChange}\n      onOk={onOk}\n    />\n    <br />\n    <RangePicker\n      showTime={{ format: 'HH:mm' }}\n      format=\"YYYY-MM-DD HH:mm\"\n      placeholder={['Start Time', 'End Time']}\n      onChange={onChange}\n      onOk={onOk}\n    />\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_date_picker_time key=\"DemoComponent_date_picker_time\" />;\n"],"cssCodes":[]}]},{"name":"dropdown","demos":[{"name":"basic","content":"---\norder: 0\ntitle:\n  zh-CN: 基本\n  en-US: Basic\n---\n\n## zh-CN\n\n最简单的下拉菜单。\n\n## en-US\n\nThe most basic dropdown menu.\n\n````jsx\nimport { Menu, Dropdown, Icon } from 'antd';\n\nconst menu = (\n  <Menu>\n    <Menu.Item>\n      <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">1st menu item</a>\n    </Menu.Item>\n    <Menu.Item>\n      <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">2nd menu item</a>\n    </Menu.Item>\n    <Menu.Item>\n      <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.tmall.com/\">3d menu item</a>\n    </Menu.Item>\n  </Menu>\n);\n\nReactDOM.render(\n  <Dropdown overlay={menu}>\n    <a className=\"ant-dropdown-link\" href=\"#\">\n      Hover me <Icon type=\"down\" />\n    </a>\n  </Dropdown>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Menu, Dropdown, Icon } from 'antd';\n\nconst menu = (\n  <Menu>\n    <Menu.Item>\n      <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">1st menu item</a>\n    </Menu.Item>\n    <Menu.Item>\n      <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">2nd menu item</a>\n    </Menu.Item>\n    <Menu.Item>\n      <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.tmall.com/\">3d menu item</a>\n    </Menu.Item>\n  </Menu>\n);\n\nexport default function DemoComponent_dropdown_basic() {\nreturn(\n  <Dropdown overlay={menu}>\n    <a className=\"ant-dropdown-link\" href=\"#\">\n      Hover me <Icon type=\"down\" />\n    </a>\n  </Dropdown>\n);\n};\n\nexport const demo = <DemoComponent_dropdown_basic key=\"DemoComponent_dropdown_basic\" />;\n"],"cssCodes":[]},{"name":"dropdown_button","content":"---\norder: 5\ntitle:\n  zh-CN: 带下拉框的按钮\n  en-US: Button with dropdown menu\n---\n\n## zh-CN\n\n左边是按钮，右边是额外的相关功能菜单。\n\n## en-US\n\nA button is on the left, and a related functional menu is on the right.\n\n````jsx\nimport { Menu, Dropdown, Button, Icon, message } from 'antd';\n\nfunction handleButtonClick(e) {\n  message.info('Click on left button.');\n  console.log('click left button', e);\n}\n\nfunction handleMenuClick(e) {\n  message.info('Click on menu item.');\n  console.log('click', e);\n}\n\nconst menu = (\n  <Menu onClick={handleMenuClick}>\n    <Menu.Item key=\"1\">1st menu item</Menu.Item>\n    <Menu.Item key=\"2\">2nd menu item</Menu.Item>\n    <Menu.Item key=\"3\">3d menu item</Menu.Item>\n  </Menu>\n);\n\nReactDOM.render(\n  <div>\n    <Dropdown.Button onClick={handleButtonClick} overlay={menu}>\n      Dropdown\n    </Dropdown.Button>\n    <Dropdown.Button\n      onClick={handleButtonClick}\n      overlay={menu}\n      disabled\n      style={{ marginLeft: 8 }}\n    >\n      Dropdown\n    </Dropdown.Button>\n    <Dropdown overlay={menu}>\n      <Button style={{ marginLeft: 8 }}>\n        Button <Icon type=\"down\" />\n      </Button>\n    </Dropdown>\n  </div>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Menu, Dropdown, Button, Icon, message } from 'antd';\n\nfunction handleButtonClick(e) {\n  message.info('Click on left button.');\n  console.log('click left button', e);\n}\n\nfunction handleMenuClick(e) {\n  message.info('Click on menu item.');\n  console.log('click', e);\n}\n\nconst menu = (\n  <Menu onClick={handleMenuClick}>\n    <Menu.Item key=\"1\">1st menu item</Menu.Item>\n    <Menu.Item key=\"2\">2nd menu item</Menu.Item>\n    <Menu.Item key=\"3\">3d menu item</Menu.Item>\n  </Menu>\n);\n\nexport default function DemoComponent_dropdown_dropdown_button() {\nreturn(\n  <div>\n    <Dropdown.Button onClick={handleButtonClick} overlay={menu}>\n      Dropdown\n    </Dropdown.Button>\n    <Dropdown.Button\n      onClick={handleButtonClick}\n      overlay={menu}\n      disabled\n      style={{ marginLeft: 8 }}\n    >\n      Dropdown\n    </Dropdown.Button>\n    <Dropdown overlay={menu}>\n      <Button style={{ marginLeft: 8 }}>\n        Button <Icon type=\"down\" />\n      </Button>\n    </Dropdown>\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_dropdown_dropdown_button key=\"DemoComponent_dropdown_dropdown_button\" />;\n"],"cssCodes":[]},{"name":"event","content":"---\norder: 4\ntitle:\n  zh-CN: 触发事件\n  en-US: Click event\n---\n\n## zh-CN\n\n点击菜单项后会触发事件，用户可以通过相应的菜单项 key 进行不同的操作。\n\n## en-US\n\nAn event will be triggered when you click menu items, in which you can make different operations according to item's key.\n\n````jsx\nimport { Menu, Dropdown, Icon, message } from 'antd';\nconst onClick = function ({ key }) {\n  message.info(`Click on item ${key}`);\n};\n\nconst menu = (\n  <Menu onClick={onClick}>\n    <Menu.Item key=\"1\">1st menu item</Menu.Item>\n    <Menu.Item key=\"2\">2nd memu item</Menu.Item>\n    <Menu.Item key=\"3\">3d menu item</Menu.Item>\n  </Menu>\n);\n\nReactDOM.render(\n  <Dropdown overlay={menu}>\n    <a className=\"ant-dropdown-link\" href=\"#\">\n      Hover me, Click menu item <Icon type=\"down\" />\n    </a>\n  </Dropdown>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Menu, Dropdown, Icon, message } from 'antd';\nconst onClick = function ({ key }) {\n  message.info(`Click on item ${key}`);\n};\n\nconst menu = (\n  <Menu onClick={onClick}>\n    <Menu.Item key=\"1\">1st menu item</Menu.Item>\n    <Menu.Item key=\"2\">2nd memu item</Menu.Item>\n    <Menu.Item key=\"3\">3d menu item</Menu.Item>\n  </Menu>\n);\n\nexport default function DemoComponent_dropdown_event() {\nreturn(\n  <Dropdown overlay={menu}>\n    <a className=\"ant-dropdown-link\" href=\"#\">\n      Hover me, Click menu item <Icon type=\"down\" />\n    </a>\n  </Dropdown>\n);\n};\n\nexport const demo = <DemoComponent_dropdown_event key=\"DemoComponent_dropdown_event\" />;\n"],"cssCodes":[]},{"name":"item","content":"---\norder: 2\ntitle:\n  zh-CN: 其他元素\n  en-US: Other elements\n---\n\n## zh-CN\n\n分割线和不可用菜单项。\n\n## en-US\n\nDivider and disabled menu item.\n\n````jsx\nimport { Menu, Dropdown, Icon } from 'antd';\n\nconst menu = (\n  <Menu>\n    <Menu.Item key=\"0\">\n      <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">1st menu item</a>\n    </Menu.Item>\n    <Menu.Item key=\"1\">\n      <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">2nd menu item</a>\n    </Menu.Item>\n    <Menu.Divider />\n    <Menu.Item key=\"3\" disabled>3d menu item（disabled）</Menu.Item>\n  </Menu>\n);\n\nReactDOM.render(\n  <Dropdown overlay={menu}>\n    <a className=\"ant-dropdown-link\" href=\"#\">\n      Hover me <Icon type=\"down\" />\n    </a>\n  </Dropdown>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Menu, Dropdown, Icon } from 'antd';\n\nconst menu = (\n  <Menu>\n    <Menu.Item key=\"0\">\n      <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">1st menu item</a>\n    </Menu.Item>\n    <Menu.Item key=\"1\">\n      <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">2nd menu item</a>\n    </Menu.Item>\n    <Menu.Divider />\n    <Menu.Item key=\"3\" disabled>3d menu item（disabled）</Menu.Item>\n  </Menu>\n);\n\nexport default function DemoComponent_dropdown_item() {\nreturn(\n  <Dropdown overlay={menu}>\n    <a className=\"ant-dropdown-link\" href=\"#\">\n      Hover me <Icon type=\"down\" />\n    </a>\n  </Dropdown>\n);\n};\n\nexport const demo = <DemoComponent_dropdown_item key=\"DemoComponent_dropdown_item\" />;\n"],"cssCodes":[]},{"name":"overlay_visible","content":"---\norder: 7\ntitle:\n  zh-CN: 菜单隐藏方式\n  en-US: The way of hiding menu.\n---\n\n## zh-CN\n\n默认是点击关闭菜单，可以关闭此功能。\n\n## en-US\n\nThe default is to close the menu when you click on menu items, this feature can be turned off.\n\n````jsx\nimport { Menu, Dropdown, Icon } from 'antd';\n\nclass OverlayVisible extends React.Component {\n  state = {\n    visible: false,\n  };\n  handleMenuClick = (e) => {\n    if (e.key === '3') {\n      this.setState({ visible: false });\n    }\n  }\n  handleVisibleChange = (flag) => {\n    this.setState({ visible: flag });\n  }\n  render() {\n    const menu = (\n      <Menu onClick={this.handleMenuClick}>\n        <Menu.Item key=\"1\">Clicking me will not close the menu.</Menu.Item>\n        <Menu.Item key=\"2\">Clicking me will not close the menu also.</Menu.Item>\n        <Menu.Item key=\"3\">Clicking me will close the menu</Menu.Item>\n      </Menu>\n    );\n    return (\n      <Dropdown overlay={menu}\n        onVisibleChange={this.handleVisibleChange}\n        visible={this.state.visible}\n      >\n        <a className=\"ant-dropdown-link\" href=\"#\">\n          Hover me <Icon type=\"down\" />\n        </a>\n      </Dropdown>\n    );\n  }\n}\n\nReactDOM.render(<OverlayVisible />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Menu, Dropdown, Icon } from 'antd';\n\nclass OverlayVisible extends React.Component {\n  state = {\n    visible: false,\n  };\n  handleMenuClick = (e) => {\n    if (e.key === '3') {\n      this.setState({ visible: false });\n    }\n  }\n  handleVisibleChange = (flag) => {\n    this.setState({ visible: flag });\n  }\n  render() {\n    const menu = (\n      <Menu onClick={this.handleMenuClick}>\n        <Menu.Item key=\"1\">Clicking me will not close the menu.</Menu.Item>\n        <Menu.Item key=\"2\">Clicking me will not close the menu also.</Menu.Item>\n        <Menu.Item key=\"3\">Clicking me will close the menu</Menu.Item>\n      </Menu>\n    );\n    return (\n      <Dropdown overlay={menu}\n        onVisibleChange={this.handleVisibleChange}\n        visible={this.state.visible}\n      >\n        <a className=\"ant-dropdown-link\" href=\"#\">\n          Hover me <Icon type=\"down\" />\n        </a>\n      </Dropdown>\n    );\n  }\n}\n\nexport default function DemoComponent_dropdown_overlay_visible() {\nreturn(<OverlayVisible />);\n};\n\nexport const demo = <DemoComponent_dropdown_overlay_visible key=\"DemoComponent_dropdown_overlay_visible\" />;\n"],"cssCodes":[]},{"name":"placement","content":"---\norder: 1\ntitle:\n  zh-CN: 弹出位置\n  en-US: Placement\n---\n\n## zh-CN\n\n支持 6 个弹出位置。\n\n## en-US\n\nSupport 6 placements.\n\n````jsx\nimport { Menu, Dropdown, Button } from 'antd';\n\nconst menu = (\n  <Menu>\n    <Menu.Item>\n      <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">1st menu item</a>\n    </Menu.Item>\n    <Menu.Item>\n      <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">2nd menu item</a>\n    </Menu.Item>\n    <Menu.Item>\n      <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.tmall.com/\">3d menu item</a>\n    </Menu.Item>\n  </Menu>\n);\n\nReactDOM.render(\n  <div>\n    <Dropdown overlay={menu} placement=\"bottomLeft\">\n      <Button>bottomLeft</Button>\n    </Dropdown>\n    <Dropdown overlay={menu} placement=\"bottomCenter\">\n      <Button>bottomCenter</Button>\n    </Dropdown>\n    <Dropdown overlay={menu} placement=\"bottomRight\">\n      <Button>bottomRight</Button>\n    </Dropdown>\n    <br />\n    <Dropdown overlay={menu} placement=\"topLeft\">\n      <Button>topLeft</Button>\n    </Dropdown>\n    <Dropdown overlay={menu} placement=\"topCenter\">\n      <Button>topCenter</Button>\n    </Dropdown>\n    <Dropdown overlay={menu} placement=\"topRight\">\n      <Button>topRight</Button>\n    </Dropdown>\n  </div>\n, mountNode);\n````\n\n````css\n#components-dropdown-demo-placement .ant-btn {\n  margin-right: 8px;\n  margin-bottom: 8px;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Menu, Dropdown, Button } from 'antd';\n\nconst menu = (\n  <Menu>\n    <Menu.Item>\n      <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">1st menu item</a>\n    </Menu.Item>\n    <Menu.Item>\n      <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">2nd menu item</a>\n    </Menu.Item>\n    <Menu.Item>\n      <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.tmall.com/\">3d menu item</a>\n    </Menu.Item>\n  </Menu>\n);\n\nexport default function DemoComponent_dropdown_placement() {\nreturn(\n  <div>\n    <Dropdown overlay={menu} placement=\"bottomLeft\">\n      <Button>bottomLeft</Button>\n    </Dropdown>\n    <Dropdown overlay={menu} placement=\"bottomCenter\">\n      <Button>bottomCenter</Button>\n    </Dropdown>\n    <Dropdown overlay={menu} placement=\"bottomRight\">\n      <Button>bottomRight</Button>\n    </Dropdown>\n    <br />\n    <Dropdown overlay={menu} placement=\"topLeft\">\n      <Button>topLeft</Button>\n    </Dropdown>\n    <Dropdown overlay={menu} placement=\"topCenter\">\n      <Button>topCenter</Button>\n    </Dropdown>\n    <Dropdown overlay={menu} placement=\"topRight\">\n      <Button>topRight</Button>\n    </Dropdown>\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_dropdown_placement key=\"DemoComponent_dropdown_placement\" />;\n"],"cssCodes":["#components-dropdown-demo-placement .ant-btn {\n  margin-right: 8px;\n  margin-bottom: 8px;\n}\n"]},{"name":"sub_menu","content":"---\norder: 6\ntitle:\n  zh-CN: 多级菜单\n  en-US: Cascading menu\n---\n\n## zh-CN\n\n传入的菜单里有多个层级。\n\n## en-US\n\nThe menu has multiple levels.\n\n````jsx\nimport { Menu, Dropdown, Icon } from 'antd';\nconst SubMenu = Menu.SubMenu;\n\nconst menu = (\n  <Menu>\n    <Menu.Item>1st menu item</Menu.Item>\n    <Menu.Item>2nd menu item</Menu.Item>\n    <SubMenu title=\"sub menu\">\n      <Menu.Item>3d menu item</Menu.Item>\n      <Menu.Item>4th menu item</Menu.Item>\n    </SubMenu>\n    <SubMenu title=\"disabled sub menu\" disabled>\n      <Menu.Item>5d menu item</Menu.Item>\n      <Menu.Item>6th menu item</Menu.Item>\n    </SubMenu>\n  </Menu>\n);\n\nReactDOM.render(\n  <Dropdown overlay={menu}>\n    <a className=\"ant-dropdown-link\" href=\"#\">\n      Cascading menu <Icon type=\"down\" />\n    </a>\n  </Dropdown>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Menu, Dropdown, Icon } from 'antd';\nconst SubMenu = Menu.SubMenu;\n\nconst menu = (\n  <Menu>\n    <Menu.Item>1st menu item</Menu.Item>\n    <Menu.Item>2nd menu item</Menu.Item>\n    <SubMenu title=\"sub menu\">\n      <Menu.Item>3d menu item</Menu.Item>\n      <Menu.Item>4th menu item</Menu.Item>\n    </SubMenu>\n    <SubMenu title=\"disabled sub menu\" disabled>\n      <Menu.Item>5d menu item</Menu.Item>\n      <Menu.Item>6th menu item</Menu.Item>\n    </SubMenu>\n  </Menu>\n);\n\nexport default function DemoComponent_dropdown_sub_menu() {\nreturn(\n  <Dropdown overlay={menu}>\n    <a className=\"ant-dropdown-link\" href=\"#\">\n      Cascading menu <Icon type=\"down\" />\n    </a>\n  </Dropdown>\n);\n};\n\nexport const demo = <DemoComponent_dropdown_sub_menu key=\"DemoComponent_dropdown_sub_menu\" />;\n"],"cssCodes":[]},{"name":"trigger","content":"---\norder: 3\ntitle:\n  zh-CN: 触发方式\n  en-US: Trigger mode\n---\n\n## zh-CN\n\n默认是移入触发菜单，可以点击触发。\n\n## en-US\n\nThe default trigger mode is `hover`, you can change it to `click`.\n\n````jsx\nimport { Menu, Dropdown, Icon } from 'antd';\n\nconst menu = (\n  <Menu>\n    <Menu.Item key=\"0\">\n      <a href=\"http://www.alipay.com/\">1st menu item</a>\n    </Menu.Item>\n    <Menu.Item key=\"1\">\n      <a href=\"http://www.taobao.com/\">2nd menu item</a>\n    </Menu.Item>\n    <Menu.Divider />\n    <Menu.Item key=\"3\">3d menu item</Menu.Item>\n  </Menu>\n);\n\nReactDOM.render(<div>\n  <Dropdown overlay={menu} trigger={['click']}>\n    <a className=\"ant-dropdown-link\" href=\"#\">\n      Click me <Icon type=\"down\" />\n    </a>\n  </Dropdown>\n</div>, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Menu, Dropdown, Icon } from 'antd';\n\nconst menu = (\n  <Menu>\n    <Menu.Item key=\"0\">\n      <a href=\"http://www.alipay.com/\">1st menu item</a>\n    </Menu.Item>\n    <Menu.Item key=\"1\">\n      <a href=\"http://www.taobao.com/\">2nd menu item</a>\n    </Menu.Item>\n    <Menu.Divider />\n    <Menu.Item key=\"3\">3d menu item</Menu.Item>\n  </Menu>\n);\n\nexport default function DemoComponent_dropdown_trigger() {\nreturn(<div>\n  <Dropdown overlay={menu} trigger={['click']}>\n    <a className=\"ant-dropdown-link\" href=\"#\">\n      Click me <Icon type=\"down\" />\n    </a>\n  </Dropdown>\n</div>);\n};\n\nexport const demo = <DemoComponent_dropdown_trigger key=\"DemoComponent_dropdown_trigger\" />;\n"],"cssCodes":[]}]},{"name":"form","demos":[{"name":"advanced_search","content":"---\norder: 3\ntitle:\n  zh-CN: 高级搜索\n  en-US: Advanced search\n---\n\n## zh-CN\n\n三列栅格式的表单排列方式，常用于数据表格的高级搜索。\n\n有部分定制的样式代码，由于输入标签长度不确定，需要根据具体情况自行调整。\n\n## en-US\n\nThree columns layout is often used for advanced searching of data table.\n\nBecause the width of label is not fixed, you may need to adjust it by customizing its style.\n\n\n````jsx\nimport { Form, Row, Col, Input, Button, Icon } from 'antd';\nconst FormItem = Form.Item;\n\nclass AdvancedSearchForm extends React.Component {\n  state = {\n    expand: false,\n  };\n\n  handleSearch = (e) => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      console.log('Received values of form: ', values);\n    });\n  }\n\n  handleReset = () => {\n    this.props.form.resetFields();\n  }\n\n  toggle = () => {\n    const { expand } = this.state;\n    this.setState({ expand: !expand });\n  }\n\n  // To generate mock Form.Item\n  getFields() {\n    const count = this.state.expand ? 10 : 6;\n    const { getFieldDecorator } = this.props.form;\n    const formItemLayout = {\n      labelCol: { span: 5 },\n      wrapperCol: { span: 19 },\n    };\n    const children = [];\n    for (let i = 0; i < 10; i++) {\n      children.push(\n        <Col span={8} key={i} style={{ display: i < count ? 'block' : 'none' }}>\n          <FormItem {...formItemLayout} label={`Field ${i}`}>\n            {getFieldDecorator(`field-${i}`)(\n              <Input placeholder=\"placeholder\" />\n            )}\n          </FormItem>\n        </Col>\n      );\n    }\n    return children;\n  }\n\n  render() {\n    return (\n      <Form\n        className=\"ant-advanced-search-form\"\n        onSubmit={this.handleSearch}\n      >\n        <Row gutter={40}>{this.getFields()}</Row>\n        <Row>\n          <Col span={24} style={{ textAlign: 'right' }}>\n            <Button type=\"primary\" htmlType=\"submit\">Search</Button>\n            <Button style={{ marginLeft: 8 }} onClick={this.handleReset}>\n              Clear\n            </Button>\n            <a style={{ marginLeft: 8, fontSize: 12 }} onClick={this.toggle}>\n              Collapse <Icon type={this.state.expand ? 'up' : 'down'} />\n            </a>\n          </Col>\n        </Row>\n      </Form>\n    );\n  }\n}\n\nconst WrappedAdvancedSearchForm = Form.create()(AdvancedSearchForm);\nReactDOM.render(\n  <div>\n    <WrappedAdvancedSearchForm />\n    <div className=\"search-result-list\">Search Result List</div>\n  </div>,\n  mountNode\n);\n````\n\n````css\n#components-form-demo-advanced-search .ant-advanced-search-form {\n  padding: 24px;\n  background: #fbfbfb;\n  border: 1px solid #d9d9d9;\n  border-radius: 6px;\n}\n````\n\n<style>\n#components-form-demo-advanced-search .ant-form {\n  max-width: none;\n}\n#components-form-demo-advanced-search .search-result-list {\n  margin-top: 16px;\n  border: 1px dashed #e9e9e9;\n  border-radius: 6px;\n  background-color: #fafafa;\n  min-height: 200px;\n  text-align: center;\n  padding-top: 80px;\n}\n</style>\n","jsCodes":["import React from 'react';\nimport { Form, Row, Col, Input, Button, Icon } from 'antd';\nconst FormItem = Form.Item;\n\nclass AdvancedSearchForm extends React.Component {\n  state = {\n    expand: false,\n  };\n\n  handleSearch = (e) => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      console.log('Received values of form: ', values);\n    });\n  }\n\n  handleReset = () => {\n    this.props.form.resetFields();\n  }\n\n  toggle = () => {\n    const { expand } = this.state;\n    this.setState({ expand: !expand });\n  }\n\n  // To generate mock Form.Item\n  getFields() {\n    const count = this.state.expand ? 10 : 6;\n    const { getFieldDecorator } = this.props.form;\n    const formItemLayout = {\n      labelCol: { span: 5 },\n      wrapperCol: { span: 19 },\n    };\n    const children = [];\n    for (let i = 0; i < 10; i++) {\n      children.push(\n        <Col span={8} key={i} style={{ display: i < count ? 'block' : 'none' }}>\n          <FormItem {...formItemLayout} label={`Field ${i}`}>\n            {getFieldDecorator(`field-${i}`)(\n              <Input placeholder=\"placeholder\" />\n            )}\n          </FormItem>\n        </Col>\n      );\n    }\n    return children;\n  }\n\n  render() {\n    return (\n      <Form\n        className=\"ant-advanced-search-form\"\n        onSubmit={this.handleSearch}\n      >\n        <Row gutter={40}>{this.getFields()}</Row>\n        <Row>\n          <Col span={24} style={{ textAlign: 'right' }}>\n            <Button type=\"primary\" htmlType=\"submit\">Search</Button>\n            <Button style={{ marginLeft: 8 }} onClick={this.handleReset}>\n              Clear\n            </Button>\n            <a style={{ marginLeft: 8, fontSize: 12 }} onClick={this.toggle}>\n              Collapse <Icon type={this.state.expand ? 'up' : 'down'} />\n            </a>\n          </Col>\n        </Row>\n      </Form>\n    );\n  }\n}\n\nconst WrappedAdvancedSearchForm = Form.create()(AdvancedSearchForm);\nexport default function DemoComponent_form_advanced_search() {\nreturn(\n  <div>\n    <WrappedAdvancedSearchForm />\n    <div className=\"search-result-list\">Search Result List</div>\n  </div>);\n};\n\nexport const demo = <DemoComponent_form_advanced_search key=\"DemoComponent_form_advanced_search\" />;\n"],"cssCodes":["#components-form-demo-advanced-search .ant-advanced-search-form {\n  padding: 24px;\n  background: #fbfbfb;\n  border: 1px solid #d9d9d9;\n  border-radius: 6px;\n}\n"]},{"name":"coordinated","content":"---\norder: 11\ntitle:\n  zh-CN: 表单联动\n  en-US: Coordinated Controls\n---\n\n## zh-CN\n\n使用 `setFieldsValue` 来动态设置其他控件的值。\n\n## en-US\n\nUse `setFieldsValue` to set other control's value programmaticly.\n\n````jsx\nimport { Form, Select, Input, Button } from 'antd';\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\nclass App extends React.Component {\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n      }\n    });\n  }\n  handleSelectChange = (value) => {\n    console.log(value);\n    this.props.form.setFieldsValue({\n      note: `Hi, ${value === 'male' ? 'man' : 'lady'}!`,\n    });\n  }\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        <FormItem\n          label=\"Note\"\n          labelCol={{ span: 4 }}\n          wrapperCol={{ span: 8 }}\n        >\n          {getFieldDecorator('note', {\n            rules: [{ required: true, message: 'Please input your note!' }],\n          })(\n            <Input />\n          )}\n        </FormItem>\n        <FormItem\n          label=\"Gender\"\n          labelCol={{ span: 4 }}\n          wrapperCol={{ span: 8 }}\n        >\n          {getFieldDecorator('gender', {\n            rules: [{ required: true, message: 'Please select your gender!' }],\n          })(\n            <Select\n              placeholder=\"Select a option and change input text above\"\n              onChange={this.handleSelectChange}\n            >\n              <Option value=\"male\">male</Option>\n              <Option value=\"female\">female</Option>\n            </Select>\n          )}\n        </FormItem>\n        <FormItem\n          wrapperCol={{ span: 8, offset: 4 }}\n        >\n          <Button type=\"primary\" htmlType=\"submit\">\n            Submit\n          </Button>\n        </FormItem>\n      </Form>\n    );\n  }\n}\n\nconst WrappedApp = Form.create()(App);\n\nReactDOM.render(<WrappedApp />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Form, Select, Input, Button } from 'antd';\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\nclass App extends React.Component {\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n      }\n    });\n  }\n  handleSelectChange = (value) => {\n    console.log(value);\n    this.props.form.setFieldsValue({\n      note: `Hi, ${value === 'male' ? 'man' : 'lady'}!`,\n    });\n  }\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        <FormItem\n          label=\"Note\"\n          labelCol={{ span: 4 }}\n          wrapperCol={{ span: 8 }}\n        >\n          {getFieldDecorator('note', {\n            rules: [{ required: true, message: 'Please input your note!' }],\n          })(\n            <Input />\n          )}\n        </FormItem>\n        <FormItem\n          label=\"Gender\"\n          labelCol={{ span: 4 }}\n          wrapperCol={{ span: 8 }}\n        >\n          {getFieldDecorator('gender', {\n            rules: [{ required: true, message: 'Please select your gender!' }],\n          })(\n            <Select\n              placeholder=\"Select a option and change input text above\"\n              onChange={this.handleSelectChange}\n            >\n              <Option value=\"male\">male</Option>\n              <Option value=\"female\">female</Option>\n            </Select>\n          )}\n        </FormItem>\n        <FormItem\n          wrapperCol={{ span: 8, offset: 4 }}\n        >\n          <Button type=\"primary\" htmlType=\"submit\">\n            Submit\n          </Button>\n        </FormItem>\n      </Form>\n    );\n  }\n}\n\nconst WrappedApp = Form.create()(App);\n\nexport default function DemoComponent_form_coordinated() {\nreturn(<WrappedApp />);\n};\n\nexport const demo = <DemoComponent_form_coordinated key=\"DemoComponent_form_coordinated\" />;\n"],"cssCodes":[]},{"name":"customized_form_controls","content":"---\norder: 7\ntitle:\n  zh-CN: 自定义表单控件\n  en-US: Customized Form Controls\n---\n\n## zh-CN\n\n自定义或第三方的表单控件，也可以与 Form 组件一起使用。只要该组件遵循以下的约定：\n> * 提供受控属性 `value` 或其它与 [`valuePropName`](http://ant.design/components/form/#getFieldDecorator-参数) 的值同名的属性。\n> * 提供 `onChange` 事件或 [`trigger`](http://ant.design/components/form/#getFieldDecorator-参数) 的值同名的事件。\n> * 不能是函数式组件。\n\n## en-US\n\nCustomized or third-party form controls can be used in Form, too. Controls must follow these conventions:\n> * It has a controlled property `value` or other name which is equal to the value of [`valuePropName`](http://ant.design/components/form/?locale=en-US#getFieldDecorator's-parameters).\n> * It has event `onChange` or an event which name is equal to the value of [`trigger`](http://ant.design/components/form/?locale=en-US#getFieldDecorator's-parameters).\n> * It must be a class component.\n\n````jsx\nimport { Form, Input, Select, Button } from 'antd';\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\nclass PriceInput extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const value = this.props.value || {};\n    this.state = {\n      number: value.number || 0,\n      currency: value.currency || 'rmb',\n    };\n  }\n  componentWillReceiveProps(nextProps) {\n    // Should be a controlled component.\n    if ('value' in nextProps) {\n      const value = nextProps.value;\n      this.setState(value);\n    }\n  }\n  handleNumberChange = (e) => {\n    const number = parseInt(e.target.value || 0, 10);\n    if (isNaN(number)) {\n      return;\n    }\n    if (!('value' in this.props)) {\n      this.setState({ number });\n    }\n    this.triggerChange({ number });\n  }\n  handleCurrencyChange = (currency) => {\n    if (!('value' in this.props)) {\n      this.setState({ currency });\n    }\n    this.triggerChange({ currency });\n  }\n  triggerChange = (changedValue) => {\n    // Should provide an event to pass value to Form.\n    const onChange = this.props.onChange;\n    if (onChange) {\n      onChange(Object.assign({}, this.state, changedValue));\n    }\n  }\n  render() {\n    const { size } = this.props;\n    const state = this.state;\n    return (\n      <span>\n        <Input\n          type=\"text\"\n          size={size}\n          value={state.number}\n          onChange={this.handleNumberChange}\n          style={{ width: '65%', marginRight: '3%' }}\n        />\n        <Select\n          value={state.currency}\n          size={size}\n          style={{ width: '32%' }}\n          onChange={this.handleCurrencyChange}\n        >\n          <Option value=\"rmb\">RMB</Option>\n          <Option value=\"dollar\">Dollar</Option>\n        </Select>\n      </span>\n    );\n  }\n}\n\nclass Demo extends React.Component {\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n      }\n    });\n  }\n  checkPrice = (rule, value, callback) => {\n    if (value.number > 0) {\n      callback();\n      return;\n    }\n    callback('Price must greater than zero!');\n  }\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    return (\n      <Form layout=\"inline\" onSubmit={this.handleSubmit}>\n        <FormItem label=\"Price\">\n          {getFieldDecorator('price', {\n            initialValue: { number: 0, currency: 'rmb' },\n            rules: [{ validator: this.checkPrice }],\n          })(<PriceInput />)}\n        </FormItem>\n        <FormItem>\n          <Button type=\"primary\" htmlType=\"submit\">Submit</Button>\n        </FormItem>\n      </Form>\n    );\n  }\n}\n\nconst WrappedDemo = Form.create()(Demo);\n\nReactDOM.render(<WrappedDemo />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Form, Input, Select, Button } from 'antd';\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\nclass PriceInput extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const value = this.props.value || {};\n    this.state = {\n      number: value.number || 0,\n      currency: value.currency || 'rmb',\n    };\n  }\n  componentWillReceiveProps(nextProps) {\n    // Should be a controlled component.\n    if ('value' in nextProps) {\n      const value = nextProps.value;\n      this.setState(value);\n    }\n  }\n  handleNumberChange = (e) => {\n    const number = parseInt(e.target.value || 0, 10);\n    if (isNaN(number)) {\n      return;\n    }\n    if (!('value' in this.props)) {\n      this.setState({ number });\n    }\n    this.triggerChange({ number });\n  }\n  handleCurrencyChange = (currency) => {\n    if (!('value' in this.props)) {\n      this.setState({ currency });\n    }\n    this.triggerChange({ currency });\n  }\n  triggerChange = (changedValue) => {\n    // Should provide an event to pass value to Form.\n    const onChange = this.props.onChange;\n    if (onChange) {\n      onChange(Object.assign({}, this.state, changedValue));\n    }\n  }\n  render() {\n    const { size } = this.props;\n    const state = this.state;\n    return (\n      <span>\n        <Input\n          type=\"text\"\n          size={size}\n          value={state.number}\n          onChange={this.handleNumberChange}\n          style={{ width: '65%', marginRight: '3%' }}\n        />\n        <Select\n          value={state.currency}\n          size={size}\n          style={{ width: '32%' }}\n          onChange={this.handleCurrencyChange}\n        >\n          <Option value=\"rmb\">RMB</Option>\n          <Option value=\"dollar\">Dollar</Option>\n        </Select>\n      </span>\n    );\n  }\n}\n\nclass Demo extends React.Component {\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n      }\n    });\n  }\n  checkPrice = (rule, value, callback) => {\n    if (value.number > 0) {\n      callback();\n      return;\n    }\n    callback('Price must greater than zero!');\n  }\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    return (\n      <Form layout=\"inline\" onSubmit={this.handleSubmit}>\n        <FormItem label=\"Price\">\n          {getFieldDecorator('price', {\n            initialValue: { number: 0, currency: 'rmb' },\n            rules: [{ validator: this.checkPrice }],\n          })(<PriceInput />)}\n        </FormItem>\n        <FormItem>\n          <Button type=\"primary\" htmlType=\"submit\">Submit</Button>\n        </FormItem>\n      </Form>\n    );\n  }\n}\n\nconst WrappedDemo = Form.create()(Demo);\n\nexport default function DemoComponent_form_customized_form_controls() {\nreturn(<WrappedDemo />);\n};\n\nexport const demo = <DemoComponent_form_customized_form_controls key=\"DemoComponent_form_customized_form_controls\" />;\n"],"cssCodes":[]},{"name":"dynamic_form_item","content":"---\norder: 5\ntitle:\n  zh-CN: 动态增减表单项\n  en-US: Dynamic Form Item\n---\n\n## zh-CN\n\n动态增加、减少表单项。\n\n## en-US\n\nAdd or remove form items dynamically.\n\n````jsx\nimport { Form, Input, Icon, Button } from 'antd';\nconst FormItem = Form.Item;\n\nlet uuid = 0;\nclass DynamicFieldSet extends React.Component {\n  remove = (k) => {\n    const { form } = this.props;\n    // can use data-binding to get\n    const keys = form.getFieldValue('keys');\n    // We need at least one passenger\n    if (keys.length === 1) {\n      return;\n    }\n\n    // can use data-binding to set\n    form.setFieldsValue({\n      keys: keys.filter(key => key !== k),\n    });\n  }\n\n  add = () => {\n    uuid++;\n    const { form } = this.props;\n    // can use data-binding to get\n    const keys = form.getFieldValue('keys');\n    const nextKeys = keys.concat(uuid);\n    // can use data-binding to set\n    // important! notify form to detect changes\n    form.setFieldsValue({\n      keys: nextKeys,\n    });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n      }\n    });\n  }\n\n  render() {\n    const { getFieldDecorator, getFieldValue } = this.props.form;\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 4 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 20 },\n      },\n    };\n    const formItemLayoutWithOutLabel = {\n      wrapperCol: {\n        xs: { span: 24, offset: 0 },\n        sm: { span: 20, offset: 4 },\n      },\n    };\n    getFieldDecorator('keys', { initialValue: [] });\n    const keys = getFieldValue('keys');\n    const formItems = keys.map((k, index) => {\n      return (\n        <FormItem\n          {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n          label={index === 0 ? 'Passengers' : ''}\n          required={false}\n          key={k}\n        >\n          {getFieldDecorator(`names-${k}`, {\n            validateTrigger: ['onChange', 'onBlur'],\n            rules: [{\n              required: true,\n              whitespace: true,\n              message: \"Please input passenger's name or delete this field.\",\n            }],\n          })(\n            <Input placeholder=\"passenger name\" style={{ width: '60%', marginRight: 8 }} />\n          )}\n          {keys.length > 1 ? (\n            <Icon\n              className=\"dynamic-delete-button\"\n              type=\"minus-circle-o\"\n              disabled={keys.length === 1}\n              onClick={() => this.remove(k)}\n            />\n          ) : null}\n        </FormItem>\n      );\n    });\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        {formItems}\n        <FormItem {...formItemLayoutWithOutLabel}>\n          <Button type=\"dashed\" onClick={this.add} style={{ width: '60%' }}>\n            <Icon type=\"plus\" /> Add field\n          </Button>\n        </FormItem>\n        <FormItem {...formItemLayoutWithOutLabel}>\n          <Button type=\"primary\" htmlType=\"submit\" size=\"large\">Submit</Button>\n        </FormItem>\n      </Form>\n    );\n  }\n}\n\nconst WrappedDynamicFieldSet = Form.create()(DynamicFieldSet);\nReactDOM.render(<WrappedDynamicFieldSet />, mountNode);\n````\n\n````css\n.dynamic-delete-button {\n  cursor: pointer;\n  position: relative;\n  top: 4px;\n  font-size: 24px;\n  color: #999;\n  transition: all .3s;\n}\n.dynamic-delete-button:hover {\n  color: #777;\n}\n.dynamic-delete-button[disabled] {\n  cursor: not-allowed;\n  opacity: 0.5;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Form, Input, Icon, Button } from 'antd';\nconst FormItem = Form.Item;\n\nlet uuid = 0;\nclass DynamicFieldSet extends React.Component {\n  remove = (k) => {\n    const { form } = this.props;\n    // can use data-binding to get\n    const keys = form.getFieldValue('keys');\n    // We need at least one passenger\n    if (keys.length === 1) {\n      return;\n    }\n\n    // can use data-binding to set\n    form.setFieldsValue({\n      keys: keys.filter(key => key !== k),\n    });\n  }\n\n  add = () => {\n    uuid++;\n    const { form } = this.props;\n    // can use data-binding to get\n    const keys = form.getFieldValue('keys');\n    const nextKeys = keys.concat(uuid);\n    // can use data-binding to set\n    // important! notify form to detect changes\n    form.setFieldsValue({\n      keys: nextKeys,\n    });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n      }\n    });\n  }\n\n  render() {\n    const { getFieldDecorator, getFieldValue } = this.props.form;\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 4 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 20 },\n      },\n    };\n    const formItemLayoutWithOutLabel = {\n      wrapperCol: {\n        xs: { span: 24, offset: 0 },\n        sm: { span: 20, offset: 4 },\n      },\n    };\n    getFieldDecorator('keys', { initialValue: [] });\n    const keys = getFieldValue('keys');\n    const formItems = keys.map((k, index) => {\n      return (\n        <FormItem\n          {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n          label={index === 0 ? 'Passengers' : ''}\n          required={false}\n          key={k}\n        >\n          {getFieldDecorator(`names-${k}`, {\n            validateTrigger: ['onChange', 'onBlur'],\n            rules: [{\n              required: true,\n              whitespace: true,\n              message: \"Please input passenger's name or delete this field.\",\n            }],\n          })(\n            <Input placeholder=\"passenger name\" style={{ width: '60%', marginRight: 8 }} />\n          )}\n          {keys.length > 1 ? (\n            <Icon\n              className=\"dynamic-delete-button\"\n              type=\"minus-circle-o\"\n              disabled={keys.length === 1}\n              onClick={() => this.remove(k)}\n            />\n          ) : null}\n        </FormItem>\n      );\n    });\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        {formItems}\n        <FormItem {...formItemLayoutWithOutLabel}>\n          <Button type=\"dashed\" onClick={this.add} style={{ width: '60%' }}>\n            <Icon type=\"plus\" /> Add field\n          </Button>\n        </FormItem>\n        <FormItem {...formItemLayoutWithOutLabel}>\n          <Button type=\"primary\" htmlType=\"submit\" size=\"large\">Submit</Button>\n        </FormItem>\n      </Form>\n    );\n  }\n}\n\nconst WrappedDynamicFieldSet = Form.create()(DynamicFieldSet);\nexport default function DemoComponent_form_dynamic_form_item() {\nreturn(<WrappedDynamicFieldSet />);\n};\n\nexport const demo = <DemoComponent_form_dynamic_form_item key=\"DemoComponent_form_dynamic_form_item\" />;\n"],"cssCodes":[".dynamic-delete-button {\n  cursor: pointer;\n  position: relative;\n  top: 4px;\n  font-size: 24px;\n  color: #999;\n  transition: all .3s;\n}\n.dynamic-delete-button:hover {\n  color: #777;\n}\n.dynamic-delete-button[disabled] {\n  cursor: not-allowed;\n  opacity: 0.5;\n}\n"]},{"name":"dynamic_rule","content":"---\norder: 13\ntitle:\n  zh-CN: 动态校验规则\n  en-US: Dynamic Rules\n---\n\n## zh-CN\n\n根据不同情况执行不同的校验规则。\n\n## en-US\n\nPerform different check rules according to different situations.\n\n````jsx\nimport { Form, Input, Button, Checkbox } from 'antd';\nconst FormItem = Form.Item;\n\nconst formItemLayout = {\n  labelCol: { span: 4 },\n  wrapperCol: { span: 8 },\n};\nconst formTailLayout = {\n  labelCol: { span: 4 },\n  wrapperCol: { span: 8, offset: 4 },\n};\nclass DynamicRule extends React.Component {\n  state = {\n    checkNick: false,\n  };\n  check = () => {\n    this.props.form.validateFields(\n      (err) => {\n        if (!err) {\n          console.info('success');\n        }\n      },\n    );\n  }\n  handleChange = (e) => {\n    this.setState({\n      checkNick: e.target.checked,\n    }, () => {\n      this.props.form.validateFields(['nickname'], { force: true });\n    });\n  }\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    return (\n      <div>\n        <FormItem {...formItemLayout} label=\"Name\">\n          {getFieldDecorator('username', {\n            rules: [{\n              required: true,\n              message: 'Please input your name',\n            }],\n          })(\n            <Input placeholder=\"Please input your name\" />\n          )}\n        </FormItem>\n        <FormItem {...formItemLayout} label=\"Nickname\">\n          {getFieldDecorator('nickname', {\n            rules: [{\n              required: this.state.checkNick,\n              message: 'Please input your nickname',\n            }],\n          })(\n            <Input placeholder=\"Please input your nickname\" />\n          )}\n        </FormItem>\n        <FormItem {...formTailLayout}>\n          <Checkbox\n            value={this.state.checkNick}\n            onChange={this.handleChange}\n          >\n            Nickname is required\n          </Checkbox>\n        </FormItem>\n        <FormItem {...formTailLayout}>\n          <Button type=\"primary\" onClick={this.check}>\n            Check\n          </Button>\n        </FormItem>\n      </div>\n    );\n  }\n}\n\nconst WrappedDynamicRule = Form.create()(DynamicRule);\nReactDOM.render(<WrappedDynamicRule />, mountNode);\n\n````\n","jsCodes":["import React from 'react';\nimport { Form, Input, Button, Checkbox } from 'antd';\nconst FormItem = Form.Item;\n\nconst formItemLayout = {\n  labelCol: { span: 4 },\n  wrapperCol: { span: 8 },\n};\nconst formTailLayout = {\n  labelCol: { span: 4 },\n  wrapperCol: { span: 8, offset: 4 },\n};\nclass DynamicRule extends React.Component {\n  state = {\n    checkNick: false,\n  };\n  check = () => {\n    this.props.form.validateFields(\n      (err) => {\n        if (!err) {\n          console.info('success');\n        }\n      },\n    );\n  }\n  handleChange = (e) => {\n    this.setState({\n      checkNick: e.target.checked,\n    }, () => {\n      this.props.form.validateFields(['nickname'], { force: true });\n    });\n  }\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    return (\n      <div>\n        <FormItem {...formItemLayout} label=\"Name\">\n          {getFieldDecorator('username', {\n            rules: [{\n              required: true,\n              message: 'Please input your name',\n            }],\n          })(\n            <Input placeholder=\"Please input your name\" />\n          )}\n        </FormItem>\n        <FormItem {...formItemLayout} label=\"Nickname\">\n          {getFieldDecorator('nickname', {\n            rules: [{\n              required: this.state.checkNick,\n              message: 'Please input your nickname',\n            }],\n          })(\n            <Input placeholder=\"Please input your nickname\" />\n          )}\n        </FormItem>\n        <FormItem {...formTailLayout}>\n          <Checkbox\n            value={this.state.checkNick}\n            onChange={this.handleChange}\n          >\n            Nickname is required\n          </Checkbox>\n        </FormItem>\n        <FormItem {...formTailLayout}>\n          <Button type=\"primary\" onClick={this.check}>\n            Check\n          </Button>\n        </FormItem>\n      </div>\n    );\n  }\n}\n\nconst WrappedDynamicRule = Form.create()(DynamicRule);\nexport default function DemoComponent_form_dynamic_rule() {\nreturn(<WrappedDynamicRule />);\n};\n\n\nexport const demo = <DemoComponent_form_dynamic_rule key=\"DemoComponent_form_dynamic_rule\" />;\n"],"cssCodes":[]},{"name":"form_in_modal","content":"---\norder: 4\ntitle:\n  zh-CN: 弹出层中的新建表单\n  en-US: Form in Modal to Create\n---\n\n## zh-CN\n\n当用户访问一个展示了某个列表的页面，想新建一项但又不想跳转页面时，可以用 Modal 弹出一个表单，用户填写必要信息后创建新的项。\n\n## en-US\n\nWhen user visit a page with a list of items, and want to create a new item. The page can popup a form in Modal, then let user fills in the form to create an item.\n\n````jsx\nimport { Button, Modal, Form, Input, Radio } from 'antd';\nconst FormItem = Form.Item;\n\nconst CollectionCreateForm = Form.create()(\n  (props) => {\n    const { visible, onCancel, onCreate, form } = props;\n    const { getFieldDecorator } = form;\n    return (\n      <Modal\n        visible={visible}\n        title=\"Create a new collection\"\n        okText=\"Create\"\n        onCancel={onCancel}\n        onOk={onCreate}\n      >\n        <Form layout=\"vertical\">\n          <FormItem label=\"Title\">\n            {getFieldDecorator('title', {\n              rules: [{ required: true, message: 'Please input the title of collection!' }],\n            })(\n              <Input />\n            )}\n          </FormItem>\n          <FormItem label=\"Description\">\n            {getFieldDecorator('description')(<Input type=\"textarea\" />)}\n          </FormItem>\n          <FormItem className=\"collection-create-form_last-form-item\">\n            {getFieldDecorator('modifier', {\n              initialValue: 'public',\n            })(\n              <Radio.Group>\n                <Radio value=\"public\">Public</Radio>\n                <Radio value=\"private\">Private</Radio>\n              </Radio.Group>\n            )}\n          </FormItem>\n        </Form>\n      </Modal>\n    );\n  }\n);\n\nclass CollectionsPage extends React.Component {\n  state = {\n    visible: false,\n  };\n  showModal = () => {\n    this.setState({ visible: true });\n  }\n  handleCancel = () => {\n    this.setState({ visible: false });\n  }\n  handleCreate = () => {\n    const form = this.form;\n    form.validateFields((err, values) => {\n      if (err) {\n        return;\n      }\n\n      console.log('Received values of form: ', values);\n      form.resetFields();\n      this.setState({ visible: false });\n    });\n  }\n  saveFormRef = (form) => {\n    this.form = form;\n  }\n  render() {\n    return (\n      <div>\n        <Button type=\"primary\" onClick={this.showModal}>New Collection</Button>\n        <CollectionCreateForm\n          ref={this.saveFormRef}\n          visible={this.state.visible}\n          onCancel={this.handleCancel}\n          onCreate={this.handleCreate}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<CollectionsPage />, mountNode);\n````\n\n````css\n.collection-create-form_last-form-item {\n  margin-bottom: 0;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Button, Modal, Form, Input, Radio } from 'antd';\nconst FormItem = Form.Item;\n\nconst CollectionCreateForm = Form.create()(\n  (props) => {\n    const { visible, onCancel, onCreate, form } = props;\n    const { getFieldDecorator } = form;\n    return (\n      <Modal\n        visible={visible}\n        title=\"Create a new collection\"\n        okText=\"Create\"\n        onCancel={onCancel}\n        onOk={onCreate}\n      >\n        <Form layout=\"vertical\">\n          <FormItem label=\"Title\">\n            {getFieldDecorator('title', {\n              rules: [{ required: true, message: 'Please input the title of collection!' }],\n            })(\n              <Input />\n            )}\n          </FormItem>\n          <FormItem label=\"Description\">\n            {getFieldDecorator('description')(<Input type=\"textarea\" />)}\n          </FormItem>\n          <FormItem className=\"collection-create-form_last-form-item\">\n            {getFieldDecorator('modifier', {\n              initialValue: 'public',\n            })(\n              <Radio.Group>\n                <Radio value=\"public\">Public</Radio>\n                <Radio value=\"private\">Private</Radio>\n              </Radio.Group>\n            )}\n          </FormItem>\n        </Form>\n      </Modal>\n    );\n  }\n);\n\nclass CollectionsPage extends React.Component {\n  state = {\n    visible: false,\n  };\n  showModal = () => {\n    this.setState({ visible: true });\n  }\n  handleCancel = () => {\n    this.setState({ visible: false });\n  }\n  handleCreate = () => {\n    const form = this.form;\n    form.validateFields((err, values) => {\n      if (err) {\n        return;\n      }\n\n      console.log('Received values of form: ', values);\n      form.resetFields();\n      this.setState({ visible: false });\n    });\n  }\n  saveFormRef = (form) => {\n    this.form = form;\n  }\n  render() {\n    return (\n      <div>\n        <Button type=\"primary\" onClick={this.showModal}>New Collection</Button>\n        <CollectionCreateForm\n          ref={this.saveFormRef}\n          visible={this.state.visible}\n          onCancel={this.handleCancel}\n          onCreate={this.handleCreate}\n        />\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_form_form_in_modal() {\nreturn(<CollectionsPage />);\n};\n\nexport const demo = <DemoComponent_form_form_in_modal key=\"DemoComponent_form_form_in_modal\" />;\n"],"cssCodes":[".collection-create-form_last-form-item {\n  margin-bottom: 0;\n}\n"]},{"name":"global_state","content":"---\norder: 8\ntitle:\n  zh-CN: 表单数据存储于上层组件\n  en-US: Store Form Data into Upper Component\n---\n\n## zh-CN\n\n通过使用 `onFieldsChange` 与 `mapPropsToFields`，可以把表单的数据存储到上层组件或者 [Redux](https://github.com/reactjs/redux)、[dva](https://github.com/dvajs/dva) 中，更多可参考 [rc-form 示例](http://react-component.github.io/form/examples/redux.html)。\n\n## en-US\n\nWe can store form data into upper component or [Redux](https://github.com/reactjs/redux) or [dva](https://github.com/dvajs/dva) by using `onFieldsChange` and `mapPropsToFields`, see more at this [rc-form demo](http://react-component.github.io/form/examples/redux.html).\n\n````jsx\nimport { Form, Input } from 'antd';\nconst FormItem = Form.Item;\n\nconst CustomizedForm = Form.create({\n  onFieldsChange(props, changedFields) {\n    props.onChange(changedFields);\n  },\n  mapPropsToFields(props) {\n    return {\n      username: {\n        ...props.username,\n        value: props.username.value.toUpperCase(),\n      },\n    };\n  },\n  onValuesChange(_, values) {\n    console.log(values);\n  },\n})((props) => {\n  const { getFieldDecorator } = props.form;\n  return (\n    <Form layout=\"inline\">\n      <FormItem label=\"Username\">\n        {getFieldDecorator('username', {\n          rules: [{ required: true, message: 'Username is required!' }],\n        })(<Input />)}\n      </FormItem>\n    </Form>\n  );\n});\n\nclass Demo extends React.Component {\n  state = {\n    fields: {\n      username: {\n        value: 'benjycui',\n      },\n    },\n  };\n  handleFormChange = (changedFields) => {\n    this.setState({\n      fields: { ...this.state.fields, ...changedFields },\n    });\n  }\n  render() {\n    const fields = this.state.fields;\n    return (\n      <div>\n        <CustomizedForm {...fields} onChange={this.handleFormChange} />\n        <pre className=\"language-bash\">\n          {JSON.stringify(fields, null, 2)}\n        </pre>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n````\n\n<style>\n#components-form-demo-global-state .language-bash {\n  max-width: 400px;\n  border-radius: 6px;\n  margin-top: 24px;\n}\n</style>\n","jsCodes":["import React from 'react';\nimport { Form, Input } from 'antd';\nconst FormItem = Form.Item;\n\nconst CustomizedForm = Form.create({\n  onFieldsChange(props, changedFields) {\n    props.onChange(changedFields);\n  },\n  mapPropsToFields(props) {\n    return {\n      username: {\n        ...props.username,\n        value: props.username.value.toUpperCase(),\n      },\n    };\n  },\n  onValuesChange(_, values) {\n    console.log(values);\n  },\n})((props) => {\n  const { getFieldDecorator } = props.form;\n  return (\n    <Form layout=\"inline\">\n      <FormItem label=\"Username\">\n        {getFieldDecorator('username', {\n          rules: [{ required: true, message: 'Username is required!' }],\n        })(<Input />)}\n      </FormItem>\n    </Form>\n  );\n});\n\nclass Demo extends React.Component {\n  state = {\n    fields: {\n      username: {\n        value: 'benjycui',\n      },\n    },\n  };\n  handleFormChange = (changedFields) => {\n    this.setState({\n      fields: { ...this.state.fields, ...changedFields },\n    });\n  }\n  render() {\n    const fields = this.state.fields;\n    return (\n      <div>\n        <CustomizedForm {...fields} onChange={this.handleFormChange} />\n        <pre className=\"language-bash\">\n          {JSON.stringify(fields, null, 2)}\n        </pre>\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_form_global_state() {\nreturn(<Demo />);\n};\n\nexport const demo = <DemoComponent_form_global_state key=\"DemoComponent_form_global_state\" />;\n"],"cssCodes":[]},{"name":"horizontal_login","content":"---\norder: 0\ntitle:\n  zh-CN: 水平登录栏\n  en-US: Horizontal Login Form\n---\n\n## zh-CN\n\n水平登录栏，常用在顶部导航栏中。\n\n## en-US\n\nHorizontal login form is often used in navigation bar.\n\n````jsx\nimport { Form, Icon, Input, Button } from 'antd';\nconst FormItem = Form.Item;\n\nfunction hasErrors(fieldsError) {\n  return Object.keys(fieldsError).some(field => fieldsError[field]);\n}\n\nclass HorizontalLoginForm extends React.Component {\n  componentDidMount() {\n    // To disabled submit button at the beginning.\n    this.props.form.validateFields();\n  }\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n      }\n    });\n  }\n  render() {\n    const { getFieldDecorator, getFieldsError, getFieldError, isFieldTouched } = this.props.form;\n\n    // Only show error after a field is touched.\n    const userNameError = isFieldTouched('userName') && getFieldError('userName');\n    const passwordError = isFieldTouched('password') && getFieldError('password');\n    return (\n      <Form layout=\"inline\" onSubmit={this.handleSubmit}>\n        <FormItem\n          validateStatus={userNameError ? 'error' : ''}\n          help={userNameError || ''}\n        >\n          {getFieldDecorator('userName', {\n            rules: [{ required: true, message: 'Please input your username!' }],\n          })(\n            <Input prefix={<Icon type=\"user\" style={{ fontSize: 13 }} />} placeholder=\"Username\" />\n          )}\n        </FormItem>\n        <FormItem\n          validateStatus={passwordError ? 'error' : ''}\n          help={passwordError || ''}\n        >\n          {getFieldDecorator('password', {\n            rules: [{ required: true, message: 'Please input your Password!' }],\n          })(\n            <Input prefix={<Icon type=\"lock\" style={{ fontSize: 13 }} />} type=\"password\" placeholder=\"Password\" />\n          )}\n        </FormItem>\n        <FormItem>\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            disabled={hasErrors(getFieldsError())}\n          >\n            Log in\n          </Button>\n        </FormItem>\n      </Form>\n    );\n  }\n}\n\nconst WrappedHorizontalLoginForm = Form.create()(HorizontalLoginForm);\n\nReactDOM.render(<WrappedHorizontalLoginForm />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Form, Icon, Input, Button } from 'antd';\nconst FormItem = Form.Item;\n\nfunction hasErrors(fieldsError) {\n  return Object.keys(fieldsError).some(field => fieldsError[field]);\n}\n\nclass HorizontalLoginForm extends React.Component {\n  componentDidMount() {\n    // To disabled submit button at the beginning.\n    this.props.form.validateFields();\n  }\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n      }\n    });\n  }\n  render() {\n    const { getFieldDecorator, getFieldsError, getFieldError, isFieldTouched } = this.props.form;\n\n    // Only show error after a field is touched.\n    const userNameError = isFieldTouched('userName') && getFieldError('userName');\n    const passwordError = isFieldTouched('password') && getFieldError('password');\n    return (\n      <Form layout=\"inline\" onSubmit={this.handleSubmit}>\n        <FormItem\n          validateStatus={userNameError ? 'error' : ''}\n          help={userNameError || ''}\n        >\n          {getFieldDecorator('userName', {\n            rules: [{ required: true, message: 'Please input your username!' }],\n          })(\n            <Input prefix={<Icon type=\"user\" style={{ fontSize: 13 }} />} placeholder=\"Username\" />\n          )}\n        </FormItem>\n        <FormItem\n          validateStatus={passwordError ? 'error' : ''}\n          help={passwordError || ''}\n        >\n          {getFieldDecorator('password', {\n            rules: [{ required: true, message: 'Please input your Password!' }],\n          })(\n            <Input prefix={<Icon type=\"lock\" style={{ fontSize: 13 }} />} type=\"password\" placeholder=\"Password\" />\n          )}\n        </FormItem>\n        <FormItem>\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            disabled={hasErrors(getFieldsError())}\n          >\n            Log in\n          </Button>\n        </FormItem>\n      </Form>\n    );\n  }\n}\n\nconst WrappedHorizontalLoginForm = Form.create()(HorizontalLoginForm);\n\nexport default function DemoComponent_form_horizontal_login() {\nreturn(<WrappedHorizontalLoginForm />);\n};\n\nexport const demo = <DemoComponent_form_horizontal_login key=\"DemoComponent_form_horizontal_login\" />;\n"],"cssCodes":[]},{"name":"layout","content":"---\norder: 12\ntitle:\n  zh-CN: 表单布局\n  en-US: Form Layout\n---\n\n## zh-CN\n\n表单有三种布局。\n\n## en-US\n\nThere are three layout for form: `horizontal`, `vertical`, `inline`.\n\n````jsx\nimport { Form, Input, Button, Radio } from 'antd';\nconst FormItem = Form.Item;\n\nclass FormLayoutDemo extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      formLayout: 'horizontal',\n    };\n  }\n  handleFormLayoutChange = (e) => {\n    this.setState({ formLayout: e.target.value });\n  }\n  render() {\n    const { formLayout } = this.state;\n    const formItemLayout = formLayout === 'horizontal' ? {\n      labelCol: { span: 4 },\n      wrapperCol: { span: 14 },\n    } : null;\n    const buttonItemLayout = formLayout === 'horizontal' ? {\n      wrapperCol: { span: 14, offset: 4 },\n    } : null;\n    return (\n      <div>\n        <Form layout={formLayout}>\n          <FormItem\n            label=\"Form Layout\"\n            {...formItemLayout}\n          >\n            <Radio.Group defaultValue=\"horizontal\" onChange={this.handleFormLayoutChange}>\n              <Radio.Button value=\"horizontal\">Horizontal</Radio.Button>\n              <Radio.Button value=\"vertical\">Vertical</Radio.Button>\n              <Radio.Button value=\"inline\">Inline</Radio.Button>\n            </Radio.Group>\n          </FormItem>\n          <FormItem\n            label=\"Field A\"\n            {...formItemLayout}\n          >\n            <Input placeholder=\"input placeholder\" />\n          </FormItem>\n          <FormItem\n            label=\"Field B\"\n            {...formItemLayout}\n          >\n            <Input placeholder=\"input placeholder\" />\n          </FormItem>\n          <FormItem {...buttonItemLayout}>\n            <Button type=\"primary\" size=\"large\">Submit</Button>\n          </FormItem>\n        </Form>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<FormLayoutDemo />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Form, Input, Button, Radio } from 'antd';\nconst FormItem = Form.Item;\n\nclass FormLayoutDemo extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      formLayout: 'horizontal',\n    };\n  }\n  handleFormLayoutChange = (e) => {\n    this.setState({ formLayout: e.target.value });\n  }\n  render() {\n    const { formLayout } = this.state;\n    const formItemLayout = formLayout === 'horizontal' ? {\n      labelCol: { span: 4 },\n      wrapperCol: { span: 14 },\n    } : null;\n    const buttonItemLayout = formLayout === 'horizontal' ? {\n      wrapperCol: { span: 14, offset: 4 },\n    } : null;\n    return (\n      <div>\n        <Form layout={formLayout}>\n          <FormItem\n            label=\"Form Layout\"\n            {...formItemLayout}\n          >\n            <Radio.Group defaultValue=\"horizontal\" onChange={this.handleFormLayoutChange}>\n              <Radio.Button value=\"horizontal\">Horizontal</Radio.Button>\n              <Radio.Button value=\"vertical\">Vertical</Radio.Button>\n              <Radio.Button value=\"inline\">Inline</Radio.Button>\n            </Radio.Group>\n          </FormItem>\n          <FormItem\n            label=\"Field A\"\n            {...formItemLayout}\n          >\n            <Input placeholder=\"input placeholder\" />\n          </FormItem>\n          <FormItem\n            label=\"Field B\"\n            {...formItemLayout}\n          >\n            <Input placeholder=\"input placeholder\" />\n          </FormItem>\n          <FormItem {...buttonItemLayout}>\n            <Button type=\"primary\" size=\"large\">Submit</Button>\n          </FormItem>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_form_layout() {\nreturn(<FormLayoutDemo />);\n};\n\nexport const demo = <DemoComponent_form_layout key=\"DemoComponent_form_layout\" />;\n"],"cssCodes":[]},{"name":"normal_login","content":"---\norder: 1\ntitle:\n  zh-CN: 登录框\n  en-US: Login Form\n---\n\n## zh-CN\n\n普通的登录框，可以容纳更多的元素。\n\n## en-US\n\nNormal login form which can contain more elements.\n\n````jsx\nimport { Form, Icon, Input, Button, Checkbox } from 'antd';\nconst FormItem = Form.Item;\n\nclass NormalLoginForm extends React.Component {\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n      }\n    });\n  }\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    return (\n      <Form onSubmit={this.handleSubmit} className=\"login-form\">\n        <FormItem>\n          {getFieldDecorator('userName', {\n            rules: [{ required: true, message: 'Please input your username!' }],\n          })(\n            <Input prefix={<Icon type=\"user\" style={{ fontSize: 13 }} />} placeholder=\"Username\" />\n          )}\n        </FormItem>\n        <FormItem>\n          {getFieldDecorator('password', {\n            rules: [{ required: true, message: 'Please input your Password!' }],\n          })(\n            <Input prefix={<Icon type=\"lock\" style={{ fontSize: 13 }} />} type=\"password\" placeholder=\"Password\" />\n          )}\n        </FormItem>\n        <FormItem>\n          {getFieldDecorator('remember', {\n            valuePropName: 'checked',\n            initialValue: true,\n          })(\n            <Checkbox>Remember me</Checkbox>\n          )}\n          <a className=\"login-form-forgot\" href=\"\">Forgot password</a>\n          <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n            Log in\n          </Button>\n          Or <a href=\"\">register now!</a>\n        </FormItem>\n      </Form>\n    );\n  }\n}\n\nconst WrappedNormalLoginForm = Form.create()(NormalLoginForm);\n\nReactDOM.render(<WrappedNormalLoginForm />, mountNode);\n````\n\n```css\n#components-form-demo-normal-login .login-form {\n  max-width: 300px;\n}\n#components-form-demo-normal-login .login-form-forgot {\n  float: right;\n}\n#components-form-demo-normal-login .login-form-button {\n  width: 100%;\n}\n```\n","jsCodes":["import React from 'react';\nimport { Form, Icon, Input, Button, Checkbox } from 'antd';\nconst FormItem = Form.Item;\n\nclass NormalLoginForm extends React.Component {\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n      }\n    });\n  }\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    return (\n      <Form onSubmit={this.handleSubmit} className=\"login-form\">\n        <FormItem>\n          {getFieldDecorator('userName', {\n            rules: [{ required: true, message: 'Please input your username!' }],\n          })(\n            <Input prefix={<Icon type=\"user\" style={{ fontSize: 13 }} />} placeholder=\"Username\" />\n          )}\n        </FormItem>\n        <FormItem>\n          {getFieldDecorator('password', {\n            rules: [{ required: true, message: 'Please input your Password!' }],\n          })(\n            <Input prefix={<Icon type=\"lock\" style={{ fontSize: 13 }} />} type=\"password\" placeholder=\"Password\" />\n          )}\n        </FormItem>\n        <FormItem>\n          {getFieldDecorator('remember', {\n            valuePropName: 'checked',\n            initialValue: true,\n          })(\n            <Checkbox>Remember me</Checkbox>\n          )}\n          <a className=\"login-form-forgot\" href=\"\">Forgot password</a>\n          <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n            Log in\n          </Button>\n          Or <a href=\"\">register now!</a>\n        </FormItem>\n      </Form>\n    );\n  }\n}\n\nconst WrappedNormalLoginForm = Form.create()(NormalLoginForm);\n\nexport default function DemoComponent_form_normal_login() {\nreturn(<WrappedNormalLoginForm />);\n};\n\nexport const demo = <DemoComponent_form_normal_login key=\"DemoComponent_form_normal_login\" />;\n"],"cssCodes":[]},{"name":"register","content":"---\norder: 2\ntitle:\n  zh-CN: 注册新用户\n  en-US: Registration\n---\n\n## zh-CN\n\n用户填写必须的信息以注册新用户。\n\n## en-US\n\nFill in this form to create a new account for you.\n\n````jsx\nimport { Form, Input, Tooltip, Icon, Cascader, Select, Row, Col, Checkbox, Button, AutoComplete } from 'antd';\nconst FormItem = Form.Item;\nconst Option = Select.Option;\nconst AutoCompleteOption = AutoComplete.Option;\n\nconst residences = [{\n  value: 'zhejiang',\n  label: 'Zhejiang',\n  children: [{\n    value: 'hangzhou',\n    label: 'Hangzhou',\n    children: [{\n      value: 'xihu',\n      label: 'West Lake',\n    }],\n  }],\n}, {\n  value: 'jiangsu',\n  label: 'Jiangsu',\n  children: [{\n    value: 'nanjing',\n    label: 'Nanjing',\n    children: [{\n      value: 'zhonghuamen',\n      label: 'Zhong Hua Men',\n    }],\n  }],\n}];\n\nclass RegistrationForm extends React.Component {\n  state = {\n    confirmDirty: false,\n    autoCompleteResult: [],\n  };\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n      }\n    });\n  }\n  handleConfirmBlur = (e) => {\n    const value = e.target.value;\n    this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n  }\n  checkPassword = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value !== form.getFieldValue('password')) {\n      callback('Two passwords that you enter is inconsistent!');\n    } else {\n      callback();\n    }\n  }\n  checkConfirm = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && this.state.confirmDirty) {\n      form.validateFields(['confirm'], { force: true });\n    }\n    callback();\n  }\n\n  handleWebsiteChange = (value) => {\n    let autoCompleteResult;\n    if (!value) {\n      autoCompleteResult = [];\n    } else {\n      autoCompleteResult = ['.com', '.org', '.net'].map(domain => `${value}${domain}`);\n    }\n    this.setState({ autoCompleteResult });\n  }\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    const { autoCompleteResult } = this.state;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 6 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 14 },\n      },\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0,\n        },\n        sm: {\n          span: 14,\n          offset: 6,\n        },\n      },\n    };\n    const prefixSelector = getFieldDecorator('prefix', {\n      initialValue: '86',\n    })(\n      <Select style={{ width: 60 }}>\n        <Option value=\"86\">+86</Option>\n        <Option value=\"87\">+87</Option>\n      </Select>\n    );\n\n    const websiteOptions = autoCompleteResult.map(website => (\n      <AutoCompleteOption key={website}>{website}</AutoCompleteOption>\n    ));\n\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        <FormItem\n          {...formItemLayout}\n          label=\"E-mail\"\n          hasFeedback\n        >\n          {getFieldDecorator('email', {\n            rules: [{\n              type: 'email', message: 'The input is not valid E-mail!',\n            }, {\n              required: true, message: 'Please input your E-mail!',\n            }],\n          })(\n            <Input />\n          )}\n        </FormItem>\n        <FormItem\n          {...formItemLayout}\n          label=\"Password\"\n          hasFeedback\n        >\n          {getFieldDecorator('password', {\n            rules: [{\n              required: true, message: 'Please input your password!',\n            }, {\n              validator: this.checkConfirm,\n            }],\n          })(\n            <Input type=\"password\" />\n          )}\n        </FormItem>\n        <FormItem\n          {...formItemLayout}\n          label=\"Confirm Password\"\n          hasFeedback\n        >\n          {getFieldDecorator('confirm', {\n            rules: [{\n              required: true, message: 'Please confirm your password!',\n            }, {\n              validator: this.checkPassword,\n            }],\n          })(\n            <Input type=\"password\" onBlur={this.handleConfirmBlur} />\n          )}\n        </FormItem>\n        <FormItem\n          {...formItemLayout}\n          label={(\n            <span>\n              Nickname&nbsp;\n              <Tooltip title=\"What do you want other to call you?\">\n                <Icon type=\"question-circle-o\" />\n              </Tooltip>\n            </span>\n          )}\n          hasFeedback\n        >\n          {getFieldDecorator('nickname', {\n            rules: [{ required: true, message: 'Please input your nickname!', whitespace: true }],\n          })(\n            <Input />\n          )}\n        </FormItem>\n        <FormItem\n          {...formItemLayout}\n          label=\"Habitual Residence\"\n        >\n          {getFieldDecorator('residence', {\n            initialValue: ['zhejiang', 'hangzhou', 'xihu'],\n            rules: [{ type: 'array', required: true, message: 'Please select your habitual residence!' }],\n          })(\n            <Cascader options={residences} />\n          )}\n        </FormItem>\n        <FormItem\n          {...formItemLayout}\n          label=\"Phone Number\"\n        >\n          {getFieldDecorator('phone', {\n            rules: [{ required: true, message: 'Please input your phone number!' }],\n          })(\n            <Input addonBefore={prefixSelector} style={{ width: '100%' }} />\n          )}\n        </FormItem>\n        <FormItem\n          {...formItemLayout}\n          label=\"Website\"\n        >\n          {getFieldDecorator('website', {\n            rules: [{ required: true, message: 'Please input website!' }],\n          })(\n            <AutoComplete\n              dataSource={websiteOptions}\n              onChange={this.handleWebsiteChange}\n              placeholder=\"website\"\n            >\n              <Input />\n            </AutoComplete>\n          )}\n        </FormItem>\n        <FormItem\n          {...formItemLayout}\n          label=\"Captcha\"\n          extra=\"We must make sure that your are a human.\"\n        >\n          <Row gutter={8}>\n            <Col span={12}>\n              {getFieldDecorator('captcha', {\n                rules: [{ required: true, message: 'Please input the captcha you got!' }],\n              })(\n                <Input size=\"large\" />\n              )}\n            </Col>\n            <Col span={12}>\n              <Button size=\"large\">Get captcha</Button>\n            </Col>\n          </Row>\n        </FormItem>\n        <FormItem {...tailFormItemLayout} style={{ marginBottom: 8 }}>\n          {getFieldDecorator('agreement', {\n            valuePropName: 'checked',\n          })(\n            <Checkbox>I have read the <a href=\"\">agreement</a></Checkbox>\n          )}\n        </FormItem>\n        <FormItem {...tailFormItemLayout}>\n          <Button type=\"primary\" htmlType=\"submit\" size=\"large\">Register</Button>\n        </FormItem>\n      </Form>\n    );\n  }\n}\n\nconst WrappedRegistrationForm = Form.create()(RegistrationForm);\n\nReactDOM.render(<WrappedRegistrationForm />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Form, Input, Tooltip, Icon, Cascader, Select, Row, Col, Checkbox, Button, AutoComplete } from 'antd';\nconst FormItem = Form.Item;\nconst Option = Select.Option;\nconst AutoCompleteOption = AutoComplete.Option;\n\nconst residences = [{\n  value: 'zhejiang',\n  label: 'Zhejiang',\n  children: [{\n    value: 'hangzhou',\n    label: 'Hangzhou',\n    children: [{\n      value: 'xihu',\n      label: 'West Lake',\n    }],\n  }],\n}, {\n  value: 'jiangsu',\n  label: 'Jiangsu',\n  children: [{\n    value: 'nanjing',\n    label: 'Nanjing',\n    children: [{\n      value: 'zhonghuamen',\n      label: 'Zhong Hua Men',\n    }],\n  }],\n}];\n\nclass RegistrationForm extends React.Component {\n  state = {\n    confirmDirty: false,\n    autoCompleteResult: [],\n  };\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n      }\n    });\n  }\n  handleConfirmBlur = (e) => {\n    const value = e.target.value;\n    this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n  }\n  checkPassword = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value !== form.getFieldValue('password')) {\n      callback('Two passwords that you enter is inconsistent!');\n    } else {\n      callback();\n    }\n  }\n  checkConfirm = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && this.state.confirmDirty) {\n      form.validateFields(['confirm'], { force: true });\n    }\n    callback();\n  }\n\n  handleWebsiteChange = (value) => {\n    let autoCompleteResult;\n    if (!value) {\n      autoCompleteResult = [];\n    } else {\n      autoCompleteResult = ['.com', '.org', '.net'].map(domain => `${value}${domain}`);\n    }\n    this.setState({ autoCompleteResult });\n  }\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    const { autoCompleteResult } = this.state;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 6 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 14 },\n      },\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0,\n        },\n        sm: {\n          span: 14,\n          offset: 6,\n        },\n      },\n    };\n    const prefixSelector = getFieldDecorator('prefix', {\n      initialValue: '86',\n    })(\n      <Select style={{ width: 60 }}>\n        <Option value=\"86\">+86</Option>\n        <Option value=\"87\">+87</Option>\n      </Select>\n    );\n\n    const websiteOptions = autoCompleteResult.map(website => (\n      <AutoCompleteOption key={website}>{website}</AutoCompleteOption>\n    ));\n\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        <FormItem\n          {...formItemLayout}\n          label=\"E-mail\"\n          hasFeedback\n        >\n          {getFieldDecorator('email', {\n            rules: [{\n              type: 'email', message: 'The input is not valid E-mail!',\n            }, {\n              required: true, message: 'Please input your E-mail!',\n            }],\n          })(\n            <Input />\n          )}\n        </FormItem>\n        <FormItem\n          {...formItemLayout}\n          label=\"Password\"\n          hasFeedback\n        >\n          {getFieldDecorator('password', {\n            rules: [{\n              required: true, message: 'Please input your password!',\n            }, {\n              validator: this.checkConfirm,\n            }],\n          })(\n            <Input type=\"password\" />\n          )}\n        </FormItem>\n        <FormItem\n          {...formItemLayout}\n          label=\"Confirm Password\"\n          hasFeedback\n        >\n          {getFieldDecorator('confirm', {\n            rules: [{\n              required: true, message: 'Please confirm your password!',\n            }, {\n              validator: this.checkPassword,\n            }],\n          })(\n            <Input type=\"password\" onBlur={this.handleConfirmBlur} />\n          )}\n        </FormItem>\n        <FormItem\n          {...formItemLayout}\n          label={(\n            <span>\n              Nickname&nbsp;\n              <Tooltip title=\"What do you want other to call you?\">\n                <Icon type=\"question-circle-o\" />\n              </Tooltip>\n            </span>\n          )}\n          hasFeedback\n        >\n          {getFieldDecorator('nickname', {\n            rules: [{ required: true, message: 'Please input your nickname!', whitespace: true }],\n          })(\n            <Input />\n          )}\n        </FormItem>\n        <FormItem\n          {...formItemLayout}\n          label=\"Habitual Residence\"\n        >\n          {getFieldDecorator('residence', {\n            initialValue: ['zhejiang', 'hangzhou', 'xihu'],\n            rules: [{ type: 'array', required: true, message: 'Please select your habitual residence!' }],\n          })(\n            <Cascader options={residences} />\n          )}\n        </FormItem>\n        <FormItem\n          {...formItemLayout}\n          label=\"Phone Number\"\n        >\n          {getFieldDecorator('phone', {\n            rules: [{ required: true, message: 'Please input your phone number!' }],\n          })(\n            <Input addonBefore={prefixSelector} style={{ width: '100%' }} />\n          )}\n        </FormItem>\n        <FormItem\n          {...formItemLayout}\n          label=\"Website\"\n        >\n          {getFieldDecorator('website', {\n            rules: [{ required: true, message: 'Please input website!' }],\n          })(\n            <AutoComplete\n              dataSource={websiteOptions}\n              onChange={this.handleWebsiteChange}\n              placeholder=\"website\"\n            >\n              <Input />\n            </AutoComplete>\n          )}\n        </FormItem>\n        <FormItem\n          {...formItemLayout}\n          label=\"Captcha\"\n          extra=\"We must make sure that your are a human.\"\n        >\n          <Row gutter={8}>\n            <Col span={12}>\n              {getFieldDecorator('captcha', {\n                rules: [{ required: true, message: 'Please input the captcha you got!' }],\n              })(\n                <Input size=\"large\" />\n              )}\n            </Col>\n            <Col span={12}>\n              <Button size=\"large\">Get captcha</Button>\n            </Col>\n          </Row>\n        </FormItem>\n        <FormItem {...tailFormItemLayout} style={{ marginBottom: 8 }}>\n          {getFieldDecorator('agreement', {\n            valuePropName: 'checked',\n          })(\n            <Checkbox>I have read the <a href=\"\">agreement</a></Checkbox>\n          )}\n        </FormItem>\n        <FormItem {...tailFormItemLayout}>\n          <Button type=\"primary\" htmlType=\"submit\" size=\"large\">Register</Button>\n        </FormItem>\n      </Form>\n    );\n  }\n}\n\nconst WrappedRegistrationForm = Form.create()(RegistrationForm);\n\nexport default function DemoComponent_form_register() {\nreturn(<WrappedRegistrationForm />);\n};\n\nexport const demo = <DemoComponent_form_register key=\"DemoComponent_form_register\" />;\n"],"cssCodes":[]},{"name":"time_related_controls","content":"---\norder: 6\ntitle:\n  zh-CN: 时间类控件\n  en-US: Time-related Controls\n---\n\n## zh-CN\n\n`antd@2.0` 之后，时间类组件的 `value` 改为 `moment` 类型，所以在提交前需要预处理。\n\n## en-US\n\nAfter `antd@2.0`, the `value` of time-related components had been changed to `moment`. So, we need to pre-process those values.\n\n````jsx\nimport { Form, DatePicker, TimePicker, Button } from 'antd';\nconst FormItem = Form.Item;\nconst MonthPicker = DatePicker.MonthPicker;\nconst RangePicker = DatePicker.RangePicker;\n\nclass TimeRelatedForm extends React.Component {\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    this.props.form.validateFields((err, fieldsValue) => {\n      if (err) {\n        return;\n      }\n\n      // Should format date value before submit.\n      const rangeValue = fieldsValue['range-picker'];\n      const rangeTimeValue = fieldsValue['range-time-picker'];\n      const values = {\n        ...fieldsValue,\n        'date-picker': fieldsValue['date-picker'].format('YYYY-MM-DD'),\n        'date-time-picker': fieldsValue['date-time-picker'].format('YYYY-MM-DD HH:mm:ss'),\n        'month-picker': fieldsValue['month-picker'].format('YYYY-MM'),\n        'range-picker': [rangeValue[0].format('YYYY-MM-DD'), rangeValue[1].format('YYYY-MM-DD')],\n        'range-time-picker': [\n          rangeTimeValue[0].format('YYYY-MM-DD HH:mm:ss'),\n          rangeTimeValue[1].format('YYYY-MM-DD HH:mm:ss'),\n        ],\n        'time-picker': fieldsValue['time-picker'].format('HH:mm:ss'),\n      };\n      console.log('Received values of form: ', values);\n    });\n  }\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 8 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 16 },\n      },\n    };\n    const config = {\n      rules: [{ type: 'object', required: true, message: 'Please select time!' }],\n    };\n    const rangeConfig = {\n      rules: [{ type: 'array', required: true, message: 'Please select time!' }],\n    };\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        <FormItem\n          {...formItemLayout}\n          label=\"DatePicker\"\n        >\n          {getFieldDecorator('date-picker', config)(\n            <DatePicker />\n          )}\n        </FormItem>\n        <FormItem\n          {...formItemLayout}\n          label=\"DatePicker[showTime]\"\n        >\n          {getFieldDecorator('date-time-picker', config)(\n            <DatePicker showTime format=\"YYYY-MM-DD HH:mm:ss\" />\n          )}\n        </FormItem>\n        <FormItem\n          {...formItemLayout}\n          label=\"MonthPicker\"\n        >\n          {getFieldDecorator('month-picker', config)(\n            <MonthPicker />\n          )}\n        </FormItem>\n        <FormItem\n          {...formItemLayout}\n          label=\"RangePicker\"\n        >\n          {getFieldDecorator('range-picker', rangeConfig)(\n            <RangePicker />\n          )}\n        </FormItem>\n        <FormItem\n          {...formItemLayout}\n          label=\"RangePicker[showTime]\"\n        >\n          {getFieldDecorator('range-time-picker', rangeConfig)(\n            <RangePicker showTime format=\"YYYY-MM-DD HH:mm:ss\" />\n          )}\n        </FormItem>\n        <FormItem\n          {...formItemLayout}\n          label=\"TimePicker\"\n        >\n          {getFieldDecorator('time-picker', config)(\n            <TimePicker />\n          )}\n        </FormItem>\n        <FormItem\n          wrapperCol={{\n            xs: { span: 24, offset: 0 },\n            sm: { span: 16, offset: 8 },\n          }}\n        >\n          <Button type=\"primary\" htmlType=\"submit\" size=\"large\">Submit</Button>\n        </FormItem>\n      </Form>\n    );\n  }\n}\n\nconst WrappedTimeRelatedForm = Form.create()(TimeRelatedForm);\n\nReactDOM.render(<WrappedTimeRelatedForm />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Form, DatePicker, TimePicker, Button } from 'antd';\nconst FormItem = Form.Item;\nconst MonthPicker = DatePicker.MonthPicker;\nconst RangePicker = DatePicker.RangePicker;\n\nclass TimeRelatedForm extends React.Component {\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    this.props.form.validateFields((err, fieldsValue) => {\n      if (err) {\n        return;\n      }\n\n      // Should format date value before submit.\n      const rangeValue = fieldsValue['range-picker'];\n      const rangeTimeValue = fieldsValue['range-time-picker'];\n      const values = {\n        ...fieldsValue,\n        'date-picker': fieldsValue['date-picker'].format('YYYY-MM-DD'),\n        'date-time-picker': fieldsValue['date-time-picker'].format('YYYY-MM-DD HH:mm:ss'),\n        'month-picker': fieldsValue['month-picker'].format('YYYY-MM'),\n        'range-picker': [rangeValue[0].format('YYYY-MM-DD'), rangeValue[1].format('YYYY-MM-DD')],\n        'range-time-picker': [\n          rangeTimeValue[0].format('YYYY-MM-DD HH:mm:ss'),\n          rangeTimeValue[1].format('YYYY-MM-DD HH:mm:ss'),\n        ],\n        'time-picker': fieldsValue['time-picker'].format('HH:mm:ss'),\n      };\n      console.log('Received values of form: ', values);\n    });\n  }\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 8 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 16 },\n      },\n    };\n    const config = {\n      rules: [{ type: 'object', required: true, message: 'Please select time!' }],\n    };\n    const rangeConfig = {\n      rules: [{ type: 'array', required: true, message: 'Please select time!' }],\n    };\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        <FormItem\n          {...formItemLayout}\n          label=\"DatePicker\"\n        >\n          {getFieldDecorator('date-picker', config)(\n            <DatePicker />\n          )}\n        </FormItem>\n        <FormItem\n          {...formItemLayout}\n          label=\"DatePicker[showTime]\"\n        >\n          {getFieldDecorator('date-time-picker', config)(\n            <DatePicker showTime format=\"YYYY-MM-DD HH:mm:ss\" />\n          )}\n        </FormItem>\n        <FormItem\n          {...formItemLayout}\n          label=\"MonthPicker\"\n        >\n          {getFieldDecorator('month-picker', config)(\n            <MonthPicker />\n          )}\n        </FormItem>\n        <FormItem\n          {...formItemLayout}\n          label=\"RangePicker\"\n        >\n          {getFieldDecorator('range-picker', rangeConfig)(\n            <RangePicker />\n          )}\n        </FormItem>\n        <FormItem\n          {...formItemLayout}\n          label=\"RangePicker[showTime]\"\n        >\n          {getFieldDecorator('range-time-picker', rangeConfig)(\n            <RangePicker showTime format=\"YYYY-MM-DD HH:mm:ss\" />\n          )}\n        </FormItem>\n        <FormItem\n          {...formItemLayout}\n          label=\"TimePicker\"\n        >\n          {getFieldDecorator('time-picker', config)(\n            <TimePicker />\n          )}\n        </FormItem>\n        <FormItem\n          wrapperCol={{\n            xs: { span: 24, offset: 0 },\n            sm: { span: 16, offset: 8 },\n          }}\n        >\n          <Button type=\"primary\" htmlType=\"submit\" size=\"large\">Submit</Button>\n        </FormItem>\n      </Form>\n    );\n  }\n}\n\nconst WrappedTimeRelatedForm = Form.create()(TimeRelatedForm);\n\nexport default function DemoComponent_form_time_related_controls() {\nreturn(<WrappedTimeRelatedForm />);\n};\n\nexport const demo = <DemoComponent_form_time_related_controls key=\"DemoComponent_form_time_related_controls\" />;\n"],"cssCodes":[]},{"name":"validate_other","content":"---\norder: 14\ntitle:\n  zh-CN: 校验其他组件\n  en-US: Other Form Controls\n---\n\n## zh-CN\n\n以上演示没有出现的表单控件对应的校验演示。\n\n## en-US\n\nDemostration for validataion configuration for form controls which are not show in the above demos.\n\n````jsx\nimport {\n  Form, Select, InputNumber, Switch, Radio,\n  Slider, Button, Upload, Icon,\n} from 'antd';\nconst FormItem = Form.Item;\nconst Option = Select.Option;\nconst RadioButton = Radio.Button;\nconst RadioGroup = Radio.Group;\n\nclass Demo extends React.Component {\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n      }\n    });\n  }\n  normFile = (e) => {\n    console.log('Upload event:', e);\n    if (Array.isArray(e)) {\n      return e;\n    }\n    return e && e.fileList;\n  }\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    const formItemLayout = {\n      labelCol: { span: 6 },\n      wrapperCol: { span: 14 },\n    };\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        <FormItem\n          {...formItemLayout}\n          label=\"Plain Text\"\n        >\n          <span className=\"ant-form-text\">China</span>\n        </FormItem>\n        <FormItem\n          {...formItemLayout}\n          label=\"Select\"\n          hasFeedback\n        >\n          {getFieldDecorator('select', {\n            rules: [\n              { required: true, message: 'Please select your country!' },\n            ],\n          })(\n            <Select placeholder=\"Please select a country\">\n              <Option value=\"china\">China</Option>\n              <Option value=\"use\">U.S.A</Option>\n            </Select>\n          )}\n        </FormItem>\n\n        <FormItem\n          {...formItemLayout}\n          label=\"Select[multiple]\"\n        >\n          {getFieldDecorator('select-multiple', {\n            rules: [\n              { required: true, message: 'Please select your favourite colors!', type: 'array' },\n            ],\n          })(\n            <Select mode=\"multiple\" placeholder=\"Please select favourite colors\">\n              <Option value=\"red\">Red</Option>\n              <Option value=\"green\">Green</Option>\n              <Option value=\"blue\">Blue</Option>\n            </Select>\n          )}\n        </FormItem>\n\n        <FormItem\n          {...formItemLayout}\n          label=\"InputNumber\"\n        >\n          {getFieldDecorator('input-number', { initialValue: 3 })(\n            <InputNumber min={1} max={10} />\n          )}\n          <span className=\"ant-form-text\"> machines</span>\n        </FormItem>\n\n        <FormItem\n          {...formItemLayout}\n          label=\"Switch\"\n        >\n          {getFieldDecorator('switch', { valuePropName: 'checked' })(\n            <Switch />\n          )}\n        </FormItem>\n\n        <FormItem\n          {...formItemLayout}\n          label=\"Slider\"\n        >\n          {getFieldDecorator('slider')(\n            <Slider marks={{ 0: 'A', 20: 'B', 40: 'C', 60: 'D', 80: 'E', 100: 'F' }} />\n          )}\n        </FormItem>\n\n        <FormItem\n          {...formItemLayout}\n          label=\"Radio.Group\"\n        >\n          {getFieldDecorator('radio-group')(\n            <RadioGroup>\n              <Radio value=\"a\">item 1</Radio>\n              <Radio value=\"b\">item 2</Radio>\n              <Radio value=\"c\">item 3</Radio>\n            </RadioGroup>\n          )}\n        </FormItem>\n\n        <FormItem\n          {...formItemLayout}\n          label=\"Radio.Button\"\n        >\n          {getFieldDecorator('radio-button')(\n            <RadioGroup>\n              <RadioButton value=\"a\">item 1</RadioButton>\n              <RadioButton value=\"b\">item 2</RadioButton>\n              <RadioButton value=\"c\">item 3</RadioButton>\n            </RadioGroup>\n          )}\n        </FormItem>\n\n        <FormItem\n          {...formItemLayout}\n          label=\"Upload\"\n          extra=\"longgggggggggggggggggggggggggggggggggg\"\n        >\n          {getFieldDecorator('upload', {\n            valuePropName: 'fileList',\n            getValueFromEvent: this.normFile,\n          })(\n            <Upload name=\"logo\" action=\"/upload.do\" listType=\"picture\">\n              <Button>\n                <Icon type=\"upload\" /> Click to upload\n              </Button>\n            </Upload>\n          )}\n        </FormItem>\n\n        <FormItem\n          {...formItemLayout}\n          label=\"Dragger\"\n        >\n          <div className=\"dropbox\">\n            {getFieldDecorator('dragger', {\n              valuePropName: 'fileList',\n              getValueFromEvent: this.normFile,\n            })(\n              <Upload.Dragger name=\"files\" action=\"/upload.do\">\n                <p className=\"ant-upload-drag-icon\">\n                  <Icon type=\"inbox\" />\n                </p>\n                <p className=\"ant-upload-text\">Click or drag file to this area to upload</p>\n                <p className=\"ant-upload-hint\">Support for a single or bulk upload. Strictly prohibit from uploading company data or other band files</p>\n              </Upload.Dragger>\n            )}\n          </div>\n        </FormItem>\n\n        <FormItem\n          wrapperCol={{ span: 12, offset: 6 }}\n        >\n          <Button type=\"primary\" htmlType=\"submit\">Submit</Button>\n        </FormItem>\n      </Form>\n    );\n  }\n}\n\nconst WrappedDemo = Form.create()(Demo);\n\nReactDOM.render(<WrappedDemo />, mountNode);\n````\n\n````css\n#components-form-demo-validate-other .dropbox {\n  height: 180px;\n  line-height: 1.5;\n}\n````\n","jsCodes":["import React from 'react';\nimport {\n  Form, Select, InputNumber, Switch, Radio,\n  Slider, Button, Upload, Icon,\n} from 'antd';\nconst FormItem = Form.Item;\nconst Option = Select.Option;\nconst RadioButton = Radio.Button;\nconst RadioGroup = Radio.Group;\n\nclass Demo extends React.Component {\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n      }\n    });\n  }\n  normFile = (e) => {\n    console.log('Upload event:', e);\n    if (Array.isArray(e)) {\n      return e;\n    }\n    return e && e.fileList;\n  }\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    const formItemLayout = {\n      labelCol: { span: 6 },\n      wrapperCol: { span: 14 },\n    };\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        <FormItem\n          {...formItemLayout}\n          label=\"Plain Text\"\n        >\n          <span className=\"ant-form-text\">China</span>\n        </FormItem>\n        <FormItem\n          {...formItemLayout}\n          label=\"Select\"\n          hasFeedback\n        >\n          {getFieldDecorator('select', {\n            rules: [\n              { required: true, message: 'Please select your country!' },\n            ],\n          })(\n            <Select placeholder=\"Please select a country\">\n              <Option value=\"china\">China</Option>\n              <Option value=\"use\">U.S.A</Option>\n            </Select>\n          )}\n        </FormItem>\n\n        <FormItem\n          {...formItemLayout}\n          label=\"Select[multiple]\"\n        >\n          {getFieldDecorator('select-multiple', {\n            rules: [\n              { required: true, message: 'Please select your favourite colors!', type: 'array' },\n            ],\n          })(\n            <Select mode=\"multiple\" placeholder=\"Please select favourite colors\">\n              <Option value=\"red\">Red</Option>\n              <Option value=\"green\">Green</Option>\n              <Option value=\"blue\">Blue</Option>\n            </Select>\n          )}\n        </FormItem>\n\n        <FormItem\n          {...formItemLayout}\n          label=\"InputNumber\"\n        >\n          {getFieldDecorator('input-number', { initialValue: 3 })(\n            <InputNumber min={1} max={10} />\n          )}\n          <span className=\"ant-form-text\"> machines</span>\n        </FormItem>\n\n        <FormItem\n          {...formItemLayout}\n          label=\"Switch\"\n        >\n          {getFieldDecorator('switch', { valuePropName: 'checked' })(\n            <Switch />\n          )}\n        </FormItem>\n\n        <FormItem\n          {...formItemLayout}\n          label=\"Slider\"\n        >\n          {getFieldDecorator('slider')(\n            <Slider marks={{ 0: 'A', 20: 'B', 40: 'C', 60: 'D', 80: 'E', 100: 'F' }} />\n          )}\n        </FormItem>\n\n        <FormItem\n          {...formItemLayout}\n          label=\"Radio.Group\"\n        >\n          {getFieldDecorator('radio-group')(\n            <RadioGroup>\n              <Radio value=\"a\">item 1</Radio>\n              <Radio value=\"b\">item 2</Radio>\n              <Radio value=\"c\">item 3</Radio>\n            </RadioGroup>\n          )}\n        </FormItem>\n\n        <FormItem\n          {...formItemLayout}\n          label=\"Radio.Button\"\n        >\n          {getFieldDecorator('radio-button')(\n            <RadioGroup>\n              <RadioButton value=\"a\">item 1</RadioButton>\n              <RadioButton value=\"b\">item 2</RadioButton>\n              <RadioButton value=\"c\">item 3</RadioButton>\n            </RadioGroup>\n          )}\n        </FormItem>\n\n        <FormItem\n          {...formItemLayout}\n          label=\"Upload\"\n          extra=\"longgggggggggggggggggggggggggggggggggg\"\n        >\n          {getFieldDecorator('upload', {\n            valuePropName: 'fileList',\n            getValueFromEvent: this.normFile,\n          })(\n            <Upload name=\"logo\" action=\"/upload.do\" listType=\"picture\">\n              <Button>\n                <Icon type=\"upload\" /> Click to upload\n              </Button>\n            </Upload>\n          )}\n        </FormItem>\n\n        <FormItem\n          {...formItemLayout}\n          label=\"Dragger\"\n        >\n          <div className=\"dropbox\">\n            {getFieldDecorator('dragger', {\n              valuePropName: 'fileList',\n              getValueFromEvent: this.normFile,\n            })(\n              <Upload.Dragger name=\"files\" action=\"/upload.do\">\n                <p className=\"ant-upload-drag-icon\">\n                  <Icon type=\"inbox\" />\n                </p>\n                <p className=\"ant-upload-text\">Click or drag file to this area to upload</p>\n                <p className=\"ant-upload-hint\">Support for a single or bulk upload. Strictly prohibit from uploading company data or other band files</p>\n              </Upload.Dragger>\n            )}\n          </div>\n        </FormItem>\n\n        <FormItem\n          wrapperCol={{ span: 12, offset: 6 }}\n        >\n          <Button type=\"primary\" htmlType=\"submit\">Submit</Button>\n        </FormItem>\n      </Form>\n    );\n  }\n}\n\nconst WrappedDemo = Form.create()(Demo);\n\nexport default function DemoComponent_form_validate_other() {\nreturn(<WrappedDemo />);\n};\n\nexport const demo = <DemoComponent_form_validate_other key=\"DemoComponent_form_validate_other\" />;\n"],"cssCodes":["#components-form-demo-validate-other .dropbox {\n  height: 180px;\n  line-height: 1.5;\n}\n"]},{"name":"validate_static","content":"---\norder: 10\ntitle:\n  zh-CN: 自定义校验\n  en-US: Customized Validation\n---\n\n## zh-CN\n\n我们提供了 `validateStatus` `help` `hasFeedback` 等属性，你可以不需要使用 `Form.create` 和 `getFieldDecorator`，自己定义校验的时机和内容。\n\n1. `validateStatus`: 校验状态，可选 'success', 'warning', 'error', 'validating'。\n2. `hasFeedback`：用于给输入框添加反馈图标。\n3. `help`：设置校验文案。\n\n## en-US\n\nWe provide properties like `validateStatus` `help` `hasFeedback` to customize your own validate status and message, without using `Form.create` and `getFieldDecorator`.\n\n1. `validateStatus`: validate status of form components which could be 'success', 'warning', 'error', 'validating'.\n2. `hasFeedback`: display feed icon of input control\n3. `help`: display validate message.\n\n````jsx\nimport { Form, Input, DatePicker, Col } from 'antd';\nconst FormItem = Form.Item;\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 5 },\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 12 },\n  },\n};\n\nReactDOM.render(\n  <Form>\n    <FormItem\n      {...formItemLayout}\n      label=\"Fail\"\n      validateStatus=\"error\"\n      help=\"Should be combination of numbers & alphabets\"\n    >\n      <Input placeholder=\"unavailable choice\" id=\"error\" />\n    </FormItem>\n\n    <FormItem\n      {...formItemLayout}\n      label=\"Warning\"\n      validateStatus=\"warning\"\n    >\n      <Input placeholder=\"Warning\" id=\"warning\" />\n    </FormItem>\n\n    <FormItem\n      {...formItemLayout}\n      label=\"Validating\"\n      hasFeedback\n      validateStatus=\"validating\"\n      help=\"The information is being validated...\"\n    >\n      <Input placeholder=\"I'm the content is being validated\" id=\"validating\" />\n    </FormItem>\n\n    <FormItem\n      {...formItemLayout}\n      label=\"Success\"\n      hasFeedback\n      validateStatus=\"success\"\n    >\n      <Input placeholder=\"I'm the content\" id=\"success\" />\n    </FormItem>\n\n    <FormItem\n      {...formItemLayout}\n      label=\"Warning\"\n      hasFeedback\n      validateStatus=\"warning\"\n    >\n      <Input placeholder=\"Warning\" id=\"warning\" />\n    </FormItem>\n\n    <FormItem\n      {...formItemLayout}\n      label=\"Fail\"\n      hasFeedback\n      validateStatus=\"error\"\n      help=\"Should be combination of numbers & alphabets\"\n    >\n      <Input placeholder=\"unavailable choice\" id=\"error\" />\n    </FormItem>\n\n    <FormItem\n      label=\"inline\"\n      labelCol={{\n        xs: { span: 24 },\n        sm: { span: 5 },\n      }}\n      wrapperCol={{\n        xs: { span: 24 },\n        sm: { span: 19 },\n      }}\n      help\n    >\n      <Col span={6}>\n        <FormItem validateStatus=\"error\" help=\"Please select the correct date\">\n          <DatePicker />\n        </FormItem>\n      </Col>\n      <Col span={1}>\n        <p className=\"ant-form-split\">-</p>\n      </Col>\n      <Col span={6}>\n        <FormItem>\n          <DatePicker />\n        </FormItem>\n      </Col>\n    </FormItem>\n  </Form>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Form, Input, DatePicker, Col } from 'antd';\nconst FormItem = Form.Item;\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 5 },\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 12 },\n  },\n};\n\nexport default function DemoComponent_form_validate_static() {\nreturn(\n  <Form>\n    <FormItem\n      {...formItemLayout}\n      label=\"Fail\"\n      validateStatus=\"error\"\n      help=\"Should be combination of numbers & alphabets\"\n    >\n      <Input placeholder=\"unavailable choice\" id=\"error\" />\n    </FormItem>\n\n    <FormItem\n      {...formItemLayout}\n      label=\"Warning\"\n      validateStatus=\"warning\"\n    >\n      <Input placeholder=\"Warning\" id=\"warning\" />\n    </FormItem>\n\n    <FormItem\n      {...formItemLayout}\n      label=\"Validating\"\n      hasFeedback\n      validateStatus=\"validating\"\n      help=\"The information is being validated...\"\n    >\n      <Input placeholder=\"I'm the content is being validated\" id=\"validating\" />\n    </FormItem>\n\n    <FormItem\n      {...formItemLayout}\n      label=\"Success\"\n      hasFeedback\n      validateStatus=\"success\"\n    >\n      <Input placeholder=\"I'm the content\" id=\"success\" />\n    </FormItem>\n\n    <FormItem\n      {...formItemLayout}\n      label=\"Warning\"\n      hasFeedback\n      validateStatus=\"warning\"\n    >\n      <Input placeholder=\"Warning\" id=\"warning\" />\n    </FormItem>\n\n    <FormItem\n      {...formItemLayout}\n      label=\"Fail\"\n      hasFeedback\n      validateStatus=\"error\"\n      help=\"Should be combination of numbers & alphabets\"\n    >\n      <Input placeholder=\"unavailable choice\" id=\"error\" />\n    </FormItem>\n\n    <FormItem\n      label=\"inline\"\n      labelCol={{\n        xs: { span: 24 },\n        sm: { span: 5 },\n      }}\n      wrapperCol={{\n        xs: { span: 24 },\n        sm: { span: 19 },\n      }}\n      help\n    >\n      <Col span={6}>\n        <FormItem validateStatus=\"error\" help=\"Please select the correct date\">\n          <DatePicker />\n        </FormItem>\n      </Col>\n      <Col span={1}>\n        <p className=\"ant-form-split\">-</p>\n      </Col>\n      <Col span={6}>\n        <FormItem>\n          <DatePicker />\n        </FormItem>\n      </Col>\n    </FormItem>\n  </Form>\n);\n};\n\nexport const demo = <DemoComponent_form_validate_static key=\"DemoComponent_form_validate_static\" />;\n"],"cssCodes":[]},{"name":"without_form_create","content":"---\norder: 9\ntitle:\n  zh-CN: 自行处理表单数据\n  en-US: Handle Form Data Manually\n---\n\n## zh-CN\n\n使用 `Form.create` 处理后的表单具有自动收集数据并校验的功能，但如果您不需要这个功能，或者默认的行为无法满足业务需求，可以选择不使用 `Form.create` 并自行处理数据。\n\n## en-US\n\n`Form.create` will collect and validate form data automatically. But if you don't need this feature or the default behaviour cannot satisfy your business, you can drop `Form.create` and handle form data manually.\n\n````jsx\nimport { Form, InputNumber } from 'antd';\nconst FormItem = Form.Item;\n\nfunction validatePrimeNumber(number) {\n  if (number === 11) {\n    return {\n      validateStatus: 'success',\n      errorMsg: null,\n    };\n  }\n  return {\n    validateStatus: 'error',\n    errorMsg: 'The prime between 8 and 12 is 11!',\n  };\n}\n\nclass RawForm extends React.Component {\n  state = {\n    number: {\n      value: 11,\n    },\n  };\n  handleNumberChange = (value) => {\n    this.setState({\n      number: {\n        ...validatePrimeNumber(value),\n        value,\n      },\n    });\n  }\n  render() {\n    const formItemLayout = {\n      labelCol: { span: 7 },\n      wrapperCol: { span: 12 },\n    };\n    const number = this.state.number;\n    const tips = 'A prime is a natural number greater than 1 that has no positive divisors other than 1 and itself.';\n    return (\n      <Form>\n        <FormItem\n          {...formItemLayout}\n          label=\"Prime between 8 & 12\"\n          validateStatus={number.validateStatus}\n          help={number.errorMsg || tips}\n        >\n          <InputNumber\n            min={8}\n            max={12}\n            value={number.value}\n            onChange={this.handleNumberChange}\n          />\n        </FormItem>\n      </Form>\n    );\n  }\n}\n\nReactDOM.render(<RawForm />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Form, InputNumber } from 'antd';\nconst FormItem = Form.Item;\n\nfunction validatePrimeNumber(number) {\n  if (number === 11) {\n    return {\n      validateStatus: 'success',\n      errorMsg: null,\n    };\n  }\n  return {\n    validateStatus: 'error',\n    errorMsg: 'The prime between 8 and 12 is 11!',\n  };\n}\n\nclass RawForm extends React.Component {\n  state = {\n    number: {\n      value: 11,\n    },\n  };\n  handleNumberChange = (value) => {\n    this.setState({\n      number: {\n        ...validatePrimeNumber(value),\n        value,\n      },\n    });\n  }\n  render() {\n    const formItemLayout = {\n      labelCol: { span: 7 },\n      wrapperCol: { span: 12 },\n    };\n    const number = this.state.number;\n    const tips = 'A prime is a natural number greater than 1 that has no positive divisors other than 1 and itself.';\n    return (\n      <Form>\n        <FormItem\n          {...formItemLayout}\n          label=\"Prime between 8 & 12\"\n          validateStatus={number.validateStatus}\n          help={number.errorMsg || tips}\n        >\n          <InputNumber\n            min={8}\n            max={12}\n            value={number.value}\n            onChange={this.handleNumberChange}\n          />\n        </FormItem>\n      </Form>\n    );\n  }\n}\n\nexport default function DemoComponent_form_without_form_create() {\nreturn(<RawForm />);\n};\n\nexport const demo = <DemoComponent_form_without_form_create key=\"DemoComponent_form_without_form_create\" />;\n"],"cssCodes":[]}]},{"name":"grid","demos":[{"name":"basic","content":"---\norder: 0\ntitle:\n  zh-CN: 基础栅格\n  en-US: Basic Grid\n---\n\n## zh-CN\n\n从堆叠到水平排列。\n\n使用单一的一组 `Row` 和 `Col` 栅格组件，就可以创建一个基本的栅格系统，所有列（Col）必须放在 `Row` 内。\n\n## en-US\n\nFrom the stack to the horizontal arrangement.\n\nYou can create a basic grid system by using a single set of `Row` and` Col` grid assembly, all of the columns (Col) must be placed in `Row`.\n\n````jsx\nimport { Row, Col } from 'antd';\n\nReactDOM.render(\n  <div>\n    <Row>\n      <Col span={12}>col-12</Col>\n      <Col span={12}>col-12</Col>\n    </Row>\n    <Row>\n      <Col span={8}>col-8</Col>\n      <Col span={8}>col-8</Col>\n      <Col span={8}>col-8</Col>\n    </Row>\n    <Row>\n      <Col span={6}>col-6</Col>\n      <Col span={6}>col-6</Col>\n      <Col span={6}>col-6</Col>\n      <Col span={6}>col-6</Col>\n    </Row>\n  </div>,\n  mountNode\n);\n````\n","jsCodes":["import React from 'react';\nimport { Row, Col } from 'antd';\n\nexport default function DemoComponent_grid_basic() {\nreturn(\n  <div>\n    <Row>\n      <Col span={12}>col-12</Col>\n      <Col span={12}>col-12</Col>\n    </Row>\n    <Row>\n      <Col span={8}>col-8</Col>\n      <Col span={8}>col-8</Col>\n      <Col span={8}>col-8</Col>\n    </Row>\n    <Row>\n      <Col span={6}>col-6</Col>\n      <Col span={6}>col-6</Col>\n      <Col span={6}>col-6</Col>\n      <Col span={6}>col-6</Col>\n    </Row>\n  </div>);\n};\n\nexport const demo = <DemoComponent_grid_basic key=\"DemoComponent_grid_basic\" />;\n"],"cssCodes":[]},{"name":"flex_align","content":"---\norder: 5\ntitle:\n  zh-CN: Flex 对齐\n  en-US: Flex Alignment\n---\n\n## zh-CN\n\nFlex 子元素垂直对齐。\n\n## en-US\n\nFlex child elements vertically aligned.\n\n````jsx\nimport { Row, Col } from 'antd';\n\nconst DemoBox = props => <p className={`height-${props.value}`}>{props.children}</p>;\n\nReactDOM.render(\n  <div>\n    <p>Align Top</p>\n    <Row type=\"flex\" justify=\"center\" align=\"top\">\n      <Col span={4}><DemoBox value={100}>col-4</DemoBox></Col>\n      <Col span={4}><DemoBox value={50}>col-4</DemoBox></Col>\n      <Col span={4}><DemoBox value={120}>col-4</DemoBox></Col>\n      <Col span={4}><DemoBox value={80}>col-4</DemoBox></Col>\n    </Row>\n\n    <p>Align Center</p>\n    <Row type=\"flex\" justify=\"space-around\" align=\"middle\">\n      <Col span={4}><DemoBox value={100}>col-4</DemoBox></Col>\n      <Col span={4}><DemoBox value={50}>col-4</DemoBox></Col>\n      <Col span={4}><DemoBox value={120}>col-4</DemoBox></Col>\n      <Col span={4}><DemoBox value={80}>col-4</DemoBox></Col>\n    </Row>\n\n    <p>Align Bottom</p>\n    <Row type=\"flex\" justify=\"space-between\" align=\"bottom\">\n      <Col span={4}><DemoBox value={100}>col-4</DemoBox></Col>\n      <Col span={4}><DemoBox value={50}>col-4</DemoBox></Col>\n      <Col span={4}><DemoBox value={120}>col-4</DemoBox></Col>\n      <Col span={4}><DemoBox value={80}>col-4</DemoBox></Col>\n    </Row>\n  </div>,\n  mountNode\n);\n````\n","jsCodes":["import React from 'react';\nimport { Row, Col } from 'antd';\n\nconst DemoBox = props => <p className={`height-${props.value}`}>{props.children}</p>;\n\nexport default function DemoComponent_grid_flex_align() {\nreturn(\n  <div>\n    <p>Align Top</p>\n    <Row type=\"flex\" justify=\"center\" align=\"top\">\n      <Col span={4}><DemoBox value={100}>col-4</DemoBox></Col>\n      <Col span={4}><DemoBox value={50}>col-4</DemoBox></Col>\n      <Col span={4}><DemoBox value={120}>col-4</DemoBox></Col>\n      <Col span={4}><DemoBox value={80}>col-4</DemoBox></Col>\n    </Row>\n\n    <p>Align Center</p>\n    <Row type=\"flex\" justify=\"space-around\" align=\"middle\">\n      <Col span={4}><DemoBox value={100}>col-4</DemoBox></Col>\n      <Col span={4}><DemoBox value={50}>col-4</DemoBox></Col>\n      <Col span={4}><DemoBox value={120}>col-4</DemoBox></Col>\n      <Col span={4}><DemoBox value={80}>col-4</DemoBox></Col>\n    </Row>\n\n    <p>Align Bottom</p>\n    <Row type=\"flex\" justify=\"space-between\" align=\"bottom\">\n      <Col span={4}><DemoBox value={100}>col-4</DemoBox></Col>\n      <Col span={4}><DemoBox value={50}>col-4</DemoBox></Col>\n      <Col span={4}><DemoBox value={120}>col-4</DemoBox></Col>\n      <Col span={4}><DemoBox value={80}>col-4</DemoBox></Col>\n    </Row>\n  </div>);\n};\n\nexport const demo = <DemoComponent_grid_flex_align key=\"DemoComponent_grid_flex_align\" />;\n"],"cssCodes":[]},{"name":"flex_order","content":"---\norder: 6\ntitle: \n  zh-CN: Flex 排序\n  en-US: Flex Order\n---\n\n## zh-CN\n\n通过 Flex 布局的 Order 来改变元素的排序。\n\n## en-US\n\nTo change the element sort by Flex layout order.\n\n````jsx\nimport { Row, Col } from 'antd';\n\nReactDOM.render(\n  <div>\n    <Row type=\"flex\">\n      <Col span={6} order={4}>1 col-order-4</Col>\n      <Col span={6} order={3}>2 col-order-3</Col>\n      <Col span={6} order={2}>3 col-order-2</Col>\n      <Col span={6} order={1}>4 col-order-1</Col>\n    </Row>\n  </div>,\n  mountNode\n);\n````\n","jsCodes":["import React from 'react';\nimport { Row, Col } from 'antd';\n\nexport default function DemoComponent_grid_flex_order() {\nreturn(\n  <div>\n    <Row type=\"flex\">\n      <Col span={6} order={4}>1 col-order-4</Col>\n      <Col span={6} order={3}>2 col-order-3</Col>\n      <Col span={6} order={2}>3 col-order-2</Col>\n      <Col span={6} order={1}>4 col-order-1</Col>\n    </Row>\n  </div>);\n};\n\nexport const demo = <DemoComponent_grid_flex_order key=\"DemoComponent_grid_flex_order\" />;\n"],"cssCodes":[]},{"name":"flex","content":"---\norder: 4\ntitle:\n  zh-CN: Flex 布局\n  en-US: Flex Layout\n---\n\n## zh-CN\n\nFlex 布局基础。\n\n使用 `row-flex` 定义 `flex` 布局，其子元素根据不同的值 `start`,`center`,`end`,`space-between`,`space-around`，分别定义其在父节点里面的排版方式。\n\n## en-US\n\nUse `row-flex` define` flex` layout, its child elements depending on the value of the `start`,` center`, `end`,` space-between`, `space-around`, which are defined in its parent node layout mode.\n\n````jsx\nimport { Row, Col } from 'antd';\n\nReactDOM.render(\n  <div>\n    <p>sub-element align left</p>\n    <Row type=\"flex\" justify=\"start\">\n      <Col span={4}>col-4</Col>\n      <Col span={4}>col-4</Col>\n      <Col span={4}>col-4</Col>\n      <Col span={4}>col-4</Col>\n    </Row>\n\n    <p>sub-element align center</p>\n    <Row type=\"flex\" justify=\"center\">\n      <Col span={4}>col-4</Col>\n      <Col span={4}>col-4</Col>\n      <Col span={4}>col-4</Col>\n      <Col span={4}>col-4</Col>\n    </Row>\n\n    <p>sub-element align right</p>\n    <Row type=\"flex\" justify=\"end\">\n      <Col span={4}>col-4</Col>\n      <Col span={4}>col-4</Col>\n      <Col span={4}>col-4</Col>\n      <Col span={4}>col-4</Col>\n    </Row>\n\n    <p>sub-element monospaced arrangement</p>\n    <Row type=\"flex\" justify=\"space-between\">\n      <Col span={4}>col-4</Col>\n      <Col span={4}>col-4</Col>\n      <Col span={4}>col-4</Col>\n      <Col span={4}>col-4</Col>\n    </Row>\n\n    <p>sub-element align full</p>\n    <Row type=\"flex\" justify=\"space-around\">\n      <Col span={4}>col-4</Col>\n      <Col span={4}>col-4</Col>\n      <Col span={4}>col-4</Col>\n      <Col span={4}>col-4</Col>\n    </Row>\n  </div>,\n  mountNode\n);\n````\n","jsCodes":["import React from 'react';\nimport { Row, Col } from 'antd';\n\nexport default function DemoComponent_grid_flex() {\nreturn(\n  <div>\n    <p>sub-element align left</p>\n    <Row type=\"flex\" justify=\"start\">\n      <Col span={4}>col-4</Col>\n      <Col span={4}>col-4</Col>\n      <Col span={4}>col-4</Col>\n      <Col span={4}>col-4</Col>\n    </Row>\n\n    <p>sub-element align center</p>\n    <Row type=\"flex\" justify=\"center\">\n      <Col span={4}>col-4</Col>\n      <Col span={4}>col-4</Col>\n      <Col span={4}>col-4</Col>\n      <Col span={4}>col-4</Col>\n    </Row>\n\n    <p>sub-element align right</p>\n    <Row type=\"flex\" justify=\"end\">\n      <Col span={4}>col-4</Col>\n      <Col span={4}>col-4</Col>\n      <Col span={4}>col-4</Col>\n      <Col span={4}>col-4</Col>\n    </Row>\n\n    <p>sub-element monospaced arrangement</p>\n    <Row type=\"flex\" justify=\"space-between\">\n      <Col span={4}>col-4</Col>\n      <Col span={4}>col-4</Col>\n      <Col span={4}>col-4</Col>\n      <Col span={4}>col-4</Col>\n    </Row>\n\n    <p>sub-element align full</p>\n    <Row type=\"flex\" justify=\"space-around\">\n      <Col span={4}>col-4</Col>\n      <Col span={4}>col-4</Col>\n      <Col span={4}>col-4</Col>\n      <Col span={4}>col-4</Col>\n    </Row>\n  </div>);\n};\n\nexport const demo = <DemoComponent_grid_flex key=\"DemoComponent_grid_flex\" />;\n"],"cssCodes":[]},{"name":"gutter","content":"---\norder: 1\ntitle:\n  zh-CN: 区块间隔\n  en-US: Grid Gutter\n---\n\n## zh-CN\n\n栅格常常需要和间隔进行配合，你可以使用 `Row` 的 `gutter` 属性，我们推荐使用 `(16+8n)px` 作为栅格间隔。\n\n## en-US\n\nYou can use the `gutter` property of `Row` as grid spacing, we recommend set it to `(16 + 8n) px`.\n\n````jsx\nimport { Row, Col } from 'antd';\n\nReactDOM.render(\n  <div className=\"gutter-example\">\n    <Row gutter={16}>\n      <Col className=\"gutter-row\" span={6}>\n        <div className=\"gutter-box\">col-6</div>\n      </Col>\n      <Col className=\"gutter-row\" span={6}>\n        <div className=\"gutter-box\">col-6</div>\n      </Col>\n      <Col className=\"gutter-row\" span={6}>\n        <div className=\"gutter-box\">col-6</div>\n      </Col>\n      <Col className=\"gutter-row\" span={6}>\n        <div className=\"gutter-box\">col-6</div>\n      </Col>\n    </Row>\n  </div>\n, mountNode);\n````\n\n````css\n.gutter-example .ant-row > div {\n  background: transparent;\n  border: 0;\n}\n.gutter-box {\n  background: #00A0E9;\n  padding: 5px 0;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Row, Col } from 'antd';\n\nexport default function DemoComponent_grid_gutter() {\nreturn(\n  <div className=\"gutter-example\">\n    <Row gutter={16}>\n      <Col className=\"gutter-row\" span={6}>\n        <div className=\"gutter-box\">col-6</div>\n      </Col>\n      <Col className=\"gutter-row\" span={6}>\n        <div className=\"gutter-box\">col-6</div>\n      </Col>\n      <Col className=\"gutter-row\" span={6}>\n        <div className=\"gutter-box\">col-6</div>\n      </Col>\n      <Col className=\"gutter-row\" span={6}>\n        <div className=\"gutter-box\">col-6</div>\n      </Col>\n    </Row>\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_grid_gutter key=\"DemoComponent_grid_gutter\" />;\n"],"cssCodes":[".gutter-example .ant-row > div {\n  background: transparent;\n  border: 0;\n}\n.gutter-box {\n  background: #00A0E9;\n  padding: 5px 0;\n}\n"]},{"name":"offset","content":"---\norder: 2\ntitle:\n  zh-CN: 左右偏移\n  en-US: Column offset\n---\n\n## zh-CN\n\n列偏移。\n\n使用 `offset` 可以将列向右侧偏。例如，`offset={4}` 将元素向右侧偏移了 4 个列（column）的宽度。\n\n## en-US\n\n`Offset` can set the column to the right side. For example, using `offset = {4}` can set the element shifted to the right four columns width.\n\n````jsx\nimport { Row, Col } from 'antd';\n\nReactDOM.render(\n  <div>\n    <Row>\n      <Col span={8}>col-8</Col>\n      <Col span={8} offset={8}>col-8</Col>\n    </Row>\n    <Row>\n      <Col span={6} offset={6}>col-6 col-offset-6</Col>\n      <Col span={6} offset={6}>col-6 col-offset-6</Col>\n    </Row>\n    <Row>\n      <Col span={12} offset={6}>col-12 col-offset-6</Col>\n    </Row>\n  </div>,\n  mountNode\n);\n````\n","jsCodes":["import React from 'react';\nimport { Row, Col } from 'antd';\n\nexport default function DemoComponent_grid_offset() {\nreturn(\n  <div>\n    <Row>\n      <Col span={8}>col-8</Col>\n      <Col span={8} offset={8}>col-8</Col>\n    </Row>\n    <Row>\n      <Col span={6} offset={6}>col-6 col-offset-6</Col>\n      <Col span={6} offset={6}>col-6 col-offset-6</Col>\n    </Row>\n    <Row>\n      <Col span={12} offset={6}>col-12 col-offset-6</Col>\n    </Row>\n  </div>);\n};\n\nexport const demo = <DemoComponent_grid_offset key=\"DemoComponent_grid_offset\" />;\n"],"cssCodes":[]},{"name":"playground","content":"---\norder: 9\ntitle:\n  zh-CN: 栅格配置器\n  en-US: Playground\n---\n\n## zh-CN\n\n可以简单配置几种等分栅格和间距。\n\n## en-US\n\nA simple playground for column count and gutter.\n\n````jsx\nimport { Row, Col, Slider } from 'antd';\n\nclass App extends React.Component {\n  gutters = {};\n  colCounts = {};\n  constructor() {\n    super();\n    this.state = {\n      gutterKey: 1,\n      colCountKey: 2,\n    };\n    [8, 16, 24, 32, 40, 48].forEach((value, i) => { this.gutters[i] = value; });\n    [2, 3, 4, 6, 8, 12].forEach((value, i) => { this.colCounts[i] = value; });\n  }\n  onGutterChange = (gutterKey) => {\n    this.setState({ gutterKey });\n  }\n  onColCountChange = (colCountKey) => {\n    this.setState({ colCountKey });\n  }\n  render() {\n    const { gutterKey, colCountKey } = this.state;\n    const cols = [];\n    const colCount = this.colCounts[colCountKey];\n    let colCode = '';\n    for (let i = 0; i < colCount; i++) {\n      cols.push(\n        <Col key={i.toString()} span={24 / colCount}>\n          <div>Column</div>\n        </Col>\n      );\n      colCode += `  <Col span={${24 / colCount}} />\\n`;\n    }\n    return (\n      <div>\n        <div style={{ marginBottom: 16 }}>\n          <span style={{ marginRight: 6 }}>Gutter (px): </span>\n          <div style={{ width: '50%' }}>\n            <Slider\n              min={0}\n              max={Object.keys(this.gutters).length - 1}\n              value={gutterKey}\n              onChange={this.onGutterChange}\n              marks={this.gutters}\n              step={null}\n            />\n          </div>\n          <span style={{ marginRight: 6 }}>Column Count:</span>\n          <div style={{ width: '50%' }}>\n            <Slider\n              min={0}\n              max={Object.keys(this.colCounts).length - 1}\n              value={colCountKey}\n              onChange={this.onColCountChange}\n              marks={this.colCounts}\n              step={null}\n            />\n          </div>\n        </div>\n        <Row gutter={this.gutters[gutterKey]}>{cols}</Row>\n        <pre>{`<Row gutter={${this.gutters[gutterKey]}}>\\n${colCode}</Row>`}</pre>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n````\n\n````css\n#components-grid-demo-playground [class^=\"ant-col-\"] {\n  background: transparent;\n  border: 0;\n}\n#components-grid-demo-playground [class^=\"ant-col-\"] > div {\n  background: #00A0E9;\n  height: 120px;\n  line-height: 120px;\n  font-size: 13px;\n}\n#components-grid-demo-playground pre {\n  background: #f9f9f9;\n  border-radius: 6px;\n  font-size: 13px;\n  padding: 8px 16px;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Row, Col, Slider } from 'antd';\n\nclass App extends React.Component {\n  gutters = {};\n  colCounts = {};\n  constructor() {\n    super();\n    this.state = {\n      gutterKey: 1,\n      colCountKey: 2,\n    };\n    [8, 16, 24, 32, 40, 48].forEach((value, i) => { this.gutters[i] = value; });\n    [2, 3, 4, 6, 8, 12].forEach((value, i) => { this.colCounts[i] = value; });\n  }\n  onGutterChange = (gutterKey) => {\n    this.setState({ gutterKey });\n  }\n  onColCountChange = (colCountKey) => {\n    this.setState({ colCountKey });\n  }\n  render() {\n    const { gutterKey, colCountKey } = this.state;\n    const cols = [];\n    const colCount = this.colCounts[colCountKey];\n    let colCode = '';\n    for (let i = 0; i < colCount; i++) {\n      cols.push(\n        <Col key={i.toString()} span={24 / colCount}>\n          <div>Column</div>\n        </Col>\n      );\n      colCode += `  <Col span={${24 / colCount}} />\\n`;\n    }\n    return (\n      <div>\n        <div style={{ marginBottom: 16 }}>\n          <span style={{ marginRight: 6 }}>Gutter (px): </span>\n          <div style={{ width: '50%' }}>\n            <Slider\n              min={0}\n              max={Object.keys(this.gutters).length - 1}\n              value={gutterKey}\n              onChange={this.onGutterChange}\n              marks={this.gutters}\n              step={null}\n            />\n          </div>\n          <span style={{ marginRight: 6 }}>Column Count:</span>\n          <div style={{ width: '50%' }}>\n            <Slider\n              min={0}\n              max={Object.keys(this.colCounts).length - 1}\n              value={colCountKey}\n              onChange={this.onColCountChange}\n              marks={this.colCounts}\n              step={null}\n            />\n          </div>\n        </div>\n        <Row gutter={this.gutters[gutterKey]}>{cols}</Row>\n        <pre>{`<Row gutter={${this.gutters[gutterKey]}}>\\n${colCode}</Row>`}</pre>\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_grid_playground() {\nreturn(<App />);\n};\n\nexport const demo = <DemoComponent_grid_playground key=\"DemoComponent_grid_playground\" />;\n"],"cssCodes":["#components-grid-demo-playground [class^=\"ant-col-\"] {\n  background: transparent;\n  border: 0;\n}\n#components-grid-demo-playground [class^=\"ant-col-\"] > div {\n  background: #00A0E9;\n  height: 120px;\n  line-height: 120px;\n  font-size: 13px;\n}\n#components-grid-demo-playground pre {\n  background: #f9f9f9;\n  border-radius: 6px;\n  font-size: 13px;\n  padding: 8px 16px;\n}\n"]},{"name":"reponsive_more","content":"---\norder: 8\ntitle:\n  zh-CN: 其他属性的响应式\n  en-US: More responsive\n---\n\n## zh-CN\n\n`span` `pull` `push` `offset` `order` 属性可以通过内嵌到 `xs` `sm` `md` `lg` `xl` 属性中来使用。\n\n其中 `xs={6}` 相当于 `xs={{ span: 6 }}`。\n\n## en-US\n\n`Span` `pull` `push` `offset` `order` property can be embedded into `xs` `sm` `md` `lg` `xl` properties to use,\nwhere `xs = {6}` is equivalent to `xs = {{span: 6}}`.\n\n````jsx\nimport { Row, Col } from 'antd';\n\nReactDOM.render(\n  <Row>\n    <Col xs={{ span: 5, offset: 1 }} lg={{ span: 6, offset: 2 }}>Col</Col>\n    <Col xs={{ span: 11, offset: 1 }} lg={{ span: 6, offset: 2 }}>Col</Col>\n    <Col xs={{ span: 5, offset: 1 }} lg={{ span: 6, offset: 2 }}>Col</Col>\n  </Row>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Row, Col } from 'antd';\n\nexport default function DemoComponent_grid_reponsive_more() {\nreturn(\n  <Row>\n    <Col xs={{ span: 5, offset: 1 }} lg={{ span: 6, offset: 2 }}>Col</Col>\n    <Col xs={{ span: 11, offset: 1 }} lg={{ span: 6, offset: 2 }}>Col</Col>\n    <Col xs={{ span: 5, offset: 1 }} lg={{ span: 6, offset: 2 }}>Col</Col>\n  </Row>\n);\n};\n\nexport const demo = <DemoComponent_grid_reponsive_more key=\"DemoComponent_grid_reponsive_more\" />;\n"],"cssCodes":[]},{"name":"reponsive","content":"---\norder: 7\ntitle:\n  zh-CN: 响应式布局\n  en-US: Responsive\n---\n\n## zh-CN\n\n参照 Bootstrap 的 [响应式设计](http://getbootstrap.com/css/#grid-media-queries)，预设五个响应尺寸：`xs` `sm` `md` `lg` `xl`。\n\n## en-US\n\nReferring to the Bootstrap [responsive design] (http://getbootstrap.com/css/#grid-media-queries), here preset five dimensions: `xs` `sm` `md` `lg` `xl`.\n\n````jsx\nimport { Row, Col } from 'antd';\n\nReactDOM.render(\n  <Row>\n    <Col xs={2} sm={4} md={6} lg={8} xl={10}>Col</Col>\n    <Col xs={20} sm={16} md={12} lg={8} xl={4}>Col</Col>\n    <Col xs={2} sm={4} md={6} lg={8} xl={10}>Col</Col>\n  </Row>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Row, Col } from 'antd';\n\nexport default function DemoComponent_grid_reponsive() {\nreturn(\n  <Row>\n    <Col xs={2} sm={4} md={6} lg={8} xl={10}>Col</Col>\n    <Col xs={20} sm={16} md={12} lg={8} xl={4}>Col</Col>\n    <Col xs={2} sm={4} md={6} lg={8} xl={10}>Col</Col>\n  </Row>\n);\n};\n\nexport const demo = <DemoComponent_grid_reponsive key=\"DemoComponent_grid_reponsive\" />;\n"],"cssCodes":[]},{"name":"sort","content":"---\norder: 3\ntitle:\n  zh-CN: 栅格排序\n  en-US: Grid sort\n---\n\n## zh-CN\n\n列排序。\n\n通过使用 `push` 和 `pull` 类就可以很容易的改变列（column）的顺序。\n\n## en-US\n\nBy using `push` and` pull` class you can easily change column order.\n\n````jsx\nimport { Row, Col } from 'antd';\n\nReactDOM.render(\n  <div>\n    <Row>\n      <Col span={18} push={6}>col-18 col-push-6</Col>\n      <Col span={6} pull={18}>col-6 col-pull-18</Col>\n    </Row>\n  </div>,\n  mountNode\n);\n````\n","jsCodes":["import React from 'react';\nimport { Row, Col } from 'antd';\n\nexport default function DemoComponent_grid_sort() {\nreturn(\n  <div>\n    <Row>\n      <Col span={18} push={6}>col-18 col-push-6</Col>\n      <Col span={6} pull={18}>col-6 col-pull-18</Col>\n    </Row>\n  </div>);\n};\n\nexport const demo = <DemoComponent_grid_sort key=\"DemoComponent_grid_sort\" />;\n"],"cssCodes":[]}]},{"name":"input","demos":[{"name":"addon","content":"---\norder: 2\ntitle:\n    zh-CN: 前置/后置标签\n    en-US: Pre / Post tab\n---\n\n## zh-CN\n\n用于配置一些固定组合。\n\n## en-US\n\nUsing pre & post tabs example.\n\n````jsx\nimport { Input, Select, Icon } from 'antd';\nconst Option = Select.Option;\n\nconst selectBefore = (\n  <Select defaultValue=\"Http://\" style={{ width: 80 }}>\n    <Option value=\"Http://\">Http://</Option>\n    <Option value=\"Https://\">Https://</Option>\n  </Select>\n);\nconst selectAfter = (\n  <Select defaultValue=\".com\" style={{ width: 70 }}>\n    <Option value=\".com\">.com</Option>\n    <Option value=\".jp\">.jp</Option>\n    <Option value=\".cn\">.cn</Option>\n    <Option value=\".org\">.org</Option>\n  </Select>\n);\n\nReactDOM.render(\n  <div>\n    <div style={{ marginBottom: 16 }}>\n      <Input addonBefore=\"Http://\" addonAfter=\".com\" defaultValue=\"mysite\" />\n    </div>\n    <div style={{ marginBottom: 16 }}>\n      <Input addonBefore={selectBefore} addonAfter={selectAfter} defaultValue=\"mysite\" />\n    </div>\n    <div style={{ marginBottom: 16 }}>\n      <Input addonAfter={<Icon type=\"setting\" />} defaultValue=\"mysite\" />\n    </div>\n  </div>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Input, Select, Icon } from 'antd';\nconst Option = Select.Option;\n\nconst selectBefore = (\n  <Select defaultValue=\"Http://\" style={{ width: 80 }}>\n    <Option value=\"Http://\">Http://</Option>\n    <Option value=\"Https://\">Https://</Option>\n  </Select>\n);\nconst selectAfter = (\n  <Select defaultValue=\".com\" style={{ width: 70 }}>\n    <Option value=\".com\">.com</Option>\n    <Option value=\".jp\">.jp</Option>\n    <Option value=\".cn\">.cn</Option>\n    <Option value=\".org\">.org</Option>\n  </Select>\n);\n\nexport default function DemoComponent_input_addon() {\nreturn(\n  <div>\n    <div style={{ marginBottom: 16 }}>\n      <Input addonBefore=\"Http://\" addonAfter=\".com\" defaultValue=\"mysite\" />\n    </div>\n    <div style={{ marginBottom: 16 }}>\n      <Input addonBefore={selectBefore} addonAfter={selectAfter} defaultValue=\"mysite\" />\n    </div>\n    <div style={{ marginBottom: 16 }}>\n      <Input addonAfter={<Icon type=\"setting\" />} defaultValue=\"mysite\" />\n    </div>\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_input_addon key=\"DemoComponent_input_addon\" />;\n"],"cssCodes":[]},{"name":"autosize_textarea","content":"---\norder: 6\ntitle:\n    zh-CN: 适应文本高度的文本域\n    en-US: Autosizing the height to fit the content\n---\n\n## zh-CN\n\n`autosize` 属性适用于 `textarea` 节点，并且只有高度会自动变化。另外 `autosize` 可以设定为一个对象，指定最小行数和最大行数。\n\n## en-US\n\n`autosize` prop for a `textarea` type of `Input` makes the height to automatically adjust based on the content.\nAn options object can be provided to `autosize` to specify the minimum and maximum number of lines the textarea will automatically adjust.\n\n\n````jsx\nimport { Input } from 'antd';\nconst { TextArea } = Input;\n\nReactDOM.render(\n  <div>\n    <TextArea placeholder=\"Autosize height based on content lines\" autosize />\n    <div style={{ margin: '24px 0' }} />\n    <TextArea placeholder=\"Autosize height with minimum and maximum number of lines\" autosize={{ minRows: 2, maxRows: 6 }} />\n  </div>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Input } from 'antd';\nconst { TextArea } = Input;\n\nexport default function DemoComponent_input_autosize_textarea() {\nreturn(\n  <div>\n    <TextArea placeholder=\"Autosize height based on content lines\" autosize />\n    <div style={{ margin: '24px 0' }} />\n    <TextArea placeholder=\"Autosize height with minimum and maximum number of lines\" autosize={{ minRows: 2, maxRows: 6 }} />\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_input_autosize_textarea key=\"DemoComponent_input_autosize_textarea\" />;\n"],"cssCodes":[]},{"name":"basic","content":"---\norder: 0\ntitle:\n    zh-CN: 基本使用\n    en-US: Basic usage\n---\n\n## zh-CN\n\n基本使用。\n\n## en-US\n\nBasic usage example.\n\n````jsx\nimport { Input } from 'antd';\n\nReactDOM.render(<Input placeholder=\"Basic usage\" />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Input } from 'antd';\n\nexport default function DemoComponent_input_basic() {\nreturn(<Input placeholder=\"Basic usage\" />);\n};\n\nexport const demo = <DemoComponent_input_basic key=\"DemoComponent_input_basic\" />;\n"],"cssCodes":[]},{"name":"group","content":"---\norder: 3\ntitle:\n    zh-CN: 输入框组合\n    en-US: Input Group\n---\n\n## zh-CN\n\n输入框的组合展现。\n\n注意：使用 `compact` 模式时，不需要通过 `Col` 来控制宽度。\n\n## en-US\n\nInput.Group example\n\nNote: You don't need `Col` to control the width in the `compact` mode.\n\n````jsx\nimport { Input, Col, Select, InputNumber, DatePicker, AutoComplete, Cascader } from 'antd';\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\nconst options = [{\n  value: 'zhejiang',\n  label: 'Zhejiang',\n  children: [{\n    value: 'hangzhou',\n    label: 'Hangzhou',\n    children: [{\n      value: 'xihu',\n      label: 'West Lake',\n    }],\n  }],\n}, {\n  value: 'jiangsu',\n  label: 'Jiangsu',\n  children: [{\n    value: 'nanjing',\n    label: 'Nanjing',\n    children: [{\n      value: 'zhonghuamen',\n      label: 'Zhong Hua Men',\n    }],\n  }],\n}];\n\nclass CompactDemo extends React.Component {\n  state = {\n    dataSource: [],\n  }\n  handleChange = (value) => {\n    this.setState({\n      dataSource: !value || value.indexOf('@') >= 0 ? [] : [\n        `${value}@gmail.com`,\n        `${value}@163.com`,\n        `${value}@qq.com`,\n      ],\n    });\n  }\n  render() {\n    return (\n      <div>\n        <InputGroup size=\"large\">\n          <Col span={4}>\n            <Input defaultValue=\"0571\" />\n          </Col>\n          <Col span={8}>\n            <Input defaultValue=\"26888888\" />\n          </Col>\n        </InputGroup>\n        <br />\n        <InputGroup compact>\n          <Input style={{ width: '20%' }} defaultValue=\"0571\" />\n          <Input style={{ width: '30%' }} defaultValue=\"26888888\" />\n        </InputGroup>\n        <br />\n        <InputGroup compact>\n          <Select defaultValue=\"Zhejiang\">\n            <Option value=\"Zhejiang\">Zhejiang</Option>\n            <Option value=\"Jiangsu\">Jiangsu</Option>\n          </Select>\n          <Input style={{ width: '50%' }} defaultValue=\"Xihu District, Hangzhou\" />\n        </InputGroup>\n        <br />\n        <InputGroup compact>\n          <Select defaultValue=\"Option1\">\n            <Option value=\"Option1\">Option1</Option>\n            <Option value=\"Option2\">Option2</Option>\n          </Select>\n          <Input style={{ width: '50%' }} defaultValue=\"input content\" />\n          <InputNumber />\n        </InputGroup>\n        <br />\n        <InputGroup compact>\n          <Input style={{ width: '50%' }} defaultValue=\"input content\" />\n          <DatePicker />\n        </InputGroup>\n        <br />\n        <InputGroup compact>\n          <Select defaultValue=\"Option1-1\">\n            <Option value=\"Option1-1\">Option1-1</Option>\n            <Option value=\"Option1-2\">Option1-2</Option>\n          </Select>\n          <Select defaultValue=\"Option2-2\">\n            <Option value=\"Option2-1\">Option2-1</Option>\n            <Option value=\"Option2-2\">Option2-2</Option>\n          </Select>\n        </InputGroup>\n        <br />\n        <InputGroup compact>\n          <Select defaultValue=\"1\">\n            <Option value=\"1\">Between</Option>\n            <Option value=\"2\">Except</Option>\n          </Select>\n          <Input style={{ width: 100, textAlign: 'center' }} placeholder=\"Minimum\" />\n          <Input style={{ width: 24, borderLeft: 0, pointerEvents: 'none' }} placeholder=\"~\" />\n          <Input style={{ width: 100, textAlign: 'center', borderLeft: 0 }} placeholder=\"Maximum\" />\n        </InputGroup>\n        <br />\n        <InputGroup compact>\n          <Select defaultValue=\"Sign Up\">\n            <Option value=\"Sign Up\">Sign Up</Option>\n            <Option value=\"Sign In\">Sign In</Option>\n          </Select>\n          <AutoComplete\n            dataSource={this.state.dataSource}\n            style={{ width: 200 }}\n            onChange={this.handleChange}\n            placeholder=\"Email\"\n          />\n        </InputGroup>\n        <br />\n        <InputGroup compact>\n          <Select style={{ width: '30%' }} defaultValue=\"Home\">\n            <Option value=\"Home\">Home</Option>\n            <Option value=\"Company\">Company</Option>\n          </Select>\n          <Cascader style={{ width: '70%' }} options={options} placeholder=\"Select Address\" />\n        </InputGroup>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<CompactDemo />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Input, Col, Select, InputNumber, DatePicker, AutoComplete, Cascader } from 'antd';\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\nconst options = [{\n  value: 'zhejiang',\n  label: 'Zhejiang',\n  children: [{\n    value: 'hangzhou',\n    label: 'Hangzhou',\n    children: [{\n      value: 'xihu',\n      label: 'West Lake',\n    }],\n  }],\n}, {\n  value: 'jiangsu',\n  label: 'Jiangsu',\n  children: [{\n    value: 'nanjing',\n    label: 'Nanjing',\n    children: [{\n      value: 'zhonghuamen',\n      label: 'Zhong Hua Men',\n    }],\n  }],\n}];\n\nclass CompactDemo extends React.Component {\n  state = {\n    dataSource: [],\n  }\n  handleChange = (value) => {\n    this.setState({\n      dataSource: !value || value.indexOf('@') >= 0 ? [] : [\n        `${value}@gmail.com`,\n        `${value}@163.com`,\n        `${value}@qq.com`,\n      ],\n    });\n  }\n  render() {\n    return (\n      <div>\n        <InputGroup size=\"large\">\n          <Col span={4}>\n            <Input defaultValue=\"0571\" />\n          </Col>\n          <Col span={8}>\n            <Input defaultValue=\"26888888\" />\n          </Col>\n        </InputGroup>\n        <br />\n        <InputGroup compact>\n          <Input style={{ width: '20%' }} defaultValue=\"0571\" />\n          <Input style={{ width: '30%' }} defaultValue=\"26888888\" />\n        </InputGroup>\n        <br />\n        <InputGroup compact>\n          <Select defaultValue=\"Zhejiang\">\n            <Option value=\"Zhejiang\">Zhejiang</Option>\n            <Option value=\"Jiangsu\">Jiangsu</Option>\n          </Select>\n          <Input style={{ width: '50%' }} defaultValue=\"Xihu District, Hangzhou\" />\n        </InputGroup>\n        <br />\n        <InputGroup compact>\n          <Select defaultValue=\"Option1\">\n            <Option value=\"Option1\">Option1</Option>\n            <Option value=\"Option2\">Option2</Option>\n          </Select>\n          <Input style={{ width: '50%' }} defaultValue=\"input content\" />\n          <InputNumber />\n        </InputGroup>\n        <br />\n        <InputGroup compact>\n          <Input style={{ width: '50%' }} defaultValue=\"input content\" />\n          <DatePicker />\n        </InputGroup>\n        <br />\n        <InputGroup compact>\n          <Select defaultValue=\"Option1-1\">\n            <Option value=\"Option1-1\">Option1-1</Option>\n            <Option value=\"Option1-2\">Option1-2</Option>\n          </Select>\n          <Select defaultValue=\"Option2-2\">\n            <Option value=\"Option2-1\">Option2-1</Option>\n            <Option value=\"Option2-2\">Option2-2</Option>\n          </Select>\n        </InputGroup>\n        <br />\n        <InputGroup compact>\n          <Select defaultValue=\"1\">\n            <Option value=\"1\">Between</Option>\n            <Option value=\"2\">Except</Option>\n          </Select>\n          <Input style={{ width: 100, textAlign: 'center' }} placeholder=\"Minimum\" />\n          <Input style={{ width: 24, borderLeft: 0, pointerEvents: 'none' }} placeholder=\"~\" />\n          <Input style={{ width: 100, textAlign: 'center', borderLeft: 0 }} placeholder=\"Maximum\" />\n        </InputGroup>\n        <br />\n        <InputGroup compact>\n          <Select defaultValue=\"Sign Up\">\n            <Option value=\"Sign Up\">Sign Up</Option>\n            <Option value=\"Sign In\">Sign In</Option>\n          </Select>\n          <AutoComplete\n            dataSource={this.state.dataSource}\n            style={{ width: 200 }}\n            onChange={this.handleChange}\n            placeholder=\"Email\"\n          />\n        </InputGroup>\n        <br />\n        <InputGroup compact>\n          <Select style={{ width: '30%' }} defaultValue=\"Home\">\n            <Option value=\"Home\">Home</Option>\n            <Option value=\"Company\">Company</Option>\n          </Select>\n          <Cascader style={{ width: '70%' }} options={options} placeholder=\"Select Address\" />\n        </InputGroup>\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_input_group() {\nreturn(<CompactDemo />);\n};\n\nexport const demo = <DemoComponent_input_group key=\"DemoComponent_input_group\" />;\n"],"cssCodes":[]},{"name":"presuffix","content":"---\norder: 8\ntitle:\n    zh-CN: 前缀和后缀\n    en-US: prefix and suffix\n---\n\n## zh-CN\n\n在输入框上添加前缀或后缀图标。\n\n## en-US\n\nAdd prefix or suffix icons inside input.\n\n````jsx\nimport { Input, Icon } from 'antd';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userName: '',\n    };\n  }\n  emitEmpty = () => {\n    this.userNameInput.focus();\n    this.setState({ userName: '' });\n  }\n  onChangeUserName = (e) => {\n    this.setState({ userName: e.target.value });\n  }\n  render() {\n    const { userName } = this.state;\n    const suffix = userName ? <Icon type=\"close-circle\" onClick={this.emitEmpty} /> : null;\n    return (\n      <Input\n        placeholder=\"Enter your userName\"\n        prefix={<Icon type=\"user\" />}\n        suffix={suffix}\n        value={userName}\n        onChange={this.onChangeUserName}\n        ref={node => this.userNameInput = node}\n      />\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n````\n\n````css\n.anticon-close-circle {\n  cursor: pointer;\n  color: #ccc;\n  transition: color 0.3s;\n  font-size: 12px;\n}\n.anticon-close-circle:hover {\n  color: #999;\n}\n.anticon-close-circle:active {\n  color: #666;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Input, Icon } from 'antd';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userName: '',\n    };\n  }\n  emitEmpty = () => {\n    this.userNameInput.focus();\n    this.setState({ userName: '' });\n  }\n  onChangeUserName = (e) => {\n    this.setState({ userName: e.target.value });\n  }\n  render() {\n    const { userName } = this.state;\n    const suffix = userName ? <Icon type=\"close-circle\" onClick={this.emitEmpty} /> : null;\n    return (\n      <Input\n        placeholder=\"Enter your userName\"\n        prefix={<Icon type=\"user\" />}\n        suffix={suffix}\n        value={userName}\n        onChange={this.onChangeUserName}\n        ref={node => this.userNameInput = node}\n      />\n    );\n  }\n}\n\nexport default function DemoComponent_input_presuffix() {\nreturn(<App />);\n};\n\nexport const demo = <DemoComponent_input_presuffix key=\"DemoComponent_input_presuffix\" />;\n"],"cssCodes":[".anticon-close-circle {\n  cursor: pointer;\n  color: #ccc;\n  transition: color 0.3s;\n  font-size: 12px;\n}\n.anticon-close-circle:hover {\n  color: #999;\n}\n.anticon-close-circle:active {\n  color: #666;\n}\n"]},{"name":"search_input","content":"---\norder: 4\ntitle:\n    zh-CN: 搜索框\n    en-US: Search box\n---\n\n## zh-CN\n\n带有搜索按钮的输入框，`2.5.0` 时新增。\n\n## en-US\n\nExample of creating a search box by grouping a standard input with a search button, added in `2.5.0`.\n\n````jsx\nimport { Input } from 'antd';\nconst Search = Input.Search;\n\nReactDOM.render(\n  <Search\n    placeholder=\"input search text\"\n    style={{ width: 200 }}\n    onSearch={value => console.log(value)}\n  />\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Input } from 'antd';\nconst Search = Input.Search;\n\nexport default function DemoComponent_input_search_input() {\nreturn(\n  <Search\n    placeholder=\"input search text\"\n    style={{ width: 200 }}\n    onSearch={value => console.log(value)}\n  />\n);\n};\n\nexport const demo = <DemoComponent_input_search_input key=\"DemoComponent_input_search_input\" />;\n"],"cssCodes":[]},{"name":"size","content":"---\norder: 1\ntitle: \n    zh-CN: 三种大小\n    en-US: Three sizes of Input\n---\n\n## zh-CN\n\n我们为 `<Input />` 输入框定义了三种尺寸（大、默认、小），高度分别为 `32px`、`28px` 和 `22px`。\n\n注意： 在表单里面，我们只使用大尺寸的输入框。\n\n## en-US\n\nThere are three sizes of an Input box: `large` (32px)、`default` (28px) and `small` (22px). \n\nNote: Inside of forms, only the large size is used.\n\n````jsx\nimport { Input } from 'antd';\n\nReactDOM.render(\n  <div className=\"example-input\">\n    <Input size=\"large\" placeholder=\"large size\" />\n    <Input placeholder=\"default size\" />\n    <Input size=\"small\" placeholder=\"small size\" />\n  </div>\n, mountNode);\n````\n\n````css\n.example-input .ant-input {\n  width: 200px;\n  margin: 0 8px 8px 0;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Input } from 'antd';\n\nexport default function DemoComponent_input_size() {\nreturn(\n  <div className=\"example-input\">\n    <Input size=\"large\" placeholder=\"large size\" />\n    <Input placeholder=\"default size\" />\n    <Input size=\"small\" placeholder=\"small size\" />\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_input_size key=\"DemoComponent_input_size\" />;\n"],"cssCodes":[".example-input .ant-input {\n  width: 200px;\n  margin: 0 8px 8px 0;\n}\n"]},{"name":"textarea","content":"---\norder: 5\ntitle:\n    zh-CN: 文本域\n    en-US: Textarea\n---\n\n## zh-CN\n\n用于多行输入，指定 `type` 为一个特殊的 `textarea`。\n\n## en-US\n\nFor multi-line user input cases, an input whose `type` prop has the value of `\"textarea\"` can be used.\n\n````jsx\nimport { Input } from 'antd';\nconst { TextArea } = Input;\n\nReactDOM.render(<TextArea rows={4} />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Input } from 'antd';\nconst { TextArea } = Input;\n\nexport default function DemoComponent_input_textarea() {\nreturn(<TextArea rows={4} />);\n};\n\nexport const demo = <DemoComponent_input_textarea key=\"DemoComponent_input_textarea\" />;\n"],"cssCodes":[]},{"name":"tooltip","content":"---\norder: 7\ntitle:\n    zh-CN: 输入时格式化展示\n    en-US: Format Tooltip Input\n---\n\n## zh-CN\n\n结合 [Tooltip](/components/tooltip) 组件，实现一个数值输入框，方便内容超长时的全量展现。\n\n## en-US\n\nYou can use the Input in conjunction with [Tooltip](/components/tooltip) component to create a Numeric Input, which can provide a good experience for extra-long content display.\n\n````jsx\nimport { Input, Tooltip } from 'antd';\n\nfunction formatNumber(value) {\n  value += '';\n  const list = value.split('.');\n  const prefix = list[0].charAt(0) === '-' ? '-' : '';\n  let num = prefix ? list[0].slice(1) : list[0];\n  let result = '';\n  while (num.length > 3) {\n    result = `,${num.slice(-3)}${result}`;\n    num = num.slice(0, num.length - 3);\n  }\n  if (num) {\n    result = num + result;\n  }\n  return `${prefix}${result}${list[1] ? `.${list[1]}` : ''}`;\n}\n\nclass NumericInput extends React.Component {\n  onChange = (e) => {\n    const { value } = e.target;\n    const reg = /^-?(0|[1-9][0-9]*)(\\.[0-9]*)?$/;\n    if ((!isNaN(value) && reg.test(value)) || value === '' || value === '-') {\n      this.props.onChange(value);\n    }\n  }\n  // '.' at the end or only '-' in the input box.\n  onBlur = () => {\n    const { value, onBlur, onChange } = this.props;\n    if (value.charAt(value.length - 1) === '.' || value === '-') {\n      onChange({ value: value.slice(0, -1) });\n    }\n    if (onBlur) {\n      onBlur();\n    }\n  }\n  render() {\n    const { value } = this.props;\n    const title = value ? (\n      <span className=\"numeric-input-title\">\n        {value !== '-' ? formatNumber(value) : '-'}\n      </span>\n    ) : 'Input a number';\n    return (\n      <Tooltip\n        trigger={['focus']}\n        title={title}\n        placement=\"topLeft\"\n        overlayClassName=\"numeric-input\"\n      >\n        <Input\n          {...this.props}\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n          placeholder=\"Input a number\"\n          maxLength=\"25\"\n        />\n      </Tooltip>\n    );\n  }\n}\n\nclass NumericInputDemo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: '' };\n  }\n  onChange = (value) => {\n    this.setState({ value });\n  }\n  render() {\n    return <NumericInput style={{ width: 120 }} value={this.state.value} onChange={this.onChange} />;\n  }\n}\n\nReactDOM.render(<NumericInputDemo />, mountNode);\n````\n\n````css\n/* to prevent the arrow overflow the popup container,\nor the height is not enough when content is empty */\n.numeric-input .ant-tooltip-inner {\n  min-width: 32px;\n  min-height: 37px;\n}\n\n.numeric-input .numeric-input-title {\n  font-size: 14px;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Input, Tooltip } from 'antd';\n\nfunction formatNumber(value) {\n  value += '';\n  const list = value.split('.');\n  const prefix = list[0].charAt(0) === '-' ? '-' : '';\n  let num = prefix ? list[0].slice(1) : list[0];\n  let result = '';\n  while (num.length > 3) {\n    result = `,${num.slice(-3)}${result}`;\n    num = num.slice(0, num.length - 3);\n  }\n  if (num) {\n    result = num + result;\n  }\n  return `${prefix}${result}${list[1] ? `.${list[1]}` : ''}`;\n}\n\nclass NumericInput extends React.Component {\n  onChange = (e) => {\n    const { value } = e.target;\n    const reg = /^-?(0|[1-9][0-9]*)(\\.[0-9]*)?$/;\n    if ((!isNaN(value) && reg.test(value)) || value === '' || value === '-') {\n      this.props.onChange(value);\n    }\n  }\n  // '.' at the end or only '-' in the input box.\n  onBlur = () => {\n    const { value, onBlur, onChange } = this.props;\n    if (value.charAt(value.length - 1) === '.' || value === '-') {\n      onChange({ value: value.slice(0, -1) });\n    }\n    if (onBlur) {\n      onBlur();\n    }\n  }\n  render() {\n    const { value } = this.props;\n    const title = value ? (\n      <span className=\"numeric-input-title\">\n        {value !== '-' ? formatNumber(value) : '-'}\n      </span>\n    ) : 'Input a number';\n    return (\n      <Tooltip\n        trigger={['focus']}\n        title={title}\n        placement=\"topLeft\"\n        overlayClassName=\"numeric-input\"\n      >\n        <Input\n          {...this.props}\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n          placeholder=\"Input a number\"\n          maxLength=\"25\"\n        />\n      </Tooltip>\n    );\n  }\n}\n\nclass NumericInputDemo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: '' };\n  }\n  onChange = (value) => {\n    this.setState({ value });\n  }\n  render() {\n    return <NumericInput style={{ width: 120 }} value={this.state.value} onChange={this.onChange} />;\n  }\n}\n\nexport default function DemoComponent_input_tooltip() {\nreturn(<NumericInputDemo />);\n};\n\nexport const demo = <DemoComponent_input_tooltip key=\"DemoComponent_input_tooltip\" />;\n"],"cssCodes":["/* to prevent the arrow overflow the popup container,\nor the height is not enough when content is empty */\n.numeric-input .ant-tooltip-inner {\n  min-width: 32px;\n  min-height: 37px;\n}\n\n.numeric-input .numeric-input-title {\n  font-size: 14px;\n}\n"]}]},{"name":"input_number","demos":[{"name":"basic","content":"---\norder: 0\ntitle:\n    zh-CN: 基本\n    en-US: Basic\n---\n\n## zh-CN\n\n数字输入框。\n\n## en-US\n\nNumeric-only input box.\n\n````jsx\nimport { InputNumber } from 'antd';\n\nfunction onChange(value) {\n  console.log('changed', value);\n}\n\nReactDOM.render(\n  <InputNumber min={1} max={10} defaultValue={3} onChange={onChange} />\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { InputNumber } from 'antd';\n\nfunction onChange(value) {\n  console.log('changed', value);\n}\n\nexport default function DemoComponent_input_number_basic() {\nreturn(\n  <InputNumber min={1} max={10} defaultValue={3} onChange={onChange} />\n);\n};\n\nexport const demo = <DemoComponent_input_number_basic key=\"DemoComponent_input_number_basic\" />;\n"],"cssCodes":[]},{"name":"digit","content":"---\norder: 3\ntitle:\n    zh-CN: 小数\n    en-US: Decimals\n---\n\n## zh-CN\n\n和原生的数字输入框一样，value 的精度由 step 的小数位数决定。\n\n## en-US\n\nA numeric-only input box whose values can be increased or decreased using a decimal step. The number of decimals (also known as precision) is determined by the step prop.\n\n````jsx\nimport { InputNumber } from 'antd';\n\nfunction onChange(value) {\n  console.log('changed', value);\n}\n\nReactDOM.render(\n  <InputNumber min={0} max={10} step={0.1} onChange={onChange} />\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { InputNumber } from 'antd';\n\nfunction onChange(value) {\n  console.log('changed', value);\n}\n\nexport default function DemoComponent_input_number_digit() {\nreturn(\n  <InputNumber min={0} max={10} step={0.1} onChange={onChange} />\n);\n};\n\nexport const demo = <DemoComponent_input_number_digit key=\"DemoComponent_input_number_digit\" />;\n"],"cssCodes":[]},{"name":"disabled","content":"---\norder: 2\ntitle:\n    zh-CN: 不可用\n    en-US: Disabled\n---\n\n## zh-CN\n\n点击按钮切换可用状态。\n\n## en-US\n\nClick the button to toggle between available and disabled states.\n\n````jsx\nimport { InputNumber, Button } from 'antd';\n\nclass App extends React.Component {\n  state = {\n    disabled: true,\n  };\n  toggle = () => {\n    this.setState({\n      disabled: !this.state.disabled,\n    });\n  }\n  render() {\n    return (\n      <div>\n        <InputNumber min={1} max={10} disabled={this.state.disabled} defaultValue={3} />\n        <div style={{ marginTop: 20 }}>\n          <Button onClick={this.toggle} type=\"primary\">Toggle disabled</Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { InputNumber, Button } from 'antd';\n\nclass App extends React.Component {\n  state = {\n    disabled: true,\n  };\n  toggle = () => {\n    this.setState({\n      disabled: !this.state.disabled,\n    });\n  }\n  render() {\n    return (\n      <div>\n        <InputNumber min={1} max={10} disabled={this.state.disabled} defaultValue={3} />\n        <div style={{ marginTop: 20 }}>\n          <Button onClick={this.toggle} type=\"primary\">Toggle disabled</Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_input_number_disabled() {\nreturn(<App />);\n};\n\nexport const demo = <DemoComponent_input_number_disabled key=\"DemoComponent_input_number_disabled\" />;\n"],"cssCodes":[]},{"name":"formatter","content":"---\norder: 4\ntitle:\n    zh-CN: 格式化展示\n    en-US: Formatter\n---\n\n## zh-CN\n\n通过 `formatter` 格式化数字，以展示具有具体含义的数据，往往需要配合 `parser` 一起使用。\n\n## en-US\n\nDisplay value within it's situation with `formatter`, and we usually use `parser` at the same time.\n\n````jsx\nimport { InputNumber } from 'antd';\n\nfunction onChange(value) {\n  console.log('changed', value);\n}\n\nReactDOM.render(\n  <div>\n    <InputNumber\n      defaultValue={1000}\n      formatter={value => `$ ${value.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}`}\n      parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\n      onChange={onChange}\n    />\n    <InputNumber\n      defaultValue={100}\n      min={0}\n      max={100}\n      formatter={value => `${value}%`}\n      parser={value => value.replace('%', '')}\n      onChange={onChange}\n    />\n  </div>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { InputNumber } from 'antd';\n\nfunction onChange(value) {\n  console.log('changed', value);\n}\n\nexport default function DemoComponent_input_number_formatter() {\nreturn(\n  <div>\n    <InputNumber\n      defaultValue={1000}\n      formatter={value => `$ ${value.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}`}\n      parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\n      onChange={onChange}\n    />\n    <InputNumber\n      defaultValue={100}\n      min={0}\n      max={100}\n      formatter={value => `${value}%`}\n      parser={value => value.replace('%', '')}\n      onChange={onChange}\n    />\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_input_number_formatter key=\"DemoComponent_input_number_formatter\" />;\n"],"cssCodes":[]},{"name":"size","content":"---\norder: 1\ntitle: \n    zh-CN: 三种大小\n    en-US: Sizes\n---\n\n## zh-CN\n\n三种大小的数字输入框，当 size 分别为 `large` 和 `small` 时，输入框高度为 `32px` 和 `22px` ，默认高度为 `28px`\n\n## en-US\n\nThere are three sizes available to a numeric input box. By default, the size is `28px`. The two additional sizes are `large` and `small` which means `32px` and `22px`, respectively.\n\n````jsx\nimport { InputNumber } from 'antd';\n\nfunction onChange(value) {\n  console.log('changed', value);\n}\n\nReactDOM.render(\n  <div>\n    <InputNumber size=\"large\" min={1} max={100000} defaultValue={3} onChange={onChange} />\n    <InputNumber min={1} max={100000} defaultValue={3} onChange={onChange} />\n    <InputNumber size=\"small\" min={1} max={100000} defaultValue={3} onChange={onChange} />\n  </div>\n, mountNode);\n````\n\n````css\n.ant-input-number {\n  margin-right: 10px;\n}\n````\n","jsCodes":["import React from 'react';\nimport { InputNumber } from 'antd';\n\nfunction onChange(value) {\n  console.log('changed', value);\n}\n\nexport default function DemoComponent_input_number_size() {\nreturn(\n  <div>\n    <InputNumber size=\"large\" min={1} max={100000} defaultValue={3} onChange={onChange} />\n    <InputNumber min={1} max={100000} defaultValue={3} onChange={onChange} />\n    <InputNumber size=\"small\" min={1} max={100000} defaultValue={3} onChange={onChange} />\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_input_number_size key=\"DemoComponent_input_number_size\" />;\n"],"cssCodes":[".ant-input-number {\n  margin-right: 10px;\n}\n"]}]},{"name":"layout","demos":[{"name":"basic","content":"---\norder: 0\ntitle:\n  zh-CN: 基本结构\n  en-US: Basic Structure\n---\n\n## zh-CN\n\n典型的页面布局。\n\n## en-US\n\nClassic page layouts.\n\n````jsx\nimport { Layout } from 'antd';\nconst { Header, Footer, Sider, Content } = Layout;\n\nReactDOM.render(\n  <div>\n    <Layout>\n      <Header>Header</Header>\n      <Content>Content</Content>\n      <Footer>Footer</Footer>\n    </Layout>\n\n    <Layout>\n      <Header>Header</Header>\n      <Layout>\n        <Sider>Sider</Sider>\n        <Content>Content</Content>\n      </Layout>\n      <Footer>Footer</Footer>\n    </Layout>\n\n    <Layout>\n      <Header>Header</Header>\n      <Layout>\n        <Content>Content</Content>\n        <Sider>Sider</Sider>\n      </Layout>\n      <Footer>Footer</Footer>\n    </Layout>\n\n    <Layout>\n      <Sider>Sider</Sider>\n      <Layout>\n        <Header>Header</Header>\n        <Content>Content</Content>\n        <Footer>Footer</Footer>\n      </Layout>\n    </Layout>\n  </div>\n, mountNode);\n````\n\n<style>\n#components-layout-demo-basic .code-box-demo {\n  text-align: center;\n}\n#components-layout-demo-basic .ant-layout-header,\n#components-layout-demo-basic .ant-layout-footer {\n  background: #7dbcea;\n  color: #fff;\n}\n#components-layout-demo-basic .ant-layout-footer {\n  line-height: 1.5;\n}\n#components-layout-demo-basic .ant-layout-sider {\n  background: #3ba0e9;\n  color: #fff;\n  line-height: 120px;\n}\n#components-layout-demo-basic .ant-layout-content {\n  background: rgba(16, 142, 233, 1);\n  color: #fff;\n  min-height: 120px;\n  line-height: 120px;\n}\n#components-layout-demo-basic > .code-box-demo > div > .ant-layout {\n  margin-bottom: 48px;\n}\n#components-layout-demo-basic > .code-box-demo > div > .ant-layout:last-child {\n  margin: 0;\n}\n</style>\n","jsCodes":["import React from 'react';\nimport { Layout } from 'antd';\nconst { Header, Footer, Sider, Content } = Layout;\n\nexport default function DemoComponent_layout_basic() {\nreturn(\n  <div>\n    <Layout>\n      <Header>Header</Header>\n      <Content>Content</Content>\n      <Footer>Footer</Footer>\n    </Layout>\n\n    <Layout>\n      <Header>Header</Header>\n      <Layout>\n        <Sider>Sider</Sider>\n        <Content>Content</Content>\n      </Layout>\n      <Footer>Footer</Footer>\n    </Layout>\n\n    <Layout>\n      <Header>Header</Header>\n      <Layout>\n        <Content>Content</Content>\n        <Sider>Sider</Sider>\n      </Layout>\n      <Footer>Footer</Footer>\n    </Layout>\n\n    <Layout>\n      <Sider>Sider</Sider>\n      <Layout>\n        <Header>Header</Header>\n        <Content>Content</Content>\n        <Footer>Footer</Footer>\n      </Layout>\n    </Layout>\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_layout_basic key=\"DemoComponent_layout_basic\" />;\n"],"cssCodes":[]},{"name":"custom_trigger","content":"---\norder: 4\ntitle:\n  zh-CN: 自定义触发器\n  en-US: Custom trigger\n---\n\n## zh-CN\n\n要使用自定义触发器，可以设置 `trigger={null}` 来隐藏默认设定。\n\n## en-US\n\nIf you want to use a customized trigger, you can hide the default one by setting `trigger={null}`.\n\n````jsx\nimport { Layout, Menu, Icon } from 'antd';\nconst { Header, Sider, Content } = Layout;\n\nclass SiderDemo extends React.Component {\n  state = {\n    collapsed: false,\n  };\n  toggle = () => {\n    this.setState({\n      collapsed: !this.state.collapsed,\n    });\n  }\n  render() {\n    return (\n      <Layout>\n        <Sider\n          trigger={null}\n          collapsible\n          collapsed={this.state.collapsed}\n        >\n          <div className=\"logo\" />\n          <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\n            <Menu.Item key=\"1\">\n              <Icon type=\"user\" />\n              <span>nav 1</span>\n            </Menu.Item>\n            <Menu.Item key=\"2\">\n              <Icon type=\"video-camera\" />\n              <span>nav 2</span>\n            </Menu.Item>\n            <Menu.Item key=\"3\">\n              <Icon type=\"upload\" />\n              <span>nav 3</span>\n            </Menu.Item>\n          </Menu>\n        </Sider>\n        <Layout>\n          <Header style={{ background: '#fff', padding: 0 }}>\n            <Icon\n              className=\"trigger\"\n              type={this.state.collapsed ? 'menu-unfold' : 'menu-fold'}\n              onClick={this.toggle}\n            />\n          </Header>\n          <Content style={{ margin: '24px 16px', padding: 24, background: '#fff', minHeight: 280 }}>\n            Content\n          </Content>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nReactDOM.render(<SiderDemo />, mountNode);\n````\n\n````css\n#components-layout-demo-custom-trigger .trigger {\n  font-size: 18px;\n  line-height: 64px;\n  padding: 0 16px;\n  cursor: pointer;\n  transition: color .3s;\n}\n\n#components-layout-demo-custom-trigger .trigger:hover {\n  color: #108ee9;\n}\n\n#components-layout-demo-custom-trigger .logo {\n  height: 32px;\n  background: #333;\n  border-radius: 6px;\n  margin: 16px;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Layout, Menu, Icon } from 'antd';\nconst { Header, Sider, Content } = Layout;\n\nclass SiderDemo extends React.Component {\n  state = {\n    collapsed: false,\n  };\n  toggle = () => {\n    this.setState({\n      collapsed: !this.state.collapsed,\n    });\n  }\n  render() {\n    return (\n      <Layout>\n        <Sider\n          trigger={null}\n          collapsible\n          collapsed={this.state.collapsed}\n        >\n          <div className=\"logo\" />\n          <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\n            <Menu.Item key=\"1\">\n              <Icon type=\"user\" />\n              <span>nav 1</span>\n            </Menu.Item>\n            <Menu.Item key=\"2\">\n              <Icon type=\"video-camera\" />\n              <span>nav 2</span>\n            </Menu.Item>\n            <Menu.Item key=\"3\">\n              <Icon type=\"upload\" />\n              <span>nav 3</span>\n            </Menu.Item>\n          </Menu>\n        </Sider>\n        <Layout>\n          <Header style={{ background: '#fff', padding: 0 }}>\n            <Icon\n              className=\"trigger\"\n              type={this.state.collapsed ? 'menu-unfold' : 'menu-fold'}\n              onClick={this.toggle}\n            />\n          </Header>\n          <Content style={{ margin: '24px 16px', padding: 24, background: '#fff', minHeight: 280 }}>\n            Content\n          </Content>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nexport default function DemoComponent_layout_custom_trigger() {\nreturn(<SiderDemo />);\n};\n\nexport const demo = <DemoComponent_layout_custom_trigger key=\"DemoComponent_layout_custom_trigger\" />;\n"],"cssCodes":["#components-layout-demo-custom-trigger .trigger {\n  font-size: 18px;\n  line-height: 64px;\n  padding: 0 16px;\n  cursor: pointer;\n  transition: color .3s;\n}\n\n#components-layout-demo-custom-trigger .trigger:hover {\n  color: #108ee9;\n}\n\n#components-layout-demo-custom-trigger .logo {\n  height: 32px;\n  background: #333;\n  border-radius: 6px;\n  margin: 16px;\n}\n"]},{"name":"fixed_sider","content":"---\norder: 7\niframe: 360\ntitle:\n  zh-CN: 固定侧边栏\n  en-US: Fixed Sider\n---\n\n## zh-CN\n\n当内容较长时，使用固定侧边栏可以提供更好的体验。\n\n## en-US\n\nWhen dealing with long content, a fixed sider can provide a better user experience.\n\n````jsx\nimport { Layout, Menu, Icon } from 'antd';\nconst { Header, Content, Footer, Sider } = Layout;\n\nReactDOM.render(\n  <Layout>\n    <Sider style={{ overflow: 'auto', height: '100vh', position: 'fixed', left: 0 }}>\n      <div className=\"logo\" />\n      <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['4']}>\n        <Menu.Item key=\"1\">\n          <Icon type=\"user\" />\n          <span className=\"nav-text\">nav 1</span>\n        </Menu.Item>\n        <Menu.Item key=\"2\">\n          <Icon type=\"video-camera\" />\n          <span className=\"nav-text\">nav 2</span>\n        </Menu.Item>\n        <Menu.Item key=\"3\">\n          <Icon type=\"upload\" />\n          <span className=\"nav-text\">nav 3</span>\n        </Menu.Item>\n        <Menu.Item key=\"4\">\n          <Icon type=\"bar-chart\" />\n          <span className=\"nav-text\">nav 4</span>\n        </Menu.Item>\n        <Menu.Item key=\"5\">\n          <Icon type=\"cloud-o\" />\n          <span className=\"nav-text\">nav 5</span>\n        </Menu.Item>\n        <Menu.Item key=\"6\">\n          <Icon type=\"appstore-o\" />\n          <span className=\"nav-text\">nav 6</span>\n        </Menu.Item>\n        <Menu.Item key=\"7\">\n          <Icon type=\"team\" />\n          <span className=\"nav-text\">nav 7</span>\n        </Menu.Item>\n        <Menu.Item key=\"8\">\n          <Icon type=\"shop\" />\n          <span className=\"nav-text\">nav 8</span>\n        </Menu.Item>\n      </Menu>\n    </Sider>\n    <Layout style={{ marginLeft: 200 }}>\n      <Header style={{ background: '#fff', padding: 0 }} />\n      <Content style={{ margin: '24px 16px 0', overflow: 'initial' }}>\n        <div style={{ padding: 24, background: '#fff', textAlign: 'center' }}>\n          ...\n          <br />\n          Really\n          <br />...<br />...<br />...<br />\n          long\n          <br />...<br />...<br />...<br />...<br />...<br />...\n          <br />...<br />...<br />...<br />...<br />...<br />...\n          <br />...<br />...<br />...<br />...<br />...<br />...\n          <br />...<br />...<br />...<br />...<br />...<br />...\n          <br />...<br />...<br />...<br />...<br />...<br />...\n          <br />...<br />...<br />...<br />...<br />...<br />...\n          <br />...<br />...<br />...<br />...<br />...<br />\n          content\n        </div>\n      </Content>\n      <Footer style={{ textAlign: 'center' }}>\n        Ant Design ©2016 Created by Ant UED\n      </Footer>\n    </Layout>\n  </Layout>\n, mountNode);\n````\n\n````css\n#components-layout-demo-fixed-sider .logo {\n  height: 32px;\n  background: #333;\n  border-radius: 6px;\n  margin: 16px;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Layout, Menu, Icon } from 'antd';\nconst { Header, Content, Footer, Sider } = Layout;\n\nexport default function DemoComponent_layout_fixed_sider() {\nreturn(\n  <Layout>\n    <Sider style={{ overflow: 'auto', height: '100vh', position: 'fixed', left: 0 }}>\n      <div className=\"logo\" />\n      <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['4']}>\n        <Menu.Item key=\"1\">\n          <Icon type=\"user\" />\n          <span className=\"nav-text\">nav 1</span>\n        </Menu.Item>\n        <Menu.Item key=\"2\">\n          <Icon type=\"video-camera\" />\n          <span className=\"nav-text\">nav 2</span>\n        </Menu.Item>\n        <Menu.Item key=\"3\">\n          <Icon type=\"upload\" />\n          <span className=\"nav-text\">nav 3</span>\n        </Menu.Item>\n        <Menu.Item key=\"4\">\n          <Icon type=\"bar-chart\" />\n          <span className=\"nav-text\">nav 4</span>\n        </Menu.Item>\n        <Menu.Item key=\"5\">\n          <Icon type=\"cloud-o\" />\n          <span className=\"nav-text\">nav 5</span>\n        </Menu.Item>\n        <Menu.Item key=\"6\">\n          <Icon type=\"appstore-o\" />\n          <span className=\"nav-text\">nav 6</span>\n        </Menu.Item>\n        <Menu.Item key=\"7\">\n          <Icon type=\"team\" />\n          <span className=\"nav-text\">nav 7</span>\n        </Menu.Item>\n        <Menu.Item key=\"8\">\n          <Icon type=\"shop\" />\n          <span className=\"nav-text\">nav 8</span>\n        </Menu.Item>\n      </Menu>\n    </Sider>\n    <Layout style={{ marginLeft: 200 }}>\n      <Header style={{ background: '#fff', padding: 0 }} />\n      <Content style={{ margin: '24px 16px 0', overflow: 'initial' }}>\n        <div style={{ padding: 24, background: '#fff', textAlign: 'center' }}>\n          ...\n          <br />\n          Really\n          <br />...<br />...<br />...<br />\n          long\n          <br />...<br />...<br />...<br />...<br />...<br />...\n          <br />...<br />...<br />...<br />...<br />...<br />...\n          <br />...<br />...<br />...<br />...<br />...<br />...\n          <br />...<br />...<br />...<br />...<br />...<br />...\n          <br />...<br />...<br />...<br />...<br />...<br />...\n          <br />...<br />...<br />...<br />...<br />...<br />...\n          <br />...<br />...<br />...<br />...<br />...<br />\n          content\n        </div>\n      </Content>\n      <Footer style={{ textAlign: 'center' }}>\n        Ant Design ©2016 Created by Ant UED\n      </Footer>\n    </Layout>\n  </Layout>\n);\n};\n\nexport const demo = <DemoComponent_layout_fixed_sider key=\"DemoComponent_layout_fixed_sider\" />;\n"],"cssCodes":["#components-layout-demo-fixed-sider .logo {\n  height: 32px;\n  background: #333;\n  border-radius: 6px;\n  margin: 16px;\n}\n"]},{"name":"fixed","content":"---\norder: 6\niframe: 360\ntitle:\n  zh-CN: 固定头部\n  en-US: Fixed Header\n---\n\n## zh-CN\n\n一般用于固定顶部导航，方便页面切换。\n\n## en-US\n\nFixed Header is generally used to fix the top navigation to facilitate page switching.\n\n````jsx\nimport { Layout, Menu, Breadcrumb } from 'antd';\nconst { Header, Content, Footer } = Layout;\n\nReactDOM.render(\n  <Layout>\n    <Header style={{ position: 'fixed', width: '100%' }}>\n      <div className=\"logo\" />\n      <Menu\n        theme=\"dark\"\n        mode=\"horizontal\"\n        defaultSelectedKeys={['2']}\n        style={{ lineHeight: '64px' }}\n      >\n        <Menu.Item key=\"1\">nav 1</Menu.Item>\n        <Menu.Item key=\"2\">nav 2</Menu.Item>\n        <Menu.Item key=\"3\">nav 3</Menu.Item>\n      </Menu>\n    </Header>\n    <Content style={{ padding: '0 50px', marginTop: 64 }}>\n      <Breadcrumb style={{ margin: '12px 0' }}>\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\n        <Breadcrumb.Item>List</Breadcrumb.Item>\n        <Breadcrumb.Item>App</Breadcrumb.Item>\n      </Breadcrumb>\n      <div style={{ background: '#fff', padding: 24, minHeight: 380 }}>Content</div>\n    </Content>\n    <Footer style={{ textAlign: 'center' }}>\n      Ant Design ©2016 Created by Ant UED\n    </Footer>\n  </Layout>\n, mountNode);\n````\n\n````css\n#components-layout-demo-fixed .logo {\n  width: 120px;\n  height: 31px;\n  background: #333;\n  border-radius: 6px;\n  margin: 16px 24px 16px 0;\n  float: left;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Layout, Menu, Breadcrumb } from 'antd';\nconst { Header, Content, Footer } = Layout;\n\nexport default function DemoComponent_layout_fixed() {\nreturn(\n  <Layout>\n    <Header style={{ position: 'fixed', width: '100%' }}>\n      <div className=\"logo\" />\n      <Menu\n        theme=\"dark\"\n        mode=\"horizontal\"\n        defaultSelectedKeys={['2']}\n        style={{ lineHeight: '64px' }}\n      >\n        <Menu.Item key=\"1\">nav 1</Menu.Item>\n        <Menu.Item key=\"2\">nav 2</Menu.Item>\n        <Menu.Item key=\"3\">nav 3</Menu.Item>\n      </Menu>\n    </Header>\n    <Content style={{ padding: '0 50px', marginTop: 64 }}>\n      <Breadcrumb style={{ margin: '12px 0' }}>\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\n        <Breadcrumb.Item>List</Breadcrumb.Item>\n        <Breadcrumb.Item>App</Breadcrumb.Item>\n      </Breadcrumb>\n      <div style={{ background: '#fff', padding: 24, minHeight: 380 }}>Content</div>\n    </Content>\n    <Footer style={{ textAlign: 'center' }}>\n      Ant Design ©2016 Created by Ant UED\n    </Footer>\n  </Layout>\n);\n};\n\nexport const demo = <DemoComponent_layout_fixed key=\"DemoComponent_layout_fixed\" />;\n"],"cssCodes":["#components-layout-demo-fixed .logo {\n  width: 120px;\n  height: 31px;\n  background: #333;\n  border-radius: 6px;\n  margin: 16px 24px 16px 0;\n  float: left;\n}\n"]},{"name":"responsive","content":"---\norder: 5\ntitle:\n  zh-CN: 响应式布局\n  en-US: Responsive\n---\n\n## zh-CN\n\nLayout.Sider 支持响应式布局。\n\n> 说明：配置 `breakpoint` 属性即生效，视窗宽度小于 `breakpoint` 时 Sider 缩小为 `collapsedWidth` 宽度，若将 `collapsedWidth` 设置为零，会出现特殊 trigger。\n\n## en-US\n\nLayout.Sider supports responsive layout.\n\n> Note: You can get a responsive layout by setting `breakpoint`, the Sider will collapse to the width of `collapsedWidth` when window width is below the `breakpoint`. And a special trigger will appear if the `collapsedWidth` is set to `0`.\n\n````jsx\nimport { Layout, Menu, Icon } from 'antd';\nconst { Header, Content, Footer, Sider } = Layout;\n\nReactDOM.render(<Layout>\n  <Sider\n    breakpoint=\"lg\"\n    collapsedWidth=\"0\"\n    onCollapse={(collapsed, type) => { console.log(collapsed, type); }}\n  >\n    <div className=\"logo\" />\n    <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['4']}>\n      <Menu.Item key=\"1\">\n        <Icon type=\"user\" />\n        <span className=\"nav-text\">nav 1</span>\n      </Menu.Item>\n      <Menu.Item key=\"2\">\n        <Icon type=\"video-camera\" />\n        <span className=\"nav-text\">nav 2</span>\n      </Menu.Item>\n      <Menu.Item key=\"3\">\n        <Icon type=\"upload\" />\n        <span className=\"nav-text\">nav 3</span>\n      </Menu.Item>\n      <Menu.Item key=\"4\">\n        <Icon type=\"user\" />\n        <span className=\"nav-text\">nav 4</span>\n      </Menu.Item>\n    </Menu>\n  </Sider>\n  <Layout>\n    <Header style={{ background: '#fff', padding: 0 }} />\n    <Content style={{ margin: '24px 16px 0' }}>\n      <div style={{ padding: 24, background: '#fff', minHeight: 360 }}>\n        content\n      </div>\n    </Content>\n    <Footer style={{ textAlign: 'center' }}>\n      Ant Design ©2016 Created by Ant UED\n    </Footer>\n  </Layout>\n</Layout>, mountNode);\n````\n\n````css\n#components-layout-demo-responsive .logo {\n  height: 32px;\n  background: #333;\n  border-radius: 6px;\n  margin: 16px;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Layout, Menu, Icon } from 'antd';\nconst { Header, Content, Footer, Sider } = Layout;\n\nexport default function DemoComponent_layout_responsive() {\nreturn(<Layout>\n  <Sider\n    breakpoint=\"lg\"\n    collapsedWidth=\"0\"\n    onCollapse={(collapsed, type) => { console.log(collapsed, type); }}\n  >\n    <div className=\"logo\" />\n    <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['4']}>\n      <Menu.Item key=\"1\">\n        <Icon type=\"user\" />\n        <span className=\"nav-text\">nav 1</span>\n      </Menu.Item>\n      <Menu.Item key=\"2\">\n        <Icon type=\"video-camera\" />\n        <span className=\"nav-text\">nav 2</span>\n      </Menu.Item>\n      <Menu.Item key=\"3\">\n        <Icon type=\"upload\" />\n        <span className=\"nav-text\">nav 3</span>\n      </Menu.Item>\n      <Menu.Item key=\"4\">\n        <Icon type=\"user\" />\n        <span className=\"nav-text\">nav 4</span>\n      </Menu.Item>\n    </Menu>\n  </Sider>\n  <Layout>\n    <Header style={{ background: '#fff', padding: 0 }} />\n    <Content style={{ margin: '24px 16px 0' }}>\n      <div style={{ padding: 24, background: '#fff', minHeight: 360 }}>\n        content\n      </div>\n    </Content>\n    <Footer style={{ textAlign: 'center' }}>\n      Ant Design ©2016 Created by Ant UED\n    </Footer>\n  </Layout>\n</Layout>);\n};\n\nexport const demo = <DemoComponent_layout_responsive key=\"DemoComponent_layout_responsive\" />;\n"],"cssCodes":["#components-layout-demo-responsive .logo {\n  height: 32px;\n  background: #333;\n  border-radius: 6px;\n  margin: 16px;\n}\n"]},{"name":"side","content":"---\norder: 3\ntitle:\n  zh-CN: 侧边布局\n  en-US: Sider\n---\n\n## zh-CN\n\n侧边两列式布局。页面横向空间有限时，侧边导航可收起。\n\n侧边导航在页面布局上采用的是左右的结构，一般主导航放置于页面的左侧固定位置，辅助菜单放置于工作区顶部。内容根据浏览器终端进行自适应，能提高横向空间的使用率，但是整个页面排版不稳定。侧边导航的模式层级扩展性强，一、二、三级导航项目可以更为顺畅且具关联性的被展示，同时侧边导航可以固定，使得用户在操作和浏览中可以快速的定位和切换当前位置，有很高的操作效率。但这类导航横向页面内容的空间会被牺牲一部份。\n\n## en-US\n\nTwo-columns layout. The sider menu can be collapsed when horizontal space is limited.\n\nGenerally, the mainnav is placed on the left side of the page, and the secondary menu is placed on the top of the working area. Contents will adapt the layout to the viewing area to improve the horizontal space usage, while the layout of the whole page is not stable.\n\nThe level of the aisde navigation is scalable. The first, second, and third level navigations could be present more fluently and relevantly, and aside navigation can be fixed, allowing the user to quickly switch and spot the current position, improving the user experience. However, this navigation occupies some horizontal space of the contents\n\n````jsx\nimport { Layout, Menu, Breadcrumb, Icon } from 'antd';\nconst { Header, Content, Footer, Sider } = Layout;\nconst SubMenu = Menu.SubMenu;\n\nclass SiderDemo extends React.Component {\n  state = {\n    collapsed: false,\n  };\n  onCollapse = (collapsed) => {\n    console.log(collapsed);\n    this.setState({ collapsed });\n  }\n  render() {\n    return (\n      <Layout>\n        <Sider\n          collapsible\n          collapsed={this.state.collapsed}\n          onCollapse={this.onCollapse}\n        >\n          <div className=\"logo\" />\n          <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\n            <Menu.Item key=\"1\">\n              <Icon type=\"pie-chart\" />\n              <span>Option 1</span>\n            </Menu.Item>\n            <Menu.Item key=\"2\">\n              <Icon type=\"desktop\" />\n              <span>Option 2</span>\n            </Menu.Item>\n            <SubMenu\n              key=\"sub1\"\n              title={<span><Icon type=\"user\" /><span>User</span></span>}\n            >\n              <Menu.Item key=\"3\">Tom</Menu.Item>\n              <Menu.Item key=\"4\">Bill</Menu.Item>\n              <Menu.Item key=\"5\">Alex</Menu.Item>\n            </SubMenu>\n            <SubMenu\n              key=\"sub2\"\n              title={<span><Icon type=\"team\" /><span>Team</span></span>}\n            >\n              <Menu.Item key=\"6\">Team 1</Menu.Item>\n              <Menu.Item key=\"8\">Team 2</Menu.Item>\n            </SubMenu>\n            <Menu.Item key=\"8\">\n              <Icon type=\"file\" />\n              <span>File</span>\n            </Menu.Item>\n          </Menu>\n        </Sider>\n        <Layout>\n          <Header style={{ background: '#fff', padding: 0 }} />\n          <Content style={{ margin: '0 16px' }}>\n            <Breadcrumb style={{ margin: '12px 0' }}>\n              <Breadcrumb.Item>User</Breadcrumb.Item>\n              <Breadcrumb.Item>Bill</Breadcrumb.Item>\n            </Breadcrumb>\n            <div style={{ padding: 24, background: '#fff', minHeight: 360 }}>\n              Bill is a cat.\n            </div>\n          </Content>\n          <Footer style={{ textAlign: 'center' }}>\n            Ant Design ©2016 Created by Ant UED\n          </Footer>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nReactDOM.render(<SiderDemo />, mountNode);\n````\n\n````css\n#components-layout-demo-side .logo {\n  height: 32px;\n  background: #333;\n  border-radius: 6px;\n  margin: 16px;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Layout, Menu, Breadcrumb, Icon } from 'antd';\nconst { Header, Content, Footer, Sider } = Layout;\nconst SubMenu = Menu.SubMenu;\n\nclass SiderDemo extends React.Component {\n  state = {\n    collapsed: false,\n  };\n  onCollapse = (collapsed) => {\n    console.log(collapsed);\n    this.setState({ collapsed });\n  }\n  render() {\n    return (\n      <Layout>\n        <Sider\n          collapsible\n          collapsed={this.state.collapsed}\n          onCollapse={this.onCollapse}\n        >\n          <div className=\"logo\" />\n          <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\n            <Menu.Item key=\"1\">\n              <Icon type=\"pie-chart\" />\n              <span>Option 1</span>\n            </Menu.Item>\n            <Menu.Item key=\"2\">\n              <Icon type=\"desktop\" />\n              <span>Option 2</span>\n            </Menu.Item>\n            <SubMenu\n              key=\"sub1\"\n              title={<span><Icon type=\"user\" /><span>User</span></span>}\n            >\n              <Menu.Item key=\"3\">Tom</Menu.Item>\n              <Menu.Item key=\"4\">Bill</Menu.Item>\n              <Menu.Item key=\"5\">Alex</Menu.Item>\n            </SubMenu>\n            <SubMenu\n              key=\"sub2\"\n              title={<span><Icon type=\"team\" /><span>Team</span></span>}\n            >\n              <Menu.Item key=\"6\">Team 1</Menu.Item>\n              <Menu.Item key=\"8\">Team 2</Menu.Item>\n            </SubMenu>\n            <Menu.Item key=\"8\">\n              <Icon type=\"file\" />\n              <span>File</span>\n            </Menu.Item>\n          </Menu>\n        </Sider>\n        <Layout>\n          <Header style={{ background: '#fff', padding: 0 }} />\n          <Content style={{ margin: '0 16px' }}>\n            <Breadcrumb style={{ margin: '12px 0' }}>\n              <Breadcrumb.Item>User</Breadcrumb.Item>\n              <Breadcrumb.Item>Bill</Breadcrumb.Item>\n            </Breadcrumb>\n            <div style={{ padding: 24, background: '#fff', minHeight: 360 }}>\n              Bill is a cat.\n            </div>\n          </Content>\n          <Footer style={{ textAlign: 'center' }}>\n            Ant Design ©2016 Created by Ant UED\n          </Footer>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nexport default function DemoComponent_layout_side() {\nreturn(<SiderDemo />);\n};\n\nexport const demo = <DemoComponent_layout_side key=\"DemoComponent_layout_side\" />;\n"],"cssCodes":["#components-layout-demo-side .logo {\n  height: 32px;\n  background: #333;\n  border-radius: 6px;\n  margin: 16px;\n}\n"]},{"name":"top_side_2","content":"---\norder: 2\ntitle:\n  zh-CN: 顶部-侧边布局-通栏\n  en-US: Header Sider 2\n---\n\n## zh-CN\n\n同样拥有顶部导航及侧边栏，区别是两边未留边距，多用于应用型的网站。\n\n## en-US\n\nBoth the top navigation and the sidebar, commonly used in application site.\n\n````jsx\nimport { Layout, Menu, Breadcrumb, Icon } from 'antd';\nconst { SubMenu } = Menu;\nconst { Header, Content, Sider } = Layout;\n\nReactDOM.render(\n  <Layout>\n    <Header className=\"header\">\n      <div className=\"logo\" />\n      <Menu\n        theme=\"dark\"\n        mode=\"horizontal\"\n        defaultSelectedKeys={['2']}\n        style={{ lineHeight: '64px' }}\n      >\n        <Menu.Item key=\"1\">nav 1</Menu.Item>\n        <Menu.Item key=\"2\">nav 2</Menu.Item>\n        <Menu.Item key=\"3\">nav 3</Menu.Item>\n      </Menu>\n    </Header>\n    <Layout>\n      <Sider width={200} style={{ background: '#fff' }}>\n        <Menu\n          mode=\"inline\"\n          defaultSelectedKeys={['1']}\n          defaultOpenKeys={['sub1']}\n          style={{ height: '100%', borderRight: 0 }}\n        >\n          <SubMenu key=\"sub1\" title={<span><Icon type=\"user\" />subnav 1</span>}>\n            <Menu.Item key=\"1\">option1</Menu.Item>\n            <Menu.Item key=\"2\">option2</Menu.Item>\n            <Menu.Item key=\"3\">option3</Menu.Item>\n            <Menu.Item key=\"4\">option4</Menu.Item>\n          </SubMenu>\n          <SubMenu key=\"sub2\" title={<span><Icon type=\"laptop\" />subnav 2</span>}>\n            <Menu.Item key=\"5\">option5</Menu.Item>\n            <Menu.Item key=\"6\">option6</Menu.Item>\n            <Menu.Item key=\"7\">option7</Menu.Item>\n            <Menu.Item key=\"8\">option8</Menu.Item>\n          </SubMenu>\n          <SubMenu key=\"sub3\" title={<span><Icon type=\"notification\" />subnav 3</span>}>\n            <Menu.Item key=\"9\">option9</Menu.Item>\n            <Menu.Item key=\"10\">option10</Menu.Item>\n            <Menu.Item key=\"11\">option11</Menu.Item>\n            <Menu.Item key=\"12\">option12</Menu.Item>\n          </SubMenu>\n        </Menu>\n      </Sider>\n      <Layout style={{ padding: '0 24px 24px' }}>\n        <Breadcrumb style={{ margin: '12px 0' }}>\n          <Breadcrumb.Item>Home</Breadcrumb.Item>\n          <Breadcrumb.Item>List</Breadcrumb.Item>\n          <Breadcrumb.Item>App</Breadcrumb.Item>\n        </Breadcrumb>\n        <Content style={{ background: '#fff', padding: 24, margin: 0, minHeight: 280 }}>\n          Content\n        </Content>\n      </Layout>\n    </Layout>\n  </Layout>\n, mountNode);\n````\n\n````css\n#components-layout-demo-top-side-2 .logo {\n  width: 120px;\n  height: 31px;\n  background: #333;\n  border-radius: 6px;\n  margin: 16px 28px 16px 0;\n  float: left;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Layout, Menu, Breadcrumb, Icon } from 'antd';\nconst { SubMenu } = Menu;\nconst { Header, Content, Sider } = Layout;\n\nexport default function DemoComponent_layout_top_side_2() {\nreturn(\n  <Layout>\n    <Header className=\"header\">\n      <div className=\"logo\" />\n      <Menu\n        theme=\"dark\"\n        mode=\"horizontal\"\n        defaultSelectedKeys={['2']}\n        style={{ lineHeight: '64px' }}\n      >\n        <Menu.Item key=\"1\">nav 1</Menu.Item>\n        <Menu.Item key=\"2\">nav 2</Menu.Item>\n        <Menu.Item key=\"3\">nav 3</Menu.Item>\n      </Menu>\n    </Header>\n    <Layout>\n      <Sider width={200} style={{ background: '#fff' }}>\n        <Menu\n          mode=\"inline\"\n          defaultSelectedKeys={['1']}\n          defaultOpenKeys={['sub1']}\n          style={{ height: '100%', borderRight: 0 }}\n        >\n          <SubMenu key=\"sub1\" title={<span><Icon type=\"user\" />subnav 1</span>}>\n            <Menu.Item key=\"1\">option1</Menu.Item>\n            <Menu.Item key=\"2\">option2</Menu.Item>\n            <Menu.Item key=\"3\">option3</Menu.Item>\n            <Menu.Item key=\"4\">option4</Menu.Item>\n          </SubMenu>\n          <SubMenu key=\"sub2\" title={<span><Icon type=\"laptop\" />subnav 2</span>}>\n            <Menu.Item key=\"5\">option5</Menu.Item>\n            <Menu.Item key=\"6\">option6</Menu.Item>\n            <Menu.Item key=\"7\">option7</Menu.Item>\n            <Menu.Item key=\"8\">option8</Menu.Item>\n          </SubMenu>\n          <SubMenu key=\"sub3\" title={<span><Icon type=\"notification\" />subnav 3</span>}>\n            <Menu.Item key=\"9\">option9</Menu.Item>\n            <Menu.Item key=\"10\">option10</Menu.Item>\n            <Menu.Item key=\"11\">option11</Menu.Item>\n            <Menu.Item key=\"12\">option12</Menu.Item>\n          </SubMenu>\n        </Menu>\n      </Sider>\n      <Layout style={{ padding: '0 24px 24px' }}>\n        <Breadcrumb style={{ margin: '12px 0' }}>\n          <Breadcrumb.Item>Home</Breadcrumb.Item>\n          <Breadcrumb.Item>List</Breadcrumb.Item>\n          <Breadcrumb.Item>App</Breadcrumb.Item>\n        </Breadcrumb>\n        <Content style={{ background: '#fff', padding: 24, margin: 0, minHeight: 280 }}>\n          Content\n        </Content>\n      </Layout>\n    </Layout>\n  </Layout>\n);\n};\n\nexport const demo = <DemoComponent_layout_top_side_2 key=\"DemoComponent_layout_top_side_2\" />;\n"],"cssCodes":["#components-layout-demo-top-side-2 .logo {\n  width: 120px;\n  height: 31px;\n  background: #333;\n  border-radius: 6px;\n  margin: 16px 28px 16px 0;\n  float: left;\n}\n"]},{"name":"top_side","content":"---\norder: 2\ntitle:\n  zh-CN: 顶部-侧边布局\n  en-US: Header-Sider\n---\n\n## zh-CN\n\n拥有顶部导航及侧边栏的页面，多用于展示类网站。\n\n## en-US\n\nBoth the top navigation and the sidebar, commonly used in documentation site.\n\n````jsx\nimport { Layout, Menu, Breadcrumb, Icon } from 'antd';\nconst { SubMenu } = Menu;\nconst { Header, Content, Footer, Sider } = Layout;\n\nReactDOM.render(\n  <Layout>\n    <Header className=\"header\">\n      <div className=\"logo\" />\n      <Menu\n        theme=\"dark\"\n        mode=\"horizontal\"\n        defaultSelectedKeys={['2']}\n        style={{ lineHeight: '64px' }}\n      >\n        <Menu.Item key=\"1\">nav 1</Menu.Item>\n        <Menu.Item key=\"2\">nav 2</Menu.Item>\n        <Menu.Item key=\"3\">nav 3</Menu.Item>\n      </Menu>\n    </Header>\n    <Content style={{ padding: '0 50px' }}>\n      <Breadcrumb style={{ margin: '12px 0' }}>\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\n        <Breadcrumb.Item>List</Breadcrumb.Item>\n        <Breadcrumb.Item>App</Breadcrumb.Item>\n      </Breadcrumb>\n      <Layout style={{ padding: '24px 0', background: '#fff' }}>\n        <Sider width={200} style={{ background: '#fff' }}>\n          <Menu\n            mode=\"inline\"\n            defaultSelectedKeys={['1']}\n            defaultOpenKeys={['sub1']}\n            style={{ height: '100%' }}\n          >\n            <SubMenu key=\"sub1\" title={<span><Icon type=\"user\" />subnav 1</span>}>\n              <Menu.Item key=\"1\">option1</Menu.Item>\n              <Menu.Item key=\"2\">option2</Menu.Item>\n              <Menu.Item key=\"3\">option3</Menu.Item>\n              <Menu.Item key=\"4\">option4</Menu.Item>\n            </SubMenu>\n            <SubMenu key=\"sub2\" title={<span><Icon type=\"laptop\" />subnav 2</span>}>\n              <Menu.Item key=\"5\">option5</Menu.Item>\n              <Menu.Item key=\"6\">option6</Menu.Item>\n              <Menu.Item key=\"7\">option7</Menu.Item>\n              <Menu.Item key=\"8\">option8</Menu.Item>\n            </SubMenu>\n            <SubMenu key=\"sub3\" title={<span><Icon type=\"notification\" />subnav 3</span>}>\n              <Menu.Item key=\"9\">option9</Menu.Item>\n              <Menu.Item key=\"10\">option10</Menu.Item>\n              <Menu.Item key=\"11\">option11</Menu.Item>\n              <Menu.Item key=\"12\">option12</Menu.Item>\n            </SubMenu>\n          </Menu>\n        </Sider>\n        <Content style={{ padding: '0 24px', minHeight: 280 }}>\n          Content\n        </Content>\n      </Layout>\n    </Content>\n    <Footer style={{ textAlign: 'center' }}>\n      Ant Design ©2016 Created by Ant UED\n    </Footer>\n  </Layout>\n, mountNode);\n````\n\n````css\n#components-layout-demo-top-side .logo {\n  width: 120px;\n  height: 31px;\n  background: #333;\n  border-radius: 6px;\n  margin: 16px 28px 16px 0;\n  float: left;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Layout, Menu, Breadcrumb, Icon } from 'antd';\nconst { SubMenu } = Menu;\nconst { Header, Content, Footer, Sider } = Layout;\n\nexport default function DemoComponent_layout_top_side() {\nreturn(\n  <Layout>\n    <Header className=\"header\">\n      <div className=\"logo\" />\n      <Menu\n        theme=\"dark\"\n        mode=\"horizontal\"\n        defaultSelectedKeys={['2']}\n        style={{ lineHeight: '64px' }}\n      >\n        <Menu.Item key=\"1\">nav 1</Menu.Item>\n        <Menu.Item key=\"2\">nav 2</Menu.Item>\n        <Menu.Item key=\"3\">nav 3</Menu.Item>\n      </Menu>\n    </Header>\n    <Content style={{ padding: '0 50px' }}>\n      <Breadcrumb style={{ margin: '12px 0' }}>\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\n        <Breadcrumb.Item>List</Breadcrumb.Item>\n        <Breadcrumb.Item>App</Breadcrumb.Item>\n      </Breadcrumb>\n      <Layout style={{ padding: '24px 0', background: '#fff' }}>\n        <Sider width={200} style={{ background: '#fff' }}>\n          <Menu\n            mode=\"inline\"\n            defaultSelectedKeys={['1']}\n            defaultOpenKeys={['sub1']}\n            style={{ height: '100%' }}\n          >\n            <SubMenu key=\"sub1\" title={<span><Icon type=\"user\" />subnav 1</span>}>\n              <Menu.Item key=\"1\">option1</Menu.Item>\n              <Menu.Item key=\"2\">option2</Menu.Item>\n              <Menu.Item key=\"3\">option3</Menu.Item>\n              <Menu.Item key=\"4\">option4</Menu.Item>\n            </SubMenu>\n            <SubMenu key=\"sub2\" title={<span><Icon type=\"laptop\" />subnav 2</span>}>\n              <Menu.Item key=\"5\">option5</Menu.Item>\n              <Menu.Item key=\"6\">option6</Menu.Item>\n              <Menu.Item key=\"7\">option7</Menu.Item>\n              <Menu.Item key=\"8\">option8</Menu.Item>\n            </SubMenu>\n            <SubMenu key=\"sub3\" title={<span><Icon type=\"notification\" />subnav 3</span>}>\n              <Menu.Item key=\"9\">option9</Menu.Item>\n              <Menu.Item key=\"10\">option10</Menu.Item>\n              <Menu.Item key=\"11\">option11</Menu.Item>\n              <Menu.Item key=\"12\">option12</Menu.Item>\n            </SubMenu>\n          </Menu>\n        </Sider>\n        <Content style={{ padding: '0 24px', minHeight: 280 }}>\n          Content\n        </Content>\n      </Layout>\n    </Content>\n    <Footer style={{ textAlign: 'center' }}>\n      Ant Design ©2016 Created by Ant UED\n    </Footer>\n  </Layout>\n);\n};\n\nexport const demo = <DemoComponent_layout_top_side key=\"DemoComponent_layout_top_side\" />;\n"],"cssCodes":["#components-layout-demo-top-side .logo {\n  width: 120px;\n  height: 31px;\n  background: #333;\n  border-radius: 6px;\n  margin: 16px 28px 16px 0;\n  float: left;\n}\n"]},{"name":"top","content":"---\norder: 1\ntitle:\n  zh-CN: 上中下布局\n  en-US: Header-Content-Footer\n---\n\n## zh-CN\n\n最基本的『上-中-下』布局。\n\n一般主导航放置于页面的顶端，从左自右依次为：logo、一级导航项、辅助菜单（用户、设置、通知等）。通常将内容放在固定尺寸（例如：1200px）内，整个页面排版稳定，不受用户终端显示器影响；上下级的结构符合用户上下浏览的习惯，也是较为经典的网站导航模式。页面上下切分的方式提高了主工作区域的信息展示效率，但在纵向空间上会有一些牺牲。此外，由于导航栏水平空间的限制，不适合那些一级导航项很多的信息结构。\n\n## en-US\n\nThe most basic \"header-content-footer\" layout.\n\nGenerally, the mainnav is placed at the top of the page, and includes the logo, the first level navigation, and the secondary menu (users, settings, notifications) from left to right in it.\nWe always put contents in a fixed size navigation (eg: `1200px`), the layout of the whole page is stable, it's not affected by viewing area.\n\nTop-bottom structure is conform with the top-bottom viewing habit, it's a classical navigation pattern of websites. This pattern demonstrates efficiency in the main workarea, while using some vertical space. And because the horizontal space of the navigation is limited, this pattern is not suitable for cases when the first level navigation contains many elements or links\n\n````jsx\nimport { Layout, Menu, Breadcrumb } from 'antd';\nconst { Header, Content, Footer } = Layout;\n\nReactDOM.render(\n  <Layout className=\"layout\">\n    <Header>\n      <div className=\"logo\" />\n      <Menu\n        theme=\"dark\"\n        mode=\"horizontal\"\n        defaultSelectedKeys={['2']}\n        style={{ lineHeight: '64px' }}\n      >\n        <Menu.Item key=\"1\">nav 1</Menu.Item>\n        <Menu.Item key=\"2\">nav 2</Menu.Item>\n        <Menu.Item key=\"3\">nav 3</Menu.Item>\n      </Menu>\n    </Header>\n    <Content style={{ padding: '0 50px' }}>\n      <Breadcrumb style={{ margin: '12px 0' }}>\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\n        <Breadcrumb.Item>List</Breadcrumb.Item>\n        <Breadcrumb.Item>App</Breadcrumb.Item>\n      </Breadcrumb>\n      <div style={{ background: '#fff', padding: 24, minHeight: 280 }}>Content</div>\n    </Content>\n    <Footer style={{ textAlign: 'center' }}>\n      Ant Design ©2016 Created by Ant UED\n    </Footer>\n  </Layout>\n, mountNode);\n````\n\n````css\n#components-layout-demo-top .logo {\n  width: 120px;\n  height: 31px;\n  background: #333;\n  border-radius: 6px;\n  margin: 16px 24px 16px 0;\n  float: left;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Layout, Menu, Breadcrumb } from 'antd';\nconst { Header, Content, Footer } = Layout;\n\nexport default function DemoComponent_layout_top() {\nreturn(\n  <Layout className=\"layout\">\n    <Header>\n      <div className=\"logo\" />\n      <Menu\n        theme=\"dark\"\n        mode=\"horizontal\"\n        defaultSelectedKeys={['2']}\n        style={{ lineHeight: '64px' }}\n      >\n        <Menu.Item key=\"1\">nav 1</Menu.Item>\n        <Menu.Item key=\"2\">nav 2</Menu.Item>\n        <Menu.Item key=\"3\">nav 3</Menu.Item>\n      </Menu>\n    </Header>\n    <Content style={{ padding: '0 50px' }}>\n      <Breadcrumb style={{ margin: '12px 0' }}>\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\n        <Breadcrumb.Item>List</Breadcrumb.Item>\n        <Breadcrumb.Item>App</Breadcrumb.Item>\n      </Breadcrumb>\n      <div style={{ background: '#fff', padding: 24, minHeight: 280 }}>Content</div>\n    </Content>\n    <Footer style={{ textAlign: 'center' }}>\n      Ant Design ©2016 Created by Ant UED\n    </Footer>\n  </Layout>\n);\n};\n\nexport const demo = <DemoComponent_layout_top key=\"DemoComponent_layout_top\" />;\n"],"cssCodes":["#components-layout-demo-top .logo {\n  width: 120px;\n  height: 31px;\n  background: #333;\n  border-radius: 6px;\n  margin: 16px 24px 16px 0;\n  float: left;\n}\n"]}]},{"name":"locale_provider","demos":[{"name":"all","content":"---\norder: 2\ntitle:\n  zh-CN: 所有组件\n  en-US: All components\n---\n\n## zh-CN\n\n此处列出 Ant Design 中需要国际化支持的组件，你可以在演示里切换语言。涉及时间的组件请注意时区设置 [DatePicker](/components/date-picker/#components-date-picker-demo-locale)。\n\n## en-US\n\nComponents which need localization support are listed here, you can toggle the language in the demo.\n\n````jsx\nimport { LocaleProvider, Pagination, DatePicker, TimePicker, Calendar,\n         Popconfirm, Table, Modal, Button, Select, Transfer, Radio } from 'antd';\nimport enUS from 'antd/lib/locale-provider/en_US';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nmoment.locale('en');\n\nconst Option = Select.Option;\nconst RangePicker = DatePicker.RangePicker;\n\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n  filters: [{\n    text: 'filter1',\n    value: 'filter1',\n  }],\n}, {\n  title: 'Age',\n  dataIndex: 'age',\n}];\n\nclass Page extends React.Component {\n  state = {\n    visible: false,\n  }\n  showModal = () => {\n    this.setState({ visible: true });\n  }\n  hideModal = () => {\n    this.setState({ visible: false });\n  }\n  render() {\n    const info = () => {\n      Modal.info({\n        title: 'some info',\n        content: 'some info',\n      });\n    };\n    const confirm = () => {\n      Modal.confirm({\n        title: 'some info',\n        content: 'some info',\n      });\n    };\n    return (\n      <div className=\"locale-components\">\n        <div className=\"example\">\n          <Pagination defaultCurrent={1} total={50} showSizeChanger />\n        </div>\n        <div className=\"example\">\n          <Select showSearch style={{ width: 200 }}>\n            <Option value=\"jack\">jack</Option>\n            <Option value=\"lucy\">lucy</Option>\n          </Select>\n          <DatePicker />\n          <TimePicker />\n          <RangePicker style={{ width: 200 }} />\n        </div>\n        <div className=\"example\">\n          <Button type=\"primary\" onClick={this.showModal}>Show Modal</Button>\n          <Button onClick={info}>Show info</Button>\n          <Button onClick={confirm}>Show confirm</Button>\n          <Popconfirm title=\"Question?\">\n            <a href=\"#\">Click to confirm</a>\n          </Popconfirm>\n        </div>\n        <div className=\"example\">\n          <Transfer\n            dataSource={[]}\n            showSearch\n            targetKeys={[]}\n            render={item => item.title}\n          />\n        </div>\n        <div style={{ width: 319, border: '1px solid #d9d9d9', borderRadius: 4 }}>\n          <Calendar fullscreen={false} value={moment()} />\n        </div>\n        <div className=\"example\">\n          <Table dataSource={[]} columns={columns} />\n        </div>\n        <Modal title=\"Locale Modal\" visible={this.state.visible} onCancel={this.hideModal}>\n          <p>Locale Modal</p>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      locale: enUS,\n    };\n  }\n  changeLocale = (e) => {\n    const localeValue = e.target.value;\n    this.setState({ locale: localeValue });\n    if (!localeValue) {\n      moment.locale('zh-cn');\n    } else {\n      moment.locale('en');\n    }\n  }\n  render() {\n    return (\n      <div>\n        <div className=\"change-locale\">\n          <span style={{ marginRight: 16 }}>Change locale of components: </span>\n          <Radio.Group defaultValue={enUS} onChange={this.changeLocale}>\n            <Radio.Button key=\"en\" value={enUS}>English</Radio.Button>\n            <Radio.Button key=\"cn\">中文</Radio.Button>\n          </Radio.Group>\n        </div>\n        <LocaleProvider locale={this.state.locale}><Page /></LocaleProvider>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n````\n\n````css\n.locale-components {\n  border-top: 1px solid #d9d9d9;\n  padding-top: 16px;\n}\n\n.example {\n  margin: 16px 0;\n}\n\n.example > * {\n  margin-right: 8px;\n}\n\n.change-locale {\n  margin-bottom: 16px;\n}\n````\n","jsCodes":["import React from 'react';\nimport { LocaleProvider, Pagination, DatePicker, TimePicker, Calendar,\n         Popconfirm, Table, Modal, Button, Select, Transfer, Radio } from 'antd';\nimport enUS from 'antd/lib/locale-provider/en_US';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nmoment.locale('en');\n\nconst Option = Select.Option;\nconst RangePicker = DatePicker.RangePicker;\n\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n  filters: [{\n    text: 'filter1',\n    value: 'filter1',\n  }],\n}, {\n  title: 'Age',\n  dataIndex: 'age',\n}];\n\nclass Page extends React.Component {\n  state = {\n    visible: false,\n  }\n  showModal = () => {\n    this.setState({ visible: true });\n  }\n  hideModal = () => {\n    this.setState({ visible: false });\n  }\n  render() {\n    const info = () => {\n      Modal.info({\n        title: 'some info',\n        content: 'some info',\n      });\n    };\n    const confirm = () => {\n      Modal.confirm({\n        title: 'some info',\n        content: 'some info',\n      });\n    };\n    return (\n      <div className=\"locale-components\">\n        <div className=\"example\">\n          <Pagination defaultCurrent={1} total={50} showSizeChanger />\n        </div>\n        <div className=\"example\">\n          <Select showSearch style={{ width: 200 }}>\n            <Option value=\"jack\">jack</Option>\n            <Option value=\"lucy\">lucy</Option>\n          </Select>\n          <DatePicker />\n          <TimePicker />\n          <RangePicker style={{ width: 200 }} />\n        </div>\n        <div className=\"example\">\n          <Button type=\"primary\" onClick={this.showModal}>Show Modal</Button>\n          <Button onClick={info}>Show info</Button>\n          <Button onClick={confirm}>Show confirm</Button>\n          <Popconfirm title=\"Question?\">\n            <a href=\"#\">Click to confirm</a>\n          </Popconfirm>\n        </div>\n        <div className=\"example\">\n          <Transfer\n            dataSource={[]}\n            showSearch\n            targetKeys={[]}\n            render={item => item.title}\n          />\n        </div>\n        <div style={{ width: 319, border: '1px solid #d9d9d9', borderRadius: 4 }}>\n          <Calendar fullscreen={false} value={moment()} />\n        </div>\n        <div className=\"example\">\n          <Table dataSource={[]} columns={columns} />\n        </div>\n        <Modal title=\"Locale Modal\" visible={this.state.visible} onCancel={this.hideModal}>\n          <p>Locale Modal</p>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      locale: enUS,\n    };\n  }\n  changeLocale = (e) => {\n    const localeValue = e.target.value;\n    this.setState({ locale: localeValue });\n    if (!localeValue) {\n      moment.locale('zh-cn');\n    } else {\n      moment.locale('en');\n    }\n  }\n  render() {\n    return (\n      <div>\n        <div className=\"change-locale\">\n          <span style={{ marginRight: 16 }}>Change locale of components: </span>\n          <Radio.Group defaultValue={enUS} onChange={this.changeLocale}>\n            <Radio.Button key=\"en\" value={enUS}>English</Radio.Button>\n            <Radio.Button key=\"cn\">中文</Radio.Button>\n          </Radio.Group>\n        </div>\n        <LocaleProvider locale={this.state.locale}><Page /></LocaleProvider>\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_locale_provider_all() {\nreturn(<App />);\n};\n\nexport const demo = <DemoComponent_locale_provider_all key=\"DemoComponent_locale_provider_all\" />;\n"],"cssCodes":[".locale-components {\n  border-top: 1px solid #d9d9d9;\n  padding-top: 16px;\n}\n\n.example {\n  margin: 16px 0;\n}\n\n.example > * {\n  margin-right: 8px;\n}\n\n.change-locale {\n  margin-bottom: 16px;\n}\n"]},{"name":"basic","content":"---\norder: 1\ntitle:\n  zh-CN: 国际化\n  en-US: Localization\n---\n\n## zh-CN\n\n用 `LocaleProvider` 包裹你的应用，并引用对应的语言包。\n\n## en-US\n\nWrap your app with `LocaleProvider`, and apply the corresponding language package.\n\n````jsx\nimport { Pagination, LocaleProvider } from 'antd';\nimport enUS from 'antd/lib/locale-provider/en_US';\n\nconst App = () => (\n  <div>\n    <Pagination defaultCurrent={1} total={50} showSizeChanger />\n  </div>\n);\n\nReactDOM.render(\n  <LocaleProvider locale={enUS}>\n    <App />\n  </LocaleProvider>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Pagination, LocaleProvider } from 'antd';\nimport enUS from 'antd/lib/locale-provider/en_US';\n\nconst App = () => (\n  <div>\n    <Pagination defaultCurrent={1} total={50} showSizeChanger />\n  </div>\n);\n\nexport default function DemoComponent_locale_provider_basic() {\nreturn(\n  <LocaleProvider locale={enUS}>\n    <App />\n  </LocaleProvider>\n);\n};\n\nexport const demo = <DemoComponent_locale_provider_basic key=\"DemoComponent_locale_provider_basic\" />;\n"],"cssCodes":[]}]},{"name":"mention","demos":[{"name":"async","content":"---\norder: 1\ntitle:\n  zh-CN: 异步加载\n  en-US: Asynchronous loading\n---\n\n## zh-CN\n\n匹配内容列表为异步返回时。\n\n## en-US\n\nasync\n\n````jsx\nimport { Mention } from 'antd';\n\nconst users = ['afc163', 'benjycui', 'yiminghe', 'jljsj33', 'dqaria', 'RaoHai'];\n\nclass AsyncMention extends React.Component {\n  state = {\n    suggestions: [],\n    loading: false,\n  }\n  fetchSuggestions = (value, callback) => {\n    setTimeout(() => {\n      callback(users.filter(item => item.indexOf(value) !== -1));\n    }, 500);\n  }\n  onSearchChange = (value) => {\n    this.fetchSuggestions(value, (suggestions) => {\n      this.setState({\n        suggestions,\n        loading: false,\n      });\n    });\n    this.setState({\n      loading: true,\n    });\n  }\n  render() {\n    const { suggestions, loading } = this.state;\n    return (\n      <Mention\n        style={{ width: '100%', height: 100 }}\n        loading={loading}\n        suggestions={suggestions}\n        onSearchChange={this.onSearchChange}\n      />\n    );\n  }\n}\n\nReactDOM.render(<AsyncMention />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Mention } from 'antd';\n\nconst users = ['afc163', 'benjycui', 'yiminghe', 'jljsj33', 'dqaria', 'RaoHai'];\n\nclass AsyncMention extends React.Component {\n  state = {\n    suggestions: [],\n    loading: false,\n  }\n  fetchSuggestions = (value, callback) => {\n    setTimeout(() => {\n      callback(users.filter(item => item.indexOf(value) !== -1));\n    }, 500);\n  }\n  onSearchChange = (value) => {\n    this.fetchSuggestions(value, (suggestions) => {\n      this.setState({\n        suggestions,\n        loading: false,\n      });\n    });\n    this.setState({\n      loading: true,\n    });\n  }\n  render() {\n    const { suggestions, loading } = this.state;\n    return (\n      <Mention\n        style={{ width: '100%', height: 100 }}\n        loading={loading}\n        suggestions={suggestions}\n        onSearchChange={this.onSearchChange}\n      />\n    );\n  }\n}\n\nexport default function DemoComponent_mention_async() {\nreturn(<AsyncMention />);\n};\n\nexport const demo = <DemoComponent_mention_async key=\"DemoComponent_mention_async\" />;\n"],"cssCodes":[]},{"name":"avatar","content":"---\norder: 3\ntitle:\n  zh-CN: 头像\n  en-US: Icon Image\n---\n\n## zh-CN\n\n自定义建议（含头像）\n\n注意，自定义建议时，onSearchChange 必须不能为空。\n\n## en-US\n\nCustomize suggestions\n\n````jsx\nimport { Mention } from 'antd';\nconst Nav = Mention.Nav;\n\nconst webFrameworks = [\n  { name: 'React', type: 'JavaScript', icon: 'https://zos.alipayobjects.com/rmsportal/LFIeMPzdLcLnEUe.svg' },\n  { name: 'Angular', type: 'JavaScript', icon: 'https://zos.alipayobjects.com/rmsportal/PJTbxSvzYWjDZnJ.png' },\n  { name: 'Dva', type: 'Javascript', icon: 'https://zos.alipayobjects.com/rmsportal/EYPwSeEJKxDtVxI.png' },\n  { name: 'Flask', type: 'Python', icon: 'https://zos.alipayobjects.com/rmsportal/xaypBUijfnpAlXE.png' },\n];\n\nclass CustomNavMention extends React.Component {\n  state = {\n    suggestions: [],\n  }\n  onSearchChange = (value) => {\n    const searchValue = value.toLowerCase();\n    const filtered = webFrameworks.filter(item =>\n      item.name.toLowerCase().indexOf(searchValue) !== -1\n    );\n    const suggestions = filtered.map(suggestion => (\n      <Nav\n        value={suggestion.name}\n        data={suggestion}\n        disabled={suggestion.disabled}\n      >\n        <span>\n          <img alt={suggestion.name} style={{ height: 16, width: 16, marginRight: 5, float: 'left' }} src={suggestion.icon} />\n          {suggestion.name} - {suggestion.type}\n        </span>\n      </Nav>\n    ));\n    this.setState({ suggestions });\n  }\n  render() {\n    const { suggestions } = this.state;\n    return (\n      <Mention\n        style={{ width: '100%', height: 100 }}\n        suggestions={suggestions}\n        onSearchChange={this.onSearchChange}\n      />\n    );\n  }\n}\n\nReactDOM.render(<CustomNavMention />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Mention } from 'antd';\nconst Nav = Mention.Nav;\n\nconst webFrameworks = [\n  { name: 'React', type: 'JavaScript', icon: 'https://zos.alipayobjects.com/rmsportal/LFIeMPzdLcLnEUe.svg' },\n  { name: 'Angular', type: 'JavaScript', icon: 'https://zos.alipayobjects.com/rmsportal/PJTbxSvzYWjDZnJ.png' },\n  { name: 'Dva', type: 'Javascript', icon: 'https://zos.alipayobjects.com/rmsportal/EYPwSeEJKxDtVxI.png' },\n  { name: 'Flask', type: 'Python', icon: 'https://zos.alipayobjects.com/rmsportal/xaypBUijfnpAlXE.png' },\n];\n\nclass CustomNavMention extends React.Component {\n  state = {\n    suggestions: [],\n  }\n  onSearchChange = (value) => {\n    const searchValue = value.toLowerCase();\n    const filtered = webFrameworks.filter(item =>\n      item.name.toLowerCase().indexOf(searchValue) !== -1\n    );\n    const suggestions = filtered.map(suggestion => (\n      <Nav\n        value={suggestion.name}\n        data={suggestion}\n        disabled={suggestion.disabled}\n      >\n        <span>\n          <img alt={suggestion.name} style={{ height: 16, width: 16, marginRight: 5, float: 'left' }} src={suggestion.icon} />\n          {suggestion.name} - {suggestion.type}\n        </span>\n      </Nav>\n    ));\n    this.setState({ suggestions });\n  }\n  render() {\n    const { suggestions } = this.state;\n    return (\n      <Mention\n        style={{ width: '100%', height: 100 }}\n        suggestions={suggestions}\n        onSearchChange={this.onSearchChange}\n      />\n    );\n  }\n}\n\nexport default function DemoComponent_mention_avatar() {\nreturn(<CustomNavMention />);\n};\n\nexport const demo = <DemoComponent_mention_avatar key=\"DemoComponent_mention_avatar\" />;\n"],"cssCodes":[]},{"name":"basic","content":"---\norder: 0\ntitle:\n  zh-CN: 基本使用\n  en-US: Basic\n---\n\n## zh-CN\n\n基本使用\n\n## en-US\n\nBasic usage.\n\n````jsx\nimport { Mention } from 'antd';\nconst { toString, toContentState } = Mention;\n\nfunction onChange(contentState) {\n  console.log(toString(contentState));\n}\n\nfunction onSelect(suggestion) {\n  console.log('onSelect', suggestion);\n}\n\nReactDOM.render(\n  <Mention\n    style={{ width: '100%', height: 100 }}\n    onChange={onChange}\n    defaultValue={toContentState('@afc163')}\n    suggestions={['afc163', 'benjycui', 'yiminghe', 'RaoHai', '中文', 'にほんご']}\n    onSelect={onSelect}\n  />\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Mention } from 'antd';\nconst { toString, toContentState } = Mention;\n\nfunction onChange(contentState) {\n  console.log(toString(contentState));\n}\n\nfunction onSelect(suggestion) {\n  console.log('onSelect', suggestion);\n}\n\nexport default function DemoComponent_mention_basic() {\nreturn(\n  <Mention\n    style={{ width: '100%', height: 100 }}\n    onChange={onChange}\n    defaultValue={toContentState('@afc163')}\n    suggestions={['afc163', 'benjycui', 'yiminghe', 'RaoHai', '中文', 'にほんご']}\n    onSelect={onSelect}\n  />\n);\n};\n\nexport const demo = <DemoComponent_mention_basic key=\"DemoComponent_mention_basic\" />;\n"],"cssCodes":[]},{"name":"controllder_simple","content":"---\norder: 3\ntitle:\n  zh-CN: 受控模式\n  en-US: Controlled\n---\n\n## zh-CN\n\n受控模式.\n\n## en-US\n\nControlled mode.\n\n````jsx\nimport { Mention } from 'antd';\nconst { toContentState } = Mention;\n\nclass App extends React.Component {\n  state = {\n    value: toContentState('@afc163'),\n  }\n  componentDidMount() {\n    this.mention.focus();\n  }\n  handleChange = (editorState) => {\n    this.setState({\n      value: editorState,\n    });\n  }\n  render() {\n    return (\n      <Mention\n        ref={ele => this.mention = ele}\n        suggestions={['afc163', 'benjycui', 'yiminghe', 'RaoHai', '中文', 'にほんご']}\n        value={this.state.value}\n        onChange={this.handleChange}\n      />\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Mention } from 'antd';\nconst { toContentState } = Mention;\n\nclass App extends React.Component {\n  state = {\n    value: toContentState('@afc163'),\n  }\n  componentDidMount() {\n    this.mention.focus();\n  }\n  handleChange = (editorState) => {\n    this.setState({\n      value: editorState,\n    });\n  }\n  render() {\n    return (\n      <Mention\n        ref={ele => this.mention = ele}\n        suggestions={['afc163', 'benjycui', 'yiminghe', 'RaoHai', '中文', 'にほんご']}\n        value={this.state.value}\n        onChange={this.handleChange}\n      />\n    );\n  }\n}\n\nexport default function DemoComponent_mention_controllder_simple() {\nreturn(<App />);\n};\n\nexport const demo = <DemoComponent_mention_controllder_simple key=\"DemoComponent_mention_controllder_simple\" />;\n"],"cssCodes":[]},{"name":"controlled","content":"---\norder: 4\ntitle:\n  zh-CN: 配合 Form 使用\n  en-US: With Form\n---\n\n## zh-CN\n\n受控模式，例如配合 Form 使用。\n\n## en-US\n\nControlled mode, for example, to work with `Form`.\n\n````jsx\nimport { Mention, Form, Button } from 'antd';\nconst { toContentState, getMentions } = Mention;\nconst FormItem = Form.Item;\n\nclass App extends React.Component {\n  state = {\n    initValue: toContentState('@afc163'),\n  }\n  handleReset = (e) => {\n    e.preventDefault();\n    this.props.form.resetFields();\n  }\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.form.validateFields((errors, values) => {\n      if (errors) {\n        console.log('Errors in form!!!');\n        return;\n      }\n      console.log('Submit!!!');\n      console.log(values);\n    });\n  }\n  checkMention = (rule, value, callback) => {\n    const { getFieldValue } = this.props.form;\n    const mentions = getMentions(getFieldValue('mention'));\n    if (mentions.length < 2) {\n      callback(new Error('More than one must be selected!'));\n    } else {\n      callback();\n    }\n  }\n  render() {\n    const { getFieldDecorator, getFieldValue } = this.props.form;\n    console.log('>> render', getFieldValue('mention') === this.state.initValue);\n    return (\n      <Form layout=\"horizontal\">\n        <FormItem\n          id=\"control-mention\"\n          label=\"Top coders\"\n          labelCol={{ span: 6 }}\n          wrapperCol={{ span: 16 }}\n        >\n          {getFieldDecorator('mention', {\n            rules: [\n              { validator: this.checkMention },\n            ],\n            initialValue: this.state.initValue,\n          })(\n            <Mention\n              suggestions={['afc163', 'benjycui', 'yiminghe', 'RaoHai', '中文', 'にほんご']}\n              style={{ height: 60 }}\n            />\n          )}\n        </FormItem>\n        <FormItem wrapperCol={{ span: 14, offset: 6 }}>\n          <Button type=\"primary\" onClick={this.handleSubmit}>Submit</Button>\n          &nbsp;&nbsp;&nbsp;\n          <Button onClick={this.handleReset}>Reset</Button>\n        </FormItem>\n      </Form>\n    );\n  }\n}\n\nconst FormDemo = Form.create()(App);\n\nReactDOM.render(<FormDemo />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Mention, Form, Button } from 'antd';\nconst { toContentState, getMentions } = Mention;\nconst FormItem = Form.Item;\n\nclass App extends React.Component {\n  state = {\n    initValue: toContentState('@afc163'),\n  }\n  handleReset = (e) => {\n    e.preventDefault();\n    this.props.form.resetFields();\n  }\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.form.validateFields((errors, values) => {\n      if (errors) {\n        console.log('Errors in form!!!');\n        return;\n      }\n      console.log('Submit!!!');\n      console.log(values);\n    });\n  }\n  checkMention = (rule, value, callback) => {\n    const { getFieldValue } = this.props.form;\n    const mentions = getMentions(getFieldValue('mention'));\n    if (mentions.length < 2) {\n      callback(new Error('More than one must be selected!'));\n    } else {\n      callback();\n    }\n  }\n  render() {\n    const { getFieldDecorator, getFieldValue } = this.props.form;\n    console.log('>> render', getFieldValue('mention') === this.state.initValue);\n    return (\n      <Form layout=\"horizontal\">\n        <FormItem\n          id=\"control-mention\"\n          label=\"Top coders\"\n          labelCol={{ span: 6 }}\n          wrapperCol={{ span: 16 }}\n        >\n          {getFieldDecorator('mention', {\n            rules: [\n              { validator: this.checkMention },\n            ],\n            initialValue: this.state.initValue,\n          })(\n            <Mention\n              suggestions={['afc163', 'benjycui', 'yiminghe', 'RaoHai', '中文', 'にほんご']}\n              style={{ height: 60 }}\n            />\n          )}\n        </FormItem>\n        <FormItem wrapperCol={{ span: 14, offset: 6 }}>\n          <Button type=\"primary\" onClick={this.handleSubmit}>Submit</Button>\n          &nbsp;&nbsp;&nbsp;\n          <Button onClick={this.handleReset}>Reset</Button>\n        </FormItem>\n      </Form>\n    );\n  }\n}\n\nconst FormDemo = Form.create()(App);\n\nexport default function DemoComponent_mention_controlled() {\nreturn(<FormDemo />);\n};\n\nexport const demo = <DemoComponent_mention_controlled key=\"DemoComponent_mention_controlled\" />;\n"],"cssCodes":[]},{"name":"custom_tag","content":"---\norder: 2\ntitle:\n  zh-CN: 自定义建议\n  en-US: Customize Suggestion\n---\n\n## zh-CN\n\n自定义建议\n\n注意，自定义建议时，onSearchChange 必须不能为空。\n\n## en-US\n\nCustomize suggestions.\n\n````jsx\nimport { Mention } from 'antd';\nconst Nav = Mention.Nav;\n\nconst webFrameworks = [\n  { name: 'React', type: 'JavaScript' },\n  { name: 'Angular', type: 'JavaScript' },\n  { name: 'Laravel', type: 'PHP', disabled: true },\n  { name: 'Flask', type: 'Python' },\n  { name: 'Django', type: 'Python' },\n];\n\nfunction onSelect(suggestion, data) {\n  console.log('onSelect', suggestion, data);\n}\n\nclass CustomNavMention extends React.Component {\n  state = {\n    suggestions: [],\n  }\n  onSearchChange = (value) => {\n    const searchValue = value.toLowerCase();\n    const filtered = webFrameworks.filter(item =>\n      item.name.toLowerCase().indexOf(searchValue) !== -1\n    );\n    const suggestions = filtered.map(suggestion => (\n      <Nav\n        value={suggestion.name}\n        data={suggestion}\n      >\n        <span>{suggestion.name} - {suggestion.type}</span>\n      </Nav>\n    ));\n    this.setState({ suggestions });\n  }\n  render() {\n    const { suggestions } = this.state;\n    return (\n      <Mention\n        placeholder=\"@someone\"\n        style={{ width: '100%', height: 100 }}\n        suggestions={suggestions}\n        onSearchChange={this.onSearchChange}\n        onSelect={onSelect}\n      />\n    );\n  }\n}\n\nReactDOM.render(<CustomNavMention />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Mention } from 'antd';\nconst Nav = Mention.Nav;\n\nconst webFrameworks = [\n  { name: 'React', type: 'JavaScript' },\n  { name: 'Angular', type: 'JavaScript' },\n  { name: 'Laravel', type: 'PHP', disabled: true },\n  { name: 'Flask', type: 'Python' },\n  { name: 'Django', type: 'Python' },\n];\n\nfunction onSelect(suggestion, data) {\n  console.log('onSelect', suggestion, data);\n}\n\nclass CustomNavMention extends React.Component {\n  state = {\n    suggestions: [],\n  }\n  onSearchChange = (value) => {\n    const searchValue = value.toLowerCase();\n    const filtered = webFrameworks.filter(item =>\n      item.name.toLowerCase().indexOf(searchValue) !== -1\n    );\n    const suggestions = filtered.map(suggestion => (\n      <Nav\n        value={suggestion.name}\n        data={suggestion}\n      >\n        <span>{suggestion.name} - {suggestion.type}</span>\n      </Nav>\n    ));\n    this.setState({ suggestions });\n  }\n  render() {\n    const { suggestions } = this.state;\n    return (\n      <Mention\n        placeholder=\"@someone\"\n        style={{ width: '100%', height: 100 }}\n        suggestions={suggestions}\n        onSearchChange={this.onSearchChange}\n        onSelect={onSelect}\n      />\n    );\n  }\n}\n\nexport default function DemoComponent_mention_custom_tag() {\nreturn(<CustomNavMention />);\n};\n\nexport const demo = <DemoComponent_mention_custom_tag key=\"DemoComponent_mention_custom_tag\" />;\n"],"cssCodes":[]},{"name":"multilines","content":"---\norder: 5\ntitle:\n  zh-CN: 多行\n  en-US: Multi-lines Mode\n---\n\n## zh-CN\n\n多行模式，多行模式必须指定高度。\n\n## en-US\n\nMulti lines mode.\n\n````jsx\nimport { Mention } from 'antd';\nconst { toString } = Mention;\n\nfunction onChange(editorState) {\n  console.log(toString(editorState));\n}\n\nReactDOM.render(\n  <Mention\n    style={{ width: '100%', height: 100 }}\n    onChange={onChange}\n    suggestions={['afc163', 'benjycui', 'yiminghe', 'jljsj33', 'dqaria', 'RaoHai']}\n    multiLines\n  />\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Mention } from 'antd';\nconst { toString } = Mention;\n\nfunction onChange(editorState) {\n  console.log(toString(editorState));\n}\n\nexport default function DemoComponent_mention_multilines() {\nreturn(\n  <Mention\n    style={{ width: '100%', height: 100 }}\n    onChange={onChange}\n    suggestions={['afc163', 'benjycui', 'yiminghe', 'jljsj33', 'dqaria', 'RaoHai']}\n    multiLines\n  />\n);\n};\n\nexport const demo = <DemoComponent_mention_multilines key=\"DemoComponent_mention_multilines\" />;\n"],"cssCodes":[]},{"name":"multiple_trigger","content":"---\norder: 8\ntitle:\n  zh-CN: 自定义触发字符\n  en-US: Customize Trigger Token\n---\n\n## zh-CN\n\n通过 `prefix` 属性自定义触发字符。默认为 `@`, 可以定义为数组。\n\n## en-US\n\nCustomize Trigger Token by `prefix` props. Default to `@`, `Array<string>` also supported.\n\n````jsx\nimport { Mention } from 'antd';\nconst { toString } = Mention;\n\nfunction onChange(editorState) {\n  console.log(toString(editorState));\n}\n\nfunction onSelect(suggestion) {\n  console.log('onSelect', suggestion);\n}\n\nconst users = ['afc163', 'benjycui', 'yiminghe', 'jljsj33', 'dqaria', 'RaoHai'];\nconst tags = ['1.0', '2.0', '3.0'];\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      suggestions: [],\n    };\n  }\n  onSearchChange = (value, trigger) => {\n    console.log('onSearchChange', value, trigger);\n    const dataSource = trigger === '@' ? users : tags;\n    this.setState({\n      suggestions: dataSource.filter(item => item.indexOf(value) !== -1),\n    });\n  }\n  render() {\n    return (\n      <Mention\n        style={{ width: '100%', height: 100 }}\n        onChange={onChange}\n        placeholder=\"input @ to mention people, # to mention tag\"\n        prefix={['@', '#']}\n        onSearchChange={this.onSearchChange}\n        suggestions={this.state.suggestions}\n        onSelect={onSelect}\n      />\n    );\n  }\n}\n\nReactDOM.render(\n  <App />\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Mention } from 'antd';\nconst { toString } = Mention;\n\nfunction onChange(editorState) {\n  console.log(toString(editorState));\n}\n\nfunction onSelect(suggestion) {\n  console.log('onSelect', suggestion);\n}\n\nconst users = ['afc163', 'benjycui', 'yiminghe', 'jljsj33', 'dqaria', 'RaoHai'];\nconst tags = ['1.0', '2.0', '3.0'];\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      suggestions: [],\n    };\n  }\n  onSearchChange = (value, trigger) => {\n    console.log('onSearchChange', value, trigger);\n    const dataSource = trigger === '@' ? users : tags;\n    this.setState({\n      suggestions: dataSource.filter(item => item.indexOf(value) !== -1),\n    });\n  }\n  render() {\n    return (\n      <Mention\n        style={{ width: '100%', height: 100 }}\n        onChange={onChange}\n        placeholder=\"input @ to mention people, # to mention tag\"\n        prefix={['@', '#']}\n        onSearchChange={this.onSearchChange}\n        suggestions={this.state.suggestions}\n        onSelect={onSelect}\n      />\n    );\n  }\n}\n\nexport default function DemoComponent_mention_multiple_trigger() {\nreturn(\n  <App />\n);\n};\n\nexport const demo = <DemoComponent_mention_multiple_trigger key=\"DemoComponent_mention_multiple_trigger\" />;\n"],"cssCodes":[]},{"name":"popupContainer","content":"---\norder: 6\ntitle:\n  zh-CN: 建议渲染父节点\n  en-US: SuggestionContainer\n---\n\n## zh-CN\n\n指定提示渲染的父节点。\n\n## en-US\n\nTo set the container of the suggestion.\n\n````jsx\nimport { Mention, Popover, Button } from 'antd';\nconst { toString, toContentState } = Mention;\n\nfunction onChange(editorState) {\n  console.log(toString(editorState));\n}\n\nfunction onSelect(suggestion) {\n  console.log('onSelect', suggestion);\n}\n\nclass PopoverContainer extends React.Component {\n  getSuggestionContainer = () => {\n    return this.popover.getPopupDomNode();\n  }\n  render() {\n    const mention = (\n      <Mention\n        style={{ width: '100%', height: 100 }}\n        onChange={onChange}\n        defaultValue={toContentState('@afc163')}\n        suggestions={['afc163', 'benjycui', 'yiminghe', 'RaoHai', '中文', 'にほんご']}\n        onSelect={onSelect}\n        getSuggestionContainer={this.getSuggestionContainer}\n      />\n    );\n    return (\n      <Popover trigger=\"click\" content={mention} title=\"Title\" ref={popover => this.popover = popover}>\n        <Button type=\"primary\">Click Me</Button>\n      </Popover>\n    );\n  }\n}\n\nReactDOM.render(<PopoverContainer />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Mention, Popover, Button } from 'antd';\nconst { toString, toContentState } = Mention;\n\nfunction onChange(editorState) {\n  console.log(toString(editorState));\n}\n\nfunction onSelect(suggestion) {\n  console.log('onSelect', suggestion);\n}\n\nclass PopoverContainer extends React.Component {\n  getSuggestionContainer = () => {\n    return this.popover.getPopupDomNode();\n  }\n  render() {\n    const mention = (\n      <Mention\n        style={{ width: '100%', height: 100 }}\n        onChange={onChange}\n        defaultValue={toContentState('@afc163')}\n        suggestions={['afc163', 'benjycui', 'yiminghe', 'RaoHai', '中文', 'にほんご']}\n        onSelect={onSelect}\n        getSuggestionContainer={this.getSuggestionContainer}\n      />\n    );\n    return (\n      <Popover trigger=\"click\" content={mention} title=\"Title\" ref={popover => this.popover = popover}>\n        <Button type=\"primary\">Click Me</Button>\n      </Popover>\n    );\n  }\n}\n\nexport default function DemoComponent_mention_popupContainer() {\nreturn(<PopoverContainer />);\n};\n\nexport const demo = <DemoComponent_mention_popupContainer key=\"DemoComponent_mention_popupContainer\" />;\n"],"cssCodes":[]},{"name":"readonly","content":"---\norder: 7\ntitle:\n  zh-CN: 无效或只读\n  en-US: disabled or readOnly\n---\n\n## zh-CN\n\n通过 `disabled` 属性设置是否生效。通过 `readOnly` 属性设置是否只读。\n\n## en-US\n\nConfigurate `disabled` and `readOnly`.\n\n````jsx\nimport { Mention } from 'antd';\nconst { toString } = Mention;\n\nfunction onChange(editorState) {\n  console.log(toString(editorState));\n}\n\nconst users = ['afc163', 'benjycui', 'yiminghe', 'jljsj33', 'dqaria', 'RaoHai'];\n\nfunction App() {\n  return (\n    <div>\n      <div style={{ marginBottom: 10 }}>\n        <Mention\n          style={{ width: '100%' }}\n          onChange={onChange}\n          placeholder=\"this is disabled Mention\"\n          suggestions={users}\n          disabled\n        />\n      </div>\n      <Mention\n        style={{ width: '100%' }}\n        onChange={onChange}\n        placeholder=\"this is readOnly Mention\"\n        suggestions={users}\n        readOnly\n      />\n    </div>\n  );\n}\n\n\nReactDOM.render(\n  <App />\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Mention } from 'antd';\nconst { toString } = Mention;\n\nfunction onChange(editorState) {\n  console.log(toString(editorState));\n}\n\nconst users = ['afc163', 'benjycui', 'yiminghe', 'jljsj33', 'dqaria', 'RaoHai'];\n\nfunction App() {\n  return (\n    <div>\n      <div style={{ marginBottom: 10 }}>\n        <Mention\n          style={{ width: '100%' }}\n          onChange={onChange}\n          placeholder=\"this is disabled Mention\"\n          suggestions={users}\n          disabled\n        />\n      </div>\n      <Mention\n        style={{ width: '100%' }}\n        onChange={onChange}\n        placeholder=\"this is readOnly Mention\"\n        suggestions={users}\n        readOnly\n      />\n    </div>\n  );\n}\n\n\nexport default function DemoComponent_mention_readonly() {\nreturn(\n  <App />\n);\n};\n\nexport const demo = <DemoComponent_mention_readonly key=\"DemoComponent_mention_readonly\" />;\n"],"cssCodes":[]}]},{"name":"menu","demos":[{"name":"horizontal","content":"---\norder: 0\ntitle:\n  zh-CN: 顶部导航\n  en-US: Top Navigation\n---\n\n## zh-CN\n\n水平的顶部导航菜单。\n\n## en-US\n\nHorizontal top navigation menu.\n\n````jsx\nimport { Menu, Icon } from 'antd';\nconst SubMenu = Menu.SubMenu;\nconst MenuItemGroup = Menu.ItemGroup;\n\nclass App extends React.Component {\n  state = {\n    current: 'mail',\n  }\n  handleClick = (e) => {\n    console.log('click ', e);\n    this.setState({\n      current: e.key,\n    });\n  }\n  render() {\n    return (\n      <Menu\n        onClick={this.handleClick}\n        selectedKeys={[this.state.current]}\n        mode=\"horizontal\"\n      >\n        <Menu.Item key=\"mail\">\n          <Icon type=\"mail\" />Navigation One\n        </Menu.Item>\n        <Menu.Item key=\"app\" disabled>\n          <Icon type=\"appstore\" />Navigation Two\n        </Menu.Item>\n        <SubMenu title={<span><Icon type=\"setting\" />Navigation Three - Submenu</span>}>\n          <MenuItemGroup title=\"Item 1\">\n            <Menu.Item key=\"setting:1\">Option 1</Menu.Item>\n            <Menu.Item key=\"setting:2\">Option 2</Menu.Item>\n          </MenuItemGroup>\n          <MenuItemGroup title=\"Item 2\">\n            <Menu.Item key=\"setting:3\">Option 3</Menu.Item>\n            <Menu.Item key=\"setting:4\">Option 4</Menu.Item>\n          </MenuItemGroup>\n        </SubMenu>\n        <Menu.Item key=\"alipay\">\n          <a href=\"https://ant.design\" target=\"_blank\" rel=\"noopener noreferrer\">Navigation Four - Link</a>\n        </Menu.Item>\n      </Menu>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Menu, Icon } from 'antd';\nconst SubMenu = Menu.SubMenu;\nconst MenuItemGroup = Menu.ItemGroup;\n\nclass App extends React.Component {\n  state = {\n    current: 'mail',\n  }\n  handleClick = (e) => {\n    console.log('click ', e);\n    this.setState({\n      current: e.key,\n    });\n  }\n  render() {\n    return (\n      <Menu\n        onClick={this.handleClick}\n        selectedKeys={[this.state.current]}\n        mode=\"horizontal\"\n      >\n        <Menu.Item key=\"mail\">\n          <Icon type=\"mail\" />Navigation One\n        </Menu.Item>\n        <Menu.Item key=\"app\" disabled>\n          <Icon type=\"appstore\" />Navigation Two\n        </Menu.Item>\n        <SubMenu title={<span><Icon type=\"setting\" />Navigation Three - Submenu</span>}>\n          <MenuItemGroup title=\"Item 1\">\n            <Menu.Item key=\"setting:1\">Option 1</Menu.Item>\n            <Menu.Item key=\"setting:2\">Option 2</Menu.Item>\n          </MenuItemGroup>\n          <MenuItemGroup title=\"Item 2\">\n            <Menu.Item key=\"setting:3\">Option 3</Menu.Item>\n            <Menu.Item key=\"setting:4\">Option 4</Menu.Item>\n          </MenuItemGroup>\n        </SubMenu>\n        <Menu.Item key=\"alipay\">\n          <a href=\"https://ant.design\" target=\"_blank\" rel=\"noopener noreferrer\">Navigation Four - Link</a>\n        </Menu.Item>\n      </Menu>\n    );\n  }\n}\n\nexport default function DemoComponent_menu_horizontal() {\nreturn(<App />);\n};\n\nexport const demo = <DemoComponent_menu_horizontal key=\"DemoComponent_menu_horizontal\" />;\n"],"cssCodes":[]},{"name":"inline_collapsed","content":"---\norder: 2\ntitle:\n  zh-CN: 缩起内嵌菜单\n  en-US: Collapsed inline menu\n---\n\n## zh-CN\n\n内嵌菜单可以被缩起/展开。\n\n## en-US\n\nInline menu could be collapsed.\n\n````jsx\nimport { Menu, Icon, Button } from 'antd';\nconst SubMenu = Menu.SubMenu;\n\nclass App extends React.Component {\n  state = {\n    collapsed: false,\n  }\n  toggleCollapsed = () => {\n    this.setState({\n      collapsed: !this.state.collapsed,\n    });\n  }\n  render() {\n    return (\n      <div style={{ width: 240 }}>\n        <Button type=\"primary\" onClick={this.toggleCollapsed} style={{ marginBottom: 16 }}>\n          <Icon type={this.state.collapsed ? 'menu-unfold' : 'menu-fold'} />\n        </Button>\n        <Menu\n          defaultSelectedKeys={['1']}\n          defaultOpenKeys={['sub1']}\n          mode=\"inline\"\n          theme=\"dark\"\n          inlineCollapsed={this.state.collapsed}\n        >\n          <Menu.Item key=\"1\">\n            <Icon type=\"pie-chart\" />\n            <span>Option 1</span>\n          </Menu.Item>\n          <Menu.Item key=\"2\">\n            <Icon type=\"desktop\" />\n            <span>Option 2</span>\n          </Menu.Item>\n          <Menu.Item key=\"3\">\n            <Icon type=\"inbox\" />\n            <span>Option 3</span>\n          </Menu.Item>\n          <SubMenu key=\"sub1\" title={<span><Icon type=\"mail\" /><span>Navigation One</span></span>}>\n            <Menu.Item key=\"5\">Option 5</Menu.Item>\n            <Menu.Item key=\"6\">Option 6</Menu.Item>\n            <Menu.Item key=\"7\">Option 7</Menu.Item>\n            <Menu.Item key=\"8\">Option 8</Menu.Item>\n          </SubMenu>\n          <SubMenu key=\"sub2\" title={<span><Icon type=\"appstore\" /><span>Navigation Two</span></span>}>\n            <Menu.Item key=\"9\">Option 9</Menu.Item>\n            <Menu.Item key=\"10\">Option 10</Menu.Item>\n            <SubMenu key=\"sub3\" title=\"Submenu\">\n              <Menu.Item key=\"11\">Option 11</Menu.Item>\n              <Menu.Item key=\"12\">Option 12</Menu.Item>\n            </SubMenu>\n          </SubMenu>\n        </Menu>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Menu, Icon, Button } from 'antd';\nconst SubMenu = Menu.SubMenu;\n\nclass App extends React.Component {\n  state = {\n    collapsed: false,\n  }\n  toggleCollapsed = () => {\n    this.setState({\n      collapsed: !this.state.collapsed,\n    });\n  }\n  render() {\n    return (\n      <div style={{ width: 240 }}>\n        <Button type=\"primary\" onClick={this.toggleCollapsed} style={{ marginBottom: 16 }}>\n          <Icon type={this.state.collapsed ? 'menu-unfold' : 'menu-fold'} />\n        </Button>\n        <Menu\n          defaultSelectedKeys={['1']}\n          defaultOpenKeys={['sub1']}\n          mode=\"inline\"\n          theme=\"dark\"\n          inlineCollapsed={this.state.collapsed}\n        >\n          <Menu.Item key=\"1\">\n            <Icon type=\"pie-chart\" />\n            <span>Option 1</span>\n          </Menu.Item>\n          <Menu.Item key=\"2\">\n            <Icon type=\"desktop\" />\n            <span>Option 2</span>\n          </Menu.Item>\n          <Menu.Item key=\"3\">\n            <Icon type=\"inbox\" />\n            <span>Option 3</span>\n          </Menu.Item>\n          <SubMenu key=\"sub1\" title={<span><Icon type=\"mail\" /><span>Navigation One</span></span>}>\n            <Menu.Item key=\"5\">Option 5</Menu.Item>\n            <Menu.Item key=\"6\">Option 6</Menu.Item>\n            <Menu.Item key=\"7\">Option 7</Menu.Item>\n            <Menu.Item key=\"8\">Option 8</Menu.Item>\n          </SubMenu>\n          <SubMenu key=\"sub2\" title={<span><Icon type=\"appstore\" /><span>Navigation Two</span></span>}>\n            <Menu.Item key=\"9\">Option 9</Menu.Item>\n            <Menu.Item key=\"10\">Option 10</Menu.Item>\n            <SubMenu key=\"sub3\" title=\"Submenu\">\n              <Menu.Item key=\"11\">Option 11</Menu.Item>\n              <Menu.Item key=\"12\">Option 12</Menu.Item>\n            </SubMenu>\n          </SubMenu>\n        </Menu>\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_menu_inline_collapsed() {\nreturn(<App />);\n};\n\nexport const demo = <DemoComponent_menu_inline_collapsed key=\"DemoComponent_menu_inline_collapsed\" />;\n"],"cssCodes":[]},{"name":"inline","content":"---\norder: 1\ntitle:\n  zh-CN: 内嵌菜单\n  en-US: Inline menu\n---\n\n## zh-CN\n\n垂直菜单，子菜单内嵌在菜单区域。\n\n## en-US\n\nVertical menu with inline submenus.\n\n````jsx\nimport { Menu, Icon } from 'antd';\nconst SubMenu = Menu.SubMenu;\nconst MenuItemGroup = Menu.ItemGroup;\n\nclass Sider extends React.Component {\n  handleClick = (e) => {\n    console.log('click ', e);\n  }\n  render() {\n    return (\n      <Menu\n        onClick={this.handleClick}\n        style={{ width: 240 }}\n        defaultSelectedKeys={['1']}\n        defaultOpenKeys={['sub1']}\n        mode=\"inline\"\n      >\n        <SubMenu key=\"sub1\" title={<span><Icon type=\"mail\" /><span>Navigation One</span></span>}>\n          <MenuItemGroup key=\"g1\" title=\"Item 1\">\n            <Menu.Item key=\"1\">Option 1</Menu.Item>\n            <Menu.Item key=\"2\">Option 2</Menu.Item>\n          </MenuItemGroup>\n          <MenuItemGroup key=\"g2\" title=\"Item 2\">\n            <Menu.Item key=\"3\">Option 3</Menu.Item>\n            <Menu.Item key=\"4\">Option 4</Menu.Item>\n          </MenuItemGroup>\n        </SubMenu>\n        <SubMenu key=\"sub2\" title={<span><Icon type=\"appstore\" /><span>Navigation Two</span></span>}>\n          <Menu.Item key=\"5\">Option 5</Menu.Item>\n          <Menu.Item key=\"6\">Option 6</Menu.Item>\n          <SubMenu key=\"sub3\" title=\"Submenu\">\n            <Menu.Item key=\"7\">Option 7</Menu.Item>\n            <Menu.Item key=\"8\">Option 8</Menu.Item>\n          </SubMenu>\n        </SubMenu>\n        <SubMenu key=\"sub4\" title={<span><Icon type=\"setting\" /><span>Navigation Three</span></span>}>\n          <Menu.Item key=\"9\">Option 9</Menu.Item>\n          <Menu.Item key=\"10\">Option 10</Menu.Item>\n          <Menu.Item key=\"11\">Option 11</Menu.Item>\n          <Menu.Item key=\"12\">Option 12</Menu.Item>\n        </SubMenu>\n      </Menu>\n    );\n  }\n}\n\nReactDOM.render(<Sider />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Menu, Icon } from 'antd';\nconst SubMenu = Menu.SubMenu;\nconst MenuItemGroup = Menu.ItemGroup;\n\nclass Sider extends React.Component {\n  handleClick = (e) => {\n    console.log('click ', e);\n  }\n  render() {\n    return (\n      <Menu\n        onClick={this.handleClick}\n        style={{ width: 240 }}\n        defaultSelectedKeys={['1']}\n        defaultOpenKeys={['sub1']}\n        mode=\"inline\"\n      >\n        <SubMenu key=\"sub1\" title={<span><Icon type=\"mail\" /><span>Navigation One</span></span>}>\n          <MenuItemGroup key=\"g1\" title=\"Item 1\">\n            <Menu.Item key=\"1\">Option 1</Menu.Item>\n            <Menu.Item key=\"2\">Option 2</Menu.Item>\n          </MenuItemGroup>\n          <MenuItemGroup key=\"g2\" title=\"Item 2\">\n            <Menu.Item key=\"3\">Option 3</Menu.Item>\n            <Menu.Item key=\"4\">Option 4</Menu.Item>\n          </MenuItemGroup>\n        </SubMenu>\n        <SubMenu key=\"sub2\" title={<span><Icon type=\"appstore\" /><span>Navigation Two</span></span>}>\n          <Menu.Item key=\"5\">Option 5</Menu.Item>\n          <Menu.Item key=\"6\">Option 6</Menu.Item>\n          <SubMenu key=\"sub3\" title=\"Submenu\">\n            <Menu.Item key=\"7\">Option 7</Menu.Item>\n            <Menu.Item key=\"8\">Option 8</Menu.Item>\n          </SubMenu>\n        </SubMenu>\n        <SubMenu key=\"sub4\" title={<span><Icon type=\"setting\" /><span>Navigation Three</span></span>}>\n          <Menu.Item key=\"9\">Option 9</Menu.Item>\n          <Menu.Item key=\"10\">Option 10</Menu.Item>\n          <Menu.Item key=\"11\">Option 11</Menu.Item>\n          <Menu.Item key=\"12\">Option 12</Menu.Item>\n        </SubMenu>\n      </Menu>\n    );\n  }\n}\n\nexport default function DemoComponent_menu_inline() {\nreturn(<Sider />);\n};\n\nexport const demo = <DemoComponent_menu_inline key=\"DemoComponent_menu_inline\" />;\n"],"cssCodes":[]},{"name":"sider_current","content":"---\norder: 2\ntitle:\n    zh-CN: 只展开当前父级菜单\n    en-US: Open current submenu only\n---\n\n## zh-CN\n\n点击菜单，收起其他展开的所有菜单，保持菜单聚焦简洁。\n\n> 该用法要求 antd@2.0+\n\n## en-US\n\nClick the menu and you will see that all the other menus gets collapsed to keep the entire menu compact.\n\n> This demo is for antd@2.0+.\n\n````jsx\nimport { Menu, Icon } from 'antd';\nconst SubMenu = Menu.SubMenu;\n\nclass Sider extends React.Component {\n  state = {\n    current: '1',\n    openKeys: [],\n  }\n  handleClick = (e) => {\n    console.log('Clicked: ', e);\n    this.setState({ current: e.key });\n  }\n  onOpenChange = (openKeys) => {\n    const state = this.state;\n    const latestOpenKey = openKeys.find(key => !(state.openKeys.indexOf(key) > -1));\n    const latestCloseKey = state.openKeys.find(key => !(openKeys.indexOf(key) > -1));\n\n    let nextOpenKeys = [];\n    if (latestOpenKey) {\n      nextOpenKeys = this.getAncestorKeys(latestOpenKey).concat(latestOpenKey);\n    }\n    if (latestCloseKey) {\n      nextOpenKeys = this.getAncestorKeys(latestCloseKey);\n    }\n    this.setState({ openKeys: nextOpenKeys });\n  }\n  getAncestorKeys = (key) => {\n    const map = {\n      sub3: ['sub2'],\n    };\n    return map[key] || [];\n  }\n  render() {\n    return (\n      <Menu\n        mode=\"inline\"\n        openKeys={this.state.openKeys}\n        selectedKeys={[this.state.current]}\n        style={{ width: 240 }}\n        onOpenChange={this.onOpenChange}\n        onClick={this.handleClick}\n      >\n        <SubMenu key=\"sub1\" title={<span><Icon type=\"mail\" /><span>Navigation One</span></span>}>\n          <Menu.Item key=\"1\">Option 1</Menu.Item>\n          <Menu.Item key=\"2\">Option 2</Menu.Item>\n          <Menu.Item key=\"3\">Option 3</Menu.Item>\n          <Menu.Item key=\"4\">Option 4</Menu.Item>\n        </SubMenu>\n        <SubMenu key=\"sub2\" title={<span><Icon type=\"appstore\" /><span>Navigation Two</span></span>}>\n          <Menu.Item key=\"5\">Option 5</Menu.Item>\n          <Menu.Item key=\"6\">Option 6</Menu.Item>\n          <SubMenu key=\"sub3\" title=\"Submenu\">\n            <Menu.Item key=\"7\">Option 7</Menu.Item>\n            <Menu.Item key=\"8\">Option 8</Menu.Item>\n          </SubMenu>\n        </SubMenu>\n        <SubMenu key=\"sub4\" title={<span><Icon type=\"setting\" /><span>Navigation Three</span></span>}>\n          <Menu.Item key=\"9\">Option 9</Menu.Item>\n          <Menu.Item key=\"10\">Option 10</Menu.Item>\n          <Menu.Item key=\"11\">Option 11</Menu.Item>\n          <Menu.Item key=\"12\">Option 12</Menu.Item>\n        </SubMenu>\n      </Menu>\n    );\n  }\n}\n\nReactDOM.render(<Sider />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Menu, Icon } from 'antd';\nconst SubMenu = Menu.SubMenu;\n\nclass Sider extends React.Component {\n  state = {\n    current: '1',\n    openKeys: [],\n  }\n  handleClick = (e) => {\n    console.log('Clicked: ', e);\n    this.setState({ current: e.key });\n  }\n  onOpenChange = (openKeys) => {\n    const state = this.state;\n    const latestOpenKey = openKeys.find(key => !(state.openKeys.indexOf(key) > -1));\n    const latestCloseKey = state.openKeys.find(key => !(openKeys.indexOf(key) > -1));\n\n    let nextOpenKeys = [];\n    if (latestOpenKey) {\n      nextOpenKeys = this.getAncestorKeys(latestOpenKey).concat(latestOpenKey);\n    }\n    if (latestCloseKey) {\n      nextOpenKeys = this.getAncestorKeys(latestCloseKey);\n    }\n    this.setState({ openKeys: nextOpenKeys });\n  }\n  getAncestorKeys = (key) => {\n    const map = {\n      sub3: ['sub2'],\n    };\n    return map[key] || [];\n  }\n  render() {\n    return (\n      <Menu\n        mode=\"inline\"\n        openKeys={this.state.openKeys}\n        selectedKeys={[this.state.current]}\n        style={{ width: 240 }}\n        onOpenChange={this.onOpenChange}\n        onClick={this.handleClick}\n      >\n        <SubMenu key=\"sub1\" title={<span><Icon type=\"mail\" /><span>Navigation One</span></span>}>\n          <Menu.Item key=\"1\">Option 1</Menu.Item>\n          <Menu.Item key=\"2\">Option 2</Menu.Item>\n          <Menu.Item key=\"3\">Option 3</Menu.Item>\n          <Menu.Item key=\"4\">Option 4</Menu.Item>\n        </SubMenu>\n        <SubMenu key=\"sub2\" title={<span><Icon type=\"appstore\" /><span>Navigation Two</span></span>}>\n          <Menu.Item key=\"5\">Option 5</Menu.Item>\n          <Menu.Item key=\"6\">Option 6</Menu.Item>\n          <SubMenu key=\"sub3\" title=\"Submenu\">\n            <Menu.Item key=\"7\">Option 7</Menu.Item>\n            <Menu.Item key=\"8\">Option 8</Menu.Item>\n          </SubMenu>\n        </SubMenu>\n        <SubMenu key=\"sub4\" title={<span><Icon type=\"setting\" /><span>Navigation Three</span></span>}>\n          <Menu.Item key=\"9\">Option 9</Menu.Item>\n          <Menu.Item key=\"10\">Option 10</Menu.Item>\n          <Menu.Item key=\"11\">Option 11</Menu.Item>\n          <Menu.Item key=\"12\">Option 12</Menu.Item>\n        </SubMenu>\n      </Menu>\n    );\n  }\n}\n\nexport default function DemoComponent_menu_sider_current() {\nreturn(<Sider />);\n};\n\nexport const demo = <DemoComponent_menu_sider_current key=\"DemoComponent_menu_sider_current\" />;\n"],"cssCodes":[]},{"name":"switch_mode","content":"---\norder: 5\ntitle:\n  zh-CN: 切换菜单类型\n  en-US: Switch the menu type\n---\n\n## zh-CN\n\n展示动态切换模式。\n\n## en-US\n\nShow the dynamic switching mode (between 'inline' and 'vertical').\n\n````jsx\nimport { Menu, Icon, Switch } from 'antd';\nconst { SubMenu } = Menu;\n\nclass Sider extends React.Component {\n  state = {\n    mode: 'inline',\n    theme: 'light',\n  }\n  changeMode = (value) => {\n    this.setState({\n      mode: value ? 'vertical' : 'inline',\n    });\n  }\n  changeTheme = (value) => {\n    this.setState({\n      theme: value ? 'dark' : 'light',\n    });\n  }\n  render() {\n    return (\n      <div>\n        <Switch onChange={this.changeMode} /> Change Mode\n        <span className=\"ant-divider\" style={{ margin: '0 1em' }} />\n        <Switch onChange={this.changeTheme} /> Change Theme\n        <br />\n        <br />\n        <Menu\n          style={{ width: 240 }}\n          defaultSelectedKeys={['1']}\n          defaultOpenKeys={['sub1']}\n          mode={this.state.mode}\n          theme={this.state.theme}\n        >\n          <Menu.Item key=\"1\">\n            <Icon type=\"mail\" />\n            Navigation One\n          </Menu.Item>\n          <Menu.Item key=\"2\">\n            <Icon type=\"calendar\" />\n            Navigation Two\n          </Menu.Item>\n          <SubMenu key=\"sub1\" title={<span><Icon type=\"appstore\" /><span>Navigation Three</span></span>}>\n            <Menu.Item key=\"3\">Option 3</Menu.Item>\n            <Menu.Item key=\"4\">Option 4</Menu.Item>\n            <SubMenu key=\"sub2\" title=\"Submenu\">\n              <Menu.Item key=\"5\">Option 5</Menu.Item>\n              <Menu.Item key=\"6\">Option 6</Menu.Item>\n            </SubMenu>\n          </SubMenu>\n          <SubMenu key=\"sub2\" title={<span><Icon type=\"setting\" /><span>Navigation Four</span></span>}>\n            <Menu.Item key=\"7\">Option 7</Menu.Item>\n            <Menu.Item key=\"8\">Option 8</Menu.Item>\n            <Menu.Item key=\"9\">Option 9</Menu.Item>\n            <Menu.Item key=\"10\">Option 10</Menu.Item>\n          </SubMenu>\n        </Menu>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Sider />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Menu, Icon, Switch } from 'antd';\nconst { SubMenu } = Menu;\n\nclass Sider extends React.Component {\n  state = {\n    mode: 'inline',\n    theme: 'light',\n  }\n  changeMode = (value) => {\n    this.setState({\n      mode: value ? 'vertical' : 'inline',\n    });\n  }\n  changeTheme = (value) => {\n    this.setState({\n      theme: value ? 'dark' : 'light',\n    });\n  }\n  render() {\n    return (\n      <div>\n        <Switch onChange={this.changeMode} /> Change Mode\n        <span className=\"ant-divider\" style={{ margin: '0 1em' }} />\n        <Switch onChange={this.changeTheme} /> Change Theme\n        <br />\n        <br />\n        <Menu\n          style={{ width: 240 }}\n          defaultSelectedKeys={['1']}\n          defaultOpenKeys={['sub1']}\n          mode={this.state.mode}\n          theme={this.state.theme}\n        >\n          <Menu.Item key=\"1\">\n            <Icon type=\"mail\" />\n            Navigation One\n          </Menu.Item>\n          <Menu.Item key=\"2\">\n            <Icon type=\"calendar\" />\n            Navigation Two\n          </Menu.Item>\n          <SubMenu key=\"sub1\" title={<span><Icon type=\"appstore\" /><span>Navigation Three</span></span>}>\n            <Menu.Item key=\"3\">Option 3</Menu.Item>\n            <Menu.Item key=\"4\">Option 4</Menu.Item>\n            <SubMenu key=\"sub2\" title=\"Submenu\">\n              <Menu.Item key=\"5\">Option 5</Menu.Item>\n              <Menu.Item key=\"6\">Option 6</Menu.Item>\n            </SubMenu>\n          </SubMenu>\n          <SubMenu key=\"sub2\" title={<span><Icon type=\"setting\" /><span>Navigation Four</span></span>}>\n            <Menu.Item key=\"7\">Option 7</Menu.Item>\n            <Menu.Item key=\"8\">Option 8</Menu.Item>\n            <Menu.Item key=\"9\">Option 9</Menu.Item>\n            <Menu.Item key=\"10\">Option 10</Menu.Item>\n          </SubMenu>\n        </Menu>\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_menu_switch_mode() {\nreturn(<Sider />);\n};\n\nexport const demo = <DemoComponent_menu_switch_mode key=\"DemoComponent_menu_switch_mode\" />;\n"],"cssCodes":[]},{"name":"theme","content":"---\norder: 4\ntitle:\n  zh-CN: 主题\n  en-US: Menu Themes\n---\n\n## zh-CN\n\n内建了两套主题 `light|dark`，默认 `light`。\n\n## en-US\n\nThere are two built-in themes: 'light' and 'dark'. The default value is 'light'.\n\n````jsx\nimport { Menu, Icon, Switch } from 'antd';\nconst SubMenu = Menu.SubMenu;\n\nclass Sider extends React.Component {\n  state = {\n    theme: 'dark',\n    current: '1',\n  }\n  changeTheme = (value) => {\n    this.setState({\n      theme: value ? 'dark' : 'light',\n    });\n  }\n  handleClick = (e) => {\n    console.log('click ', e);\n    this.setState({\n      current: e.key,\n    });\n  }\n  render() {\n    return (\n      <div>\n        <Switch\n          checked={this.state.theme === 'dark'}\n          onChange={this.changeTheme}\n          checkedChildren=\"Dark\"\n          unCheckedChildren=\"Light\"\n        />\n        <br />\n        <br />\n        <Menu\n          theme={this.state.theme}\n          onClick={this.handleClick}\n          style={{ width: 240 }}\n          defaultOpenKeys={['sub1']}\n          selectedKeys={[this.state.current]}\n          mode=\"inline\"\n        >\n          <SubMenu key=\"sub1\" title={<span><Icon type=\"mail\" /><span>Navigation One</span></span>}>\n            <Menu.Item key=\"1\">Option 1</Menu.Item>\n            <Menu.Item key=\"2\">Option 2</Menu.Item>\n            <Menu.Item key=\"3\">Option 3</Menu.Item>\n            <Menu.Item key=\"4\">Option 4</Menu.Item>\n          </SubMenu>\n          <SubMenu key=\"sub2\" title={<span><Icon type=\"appstore\" /><span>Navigtion Two</span></span>}>\n            <Menu.Item key=\"5\">Option 5</Menu.Item>\n            <Menu.Item key=\"6\">Option 6</Menu.Item>\n            <SubMenu key=\"sub3\" title=\"Submenu\">\n              <Menu.Item key=\"7\">Option 7</Menu.Item>\n              <Menu.Item key=\"8\">Option 8</Menu.Item>\n            </SubMenu>\n          </SubMenu>\n          <SubMenu key=\"sub4\" title={<span><Icon type=\"setting\" /><span>Navigation Three</span></span>}>\n            <Menu.Item key=\"9\">Option 9</Menu.Item>\n            <Menu.Item key=\"10\">Option 10</Menu.Item>\n            <Menu.Item key=\"11\">Option 11</Menu.Item>\n            <Menu.Item key=\"12\">Option 12</Menu.Item>\n          </SubMenu>\n        </Menu>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Sider />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Menu, Icon, Switch } from 'antd';\nconst SubMenu = Menu.SubMenu;\n\nclass Sider extends React.Component {\n  state = {\n    theme: 'dark',\n    current: '1',\n  }\n  changeTheme = (value) => {\n    this.setState({\n      theme: value ? 'dark' : 'light',\n    });\n  }\n  handleClick = (e) => {\n    console.log('click ', e);\n    this.setState({\n      current: e.key,\n    });\n  }\n  render() {\n    return (\n      <div>\n        <Switch\n          checked={this.state.theme === 'dark'}\n          onChange={this.changeTheme}\n          checkedChildren=\"Dark\"\n          unCheckedChildren=\"Light\"\n        />\n        <br />\n        <br />\n        <Menu\n          theme={this.state.theme}\n          onClick={this.handleClick}\n          style={{ width: 240 }}\n          defaultOpenKeys={['sub1']}\n          selectedKeys={[this.state.current]}\n          mode=\"inline\"\n        >\n          <SubMenu key=\"sub1\" title={<span><Icon type=\"mail\" /><span>Navigation One</span></span>}>\n            <Menu.Item key=\"1\">Option 1</Menu.Item>\n            <Menu.Item key=\"2\">Option 2</Menu.Item>\n            <Menu.Item key=\"3\">Option 3</Menu.Item>\n            <Menu.Item key=\"4\">Option 4</Menu.Item>\n          </SubMenu>\n          <SubMenu key=\"sub2\" title={<span><Icon type=\"appstore\" /><span>Navigtion Two</span></span>}>\n            <Menu.Item key=\"5\">Option 5</Menu.Item>\n            <Menu.Item key=\"6\">Option 6</Menu.Item>\n            <SubMenu key=\"sub3\" title=\"Submenu\">\n              <Menu.Item key=\"7\">Option 7</Menu.Item>\n              <Menu.Item key=\"8\">Option 8</Menu.Item>\n            </SubMenu>\n          </SubMenu>\n          <SubMenu key=\"sub4\" title={<span><Icon type=\"setting\" /><span>Navigation Three</span></span>}>\n            <Menu.Item key=\"9\">Option 9</Menu.Item>\n            <Menu.Item key=\"10\">Option 10</Menu.Item>\n            <Menu.Item key=\"11\">Option 11</Menu.Item>\n            <Menu.Item key=\"12\">Option 12</Menu.Item>\n          </SubMenu>\n        </Menu>\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_menu_theme() {\nreturn(<Sider />);\n};\n\nexport const demo = <DemoComponent_menu_theme key=\"DemoComponent_menu_theme\" />;\n"],"cssCodes":[]},{"name":"vertical","content":"---\norder: 3\ntitle:\n  zh-CN: 垂直菜单\n  en-US: Vertical menu\n---\n\n## zh-CN\n\n子菜单是弹出的形式。\n\n## en-US\n\nSubmenus open as pop-ups.\n\n````jsx\nimport { Menu, Icon } from 'antd';\nconst SubMenu = Menu.SubMenu;\nconst MenuItemGroup = Menu.ItemGroup;\n\nfunction handleClick(e) {\n  console.log('click', e);\n}\n\nReactDOM.render(\n  <Menu onClick={handleClick} style={{ width: 240 }} mode=\"vertical\">\n    <SubMenu key=\"sub1\" title={<span><Icon type=\"mail\" /><span>Navigation One</span></span>}>\n      <MenuItemGroup title=\"Item 1\">\n        <Menu.Item key=\"1\">Option 1</Menu.Item>\n        <Menu.Item key=\"2\">Option 2</Menu.Item>\n      </MenuItemGroup>\n      <MenuItemGroup title=\"Iteom 2\">\n        <Menu.Item key=\"3\">Option 3</Menu.Item>\n        <Menu.Item key=\"4\">Option 4</Menu.Item>\n      </MenuItemGroup>\n    </SubMenu>\n    <SubMenu key=\"sub2\" title={<span><Icon type=\"appstore\" /><span>Navigation Two</span></span>}>\n      <Menu.Item key=\"5\">Option 5</Menu.Item>\n      <Menu.Item key=\"6\">Option 6</Menu.Item>\n      <SubMenu key=\"sub3\" title=\"Submenu\">\n        <Menu.Item key=\"7\">Option 7</Menu.Item>\n        <Menu.Item key=\"8\">Option 8</Menu.Item>\n      </SubMenu>\n    </SubMenu>\n    <SubMenu key=\"sub4\" title={<span><icon type=\"setting\" /><span>Navigation Three</span></span>}>\n      <Menu.Item key=\"9\">Option 9</Menu.Item>\n      <Menu.Item key=\"10\">Option 10</Menu.Item>\n      <Menu.Item key=\"11\">Option 11</Menu.Item>\n      <Menu.Item key=\"12\">Option 12</Menu.Item>\n    </SubMenu>\n  </Menu>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Menu, Icon } from 'antd';\nconst SubMenu = Menu.SubMenu;\nconst MenuItemGroup = Menu.ItemGroup;\n\nfunction handleClick(e) {\n  console.log('click', e);\n}\n\nexport default function DemoComponent_menu_vertical() {\nreturn(\n  <Menu onClick={handleClick} style={{ width: 240 }} mode=\"vertical\">\n    <SubMenu key=\"sub1\" title={<span><Icon type=\"mail\" /><span>Navigation One</span></span>}>\n      <MenuItemGroup title=\"Item 1\">\n        <Menu.Item key=\"1\">Option 1</Menu.Item>\n        <Menu.Item key=\"2\">Option 2</Menu.Item>\n      </MenuItemGroup>\n      <MenuItemGroup title=\"Iteom 2\">\n        <Menu.Item key=\"3\">Option 3</Menu.Item>\n        <Menu.Item key=\"4\">Option 4</Menu.Item>\n      </MenuItemGroup>\n    </SubMenu>\n    <SubMenu key=\"sub2\" title={<span><Icon type=\"appstore\" /><span>Navigation Two</span></span>}>\n      <Menu.Item key=\"5\">Option 5</Menu.Item>\n      <Menu.Item key=\"6\">Option 6</Menu.Item>\n      <SubMenu key=\"sub3\" title=\"Submenu\">\n        <Menu.Item key=\"7\">Option 7</Menu.Item>\n        <Menu.Item key=\"8\">Option 8</Menu.Item>\n      </SubMenu>\n    </SubMenu>\n    <SubMenu key=\"sub4\" title={<span><icon type=\"setting\" /><span>Navigation Three</span></span>}>\n      <Menu.Item key=\"9\">Option 9</Menu.Item>\n      <Menu.Item key=\"10\">Option 10</Menu.Item>\n      <Menu.Item key=\"11\">Option 11</Menu.Item>\n      <Menu.Item key=\"12\">Option 12</Menu.Item>\n    </SubMenu>\n  </Menu>\n);\n};\n\nexport const demo = <DemoComponent_menu_vertical key=\"DemoComponent_menu_vertical\" />;\n"],"cssCodes":[]}]},{"name":"message","demos":[{"name":"duration","content":"---\norder: 2\ntitle:\n  zh-CN: 修改延时\n  en-US: Customize duration\n---\n\n## zh-CN\n\n自定义时长 `10s`，默认时长为 `1.5s`。\n\n## en-US\n\nCustomize message display duration from default `1.5s` to `10s`.\n\n````jsx\nimport { message, Button } from 'antd';\n\nconst success = () => {\n  message.success('This is a prompt message for success, and it will disappear in 10 seconds', 10);\n};\n\nReactDOM.render(\n  <Button onClick={success}>Customized display duration</Button>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { message, Button } from 'antd';\n\nconst success = () => {\n  message.success('This is a prompt message for success, and it will disappear in 10 seconds', 10);\n};\n\nexport default function DemoComponent_message_duration() {\nreturn(\n  <Button onClick={success}>Customized display duration</Button>\n);\n};\n\nexport const demo = <DemoComponent_message_duration key=\"DemoComponent_message_duration\" />;\n"],"cssCodes":[]},{"name":"info","content":"---\norder: 0\ntitle:\n  zh-CN: 普通提示\n  en-US: Normal prompt\n---\n\n## zh-CN\n\n信息提醒反馈。\n\n## en-US\n\nNormal messages as feedbacks.\n\n````jsx\nimport { message, Button } from 'antd';\n\nconst info = () => {\n  message.info('This is a normal message');\n};\n\nReactDOM.render(\n  <Button type=\"primary\" onClick={info}>Display normal message</Button>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { message, Button } from 'antd';\n\nconst info = () => {\n  message.info('This is a normal message');\n};\n\nexport default function DemoComponent_message_info() {\nreturn(\n  <Button type=\"primary\" onClick={info}>Display normal message</Button>\n);\n};\n\nexport const demo = <DemoComponent_message_info key=\"DemoComponent_message_info\" />;\n"],"cssCodes":[]},{"name":"loading","content":"---\norder: 3\ntitle:\n  zh-CN: 加载中\n  en-US: Message of loading\n---\n\n## zh-CN\n\n进行全局 loading，异步自行移除。\n\n## en-US\n\nDisplay a global loading indicator, which is dismissed by itself asynchronously.\n\n````jsx\nimport { message, Button } from 'antd';\n\nconst success = () => {\n  const hide = message.loading('Action in progress..', 0);\n  // Dismiss manually and asynchronously\n  setTimeout(hide, 2500);\n};\n\nReactDOM.render(\n  <Button onClick={success}>Display a loading indicator</Button>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { message, Button } from 'antd';\n\nconst success = () => {\n  const hide = message.loading('Action in progress..', 0);\n  // Dismiss manually and asynchronously\n  setTimeout(hide, 2500);\n};\n\nexport default function DemoComponent_message_loading() {\nreturn(\n  <Button onClick={success}>Display a loading indicator</Button>\n);\n};\n\nexport const demo = <DemoComponent_message_loading key=\"DemoComponent_message_loading\" />;\n"],"cssCodes":[]},{"name":"other","content":"---\norder: 1\ntitle:\n  zh-CN: 其他提示类型\n  en-US: Other types of message\n---\n\n## zh-CN\n\n包括成功、失败、警告。\n\n## en-US\n\nMessages of success, error and warning types.\n\n````jsx\nimport { message, Button } from 'antd';\n\nconst success = () => {\n  message.success('This is a message of success');\n};\n\nconst error = () => {\n  message.error('This is a message of error');\n};\n\nconst warning = () => {\n  message.warning('This is message of warning');\n};\n\nReactDOM.render(\n  <div>\n    <Button onClick={success}>Success</Button>\n    <Button onClick={error}>Error</Button>\n    <Button onClick={warning}>Warning</Button>\n  </div>\n, mountNode);\n````\n\n<style>\n#components-message-demo-other .ant-btn {\n  margin-right: 8px;\n}\n</style>\n","jsCodes":["import React from 'react';\nimport { message, Button } from 'antd';\n\nconst success = () => {\n  message.success('This is a message of success');\n};\n\nconst error = () => {\n  message.error('This is a message of error');\n};\n\nconst warning = () => {\n  message.warning('This is message of warning');\n};\n\nexport default function DemoComponent_message_other() {\nreturn(\n  <div>\n    <Button onClick={success}>Success</Button>\n    <Button onClick={error}>Error</Button>\n    <Button onClick={warning}>Warning</Button>\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_message_other key=\"DemoComponent_message_other\" />;\n"],"cssCodes":[]}]},{"name":"modal","demos":[{"name":"async","content":"---\norder: 1\ntitle:\n  zh-CN: 异步关闭\n  en-US: Asynchronously close\n---\n\n## zh-CN\n\n点击确定后异步关闭对话框，例如提交表单。\n\n## en-US\n\nAsynchronously close a modal dialog when a user clicked OK button, for example,\nyou can use this pattern when you submit a form.\n\n````jsx\nimport { Modal, Button } from 'antd';\n\nclass App extends React.Component {\n  state = {\n    ModalText: 'Content of the modal',\n    visible: false,\n  }\n  showModal = () => {\n    this.setState({\n      visible: true,\n    });\n  }\n  handleOk = () => {\n    this.setState({\n      ModalText: 'The modal will be closed after two seconds',\n      confirmLoading: true,\n    });\n    setTimeout(() => {\n      this.setState({\n        visible: false,\n        confirmLoading: false,\n      });\n    }, 2000);\n  }\n  handleCancel = () => {\n    console.log('Clicked cancel button');\n    this.setState({\n      visible: false,\n    });\n  }\n  render() {\n    const { visible, confirmLoading, ModalText } = this.state;\n    return (\n      <div>\n        <Button type=\"primary\" onClick={this.showModal}>Open</Button>\n        <Modal title=\"Title\"\n          visible={visible}\n          onOk={this.handleOk}\n          confirmLoading={confirmLoading}\n          onCancel={this.handleCancel}\n        >\n          <p>{ModalText}</p>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Modal, Button } from 'antd';\n\nclass App extends React.Component {\n  state = {\n    ModalText: 'Content of the modal',\n    visible: false,\n  }\n  showModal = () => {\n    this.setState({\n      visible: true,\n    });\n  }\n  handleOk = () => {\n    this.setState({\n      ModalText: 'The modal will be closed after two seconds',\n      confirmLoading: true,\n    });\n    setTimeout(() => {\n      this.setState({\n        visible: false,\n        confirmLoading: false,\n      });\n    }, 2000);\n  }\n  handleCancel = () => {\n    console.log('Clicked cancel button');\n    this.setState({\n      visible: false,\n    });\n  }\n  render() {\n    const { visible, confirmLoading, ModalText } = this.state;\n    return (\n      <div>\n        <Button type=\"primary\" onClick={this.showModal}>Open</Button>\n        <Modal title=\"Title\"\n          visible={visible}\n          onOk={this.handleOk}\n          confirmLoading={confirmLoading}\n          onCancel={this.handleCancel}\n        >\n          <p>{ModalText}</p>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_modal_async() {\nreturn(<App />);\n};\n\nexport const demo = <DemoComponent_modal_async key=\"DemoComponent_modal_async\" />;\n"],"cssCodes":[]},{"name":"basic","content":"---\norder: 0\ntitle:\n  zh-CN: 基本\n  en-US: Basic\n---\n\n## zh-CN\n\n第一个对话框。\n\n## en-US\n\nBasic modal.\n\n````jsx\nimport { Modal, Button } from 'antd';\n\nclass App extends React.Component {\n  state = { visible: false }\n  showModal = () => {\n    this.setState({\n      visible: true,\n    });\n  }\n  handleOk = (e) => {\n    console.log(e);\n    this.setState({\n      visible: false,\n    });\n  }\n  handleCancel = (e) => {\n    console.log(e);\n    this.setState({\n      visible: false,\n    });\n  }\n  render() {\n    return (\n      <div>\n        <Button type=\"primary\" onClick={this.showModal}>Open</Button>\n        <Modal\n          title=\"Basic Modal\"\n          visible={this.state.visible}\n          onOk={this.handleOk}\n          onCancel={this.handleCancel}\n        >\n          <p>Some contents...</p>\n          <p>Some contents...</p>\n          <p>Some contents...</p>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Modal, Button } from 'antd';\n\nclass App extends React.Component {\n  state = { visible: false }\n  showModal = () => {\n    this.setState({\n      visible: true,\n    });\n  }\n  handleOk = (e) => {\n    console.log(e);\n    this.setState({\n      visible: false,\n    });\n  }\n  handleCancel = (e) => {\n    console.log(e);\n    this.setState({\n      visible: false,\n    });\n  }\n  render() {\n    return (\n      <div>\n        <Button type=\"primary\" onClick={this.showModal}>Open</Button>\n        <Modal\n          title=\"Basic Modal\"\n          visible={this.state.visible}\n          onOk={this.handleOk}\n          onCancel={this.handleCancel}\n        >\n          <p>Some contents...</p>\n          <p>Some contents...</p>\n          <p>Some contents...</p>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_modal_basic() {\nreturn(<App />);\n};\n\nexport const demo = <DemoComponent_modal_basic key=\"DemoComponent_modal_basic\" />;\n"],"cssCodes":[]},{"name":"confirm_promise","content":"---\norder: 5\ntitle:\n  zh-CN: 确认对话框\n  en-US: Confirmation modal dialog\n---\n\n## zh-CN\n\n使用 `confirm()` 可以快捷地弹出确认框。onCancel/onOk 返回 promise 可以延迟关闭\n\n## en-US\n\nTo use `confirm()` to popup confirmation modal dialog. Let onCancel/onOk function return a promise object to\ndelay closing the dialog.\n\n````jsx\nimport { Modal, Button } from 'antd';\nconst confirm = Modal.confirm;\n\nfunction showConfirm() {\n  confirm({\n    title: 'Do you want to delete these items?',\n    content: 'When clicked the OK button, this dialog will be closed after 1 second',\n    onOk() {\n      return new Promise((resolve, reject) => {\n        setTimeout(Math.random() > 0.5 ? resolve : reject, 1000);\n      }).catch(() => console.log('Oops errors!'));\n    },\n    onCancel() {},\n  });\n}\n\nReactDOM.render(\n  <Button onClick={showConfirm}>\n    Confirm\n  </Button>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Modal, Button } from 'antd';\nconst confirm = Modal.confirm;\n\nfunction showConfirm() {\n  confirm({\n    title: 'Do you want to delete these items?',\n    content: 'When clicked the OK button, this dialog will be closed after 1 second',\n    onOk() {\n      return new Promise((resolve, reject) => {\n        setTimeout(Math.random() > 0.5 ? resolve : reject, 1000);\n      }).catch(() => console.log('Oops errors!'));\n    },\n    onCancel() {},\n  });\n}\n\nexport default function DemoComponent_modal_confirm_promise() {\nreturn(\n  <Button onClick={showConfirm}>\n    Confirm\n  </Button>\n);\n};\n\nexport const demo = <DemoComponent_modal_confirm_promise key=\"DemoComponent_modal_confirm_promise\" />;\n"],"cssCodes":[]},{"name":"confirm","content":"---\norder: 3\ntitle:\n  zh-CN: 确认对话框\n  en-US: Confirmation modal dialog\n---\n\n## zh-CN\n\n使用 `confirm()` 可以快捷地弹出确认框。\n\n## en-US\n\nTo use `confirm()` to popup a confirmation modal dialog.\n\n````jsx\nimport { Modal, Button } from 'antd';\nconst confirm = Modal.confirm;\n\nfunction showConfirm() {\n  confirm({\n    title: 'Do you Want to delete these items?',\n    content: 'Some descriptions',\n    onOk() {\n      console.log('OK');\n    },\n    onCancel() {\n      console.log('Cancel');\n    },\n  });\n}\n\nReactDOM.render(\n  <Button onClick={showConfirm}>\n    Confirm\n  </Button>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Modal, Button } from 'antd';\nconst confirm = Modal.confirm;\n\nfunction showConfirm() {\n  confirm({\n    title: 'Do you Want to delete these items?',\n    content: 'Some descriptions',\n    onOk() {\n      console.log('OK');\n    },\n    onCancel() {\n      console.log('Cancel');\n    },\n  });\n}\n\nexport default function DemoComponent_modal_confirm() {\nreturn(\n  <Button onClick={showConfirm}>\n    Confirm\n  </Button>\n);\n};\n\nexport const demo = <DemoComponent_modal_confirm key=\"DemoComponent_modal_confirm\" />;\n"],"cssCodes":[]},{"name":"footer","content":"---\norder: 2\ntitle:\n  zh-CN: 自定义页脚\n  en-US: Customized Footer\n---\n\n## zh-CN\n\n更复杂的例子，自定义了页脚的按钮，点击提交后进入 loading 状态，完成后关闭。\n\n不需要默认确定取消按钮时，你可以把 `footer` 设为 `null`。\n\n## en-US\n\nA more complex example which define a customized footer button bar,\nthe dialog will change to loading state after clicking submit button, when the loading is over,\nthe modal dialog will be closed.\n\nYou could set `footer` to `null` if you don't need default footer buttons.\n\n````jsx\nimport { Modal, Button } from 'antd';\n\nclass App extends React.Component {\n  state = {\n    loading: false,\n    visible: false,\n  }\n  showModal = () => {\n    this.setState({\n      visible: true,\n    });\n  }\n  handleOk = () => {\n    this.setState({ loading: true });\n    setTimeout(() => {\n      this.setState({ loading: false, visible: false });\n    }, 3000);\n  }\n  handleCancel = () => {\n    this.setState({ visible: false });\n  }\n  render() {\n    const { visible, loading } = this.state;\n    return (\n      <div>\n        <Button type=\"primary\" onClick={this.showModal}>\n          Open\n        </Button>\n        <Modal\n          visible={visible}\n          title=\"Title\"\n          onOk={this.handleOk}\n          onCancel={this.handleCancel}\n          footer={[\n            <Button key=\"back\" size=\"large\" onClick={this.handleCancel}>Return</Button>,\n            <Button key=\"submit\" type=\"primary\" size=\"large\" loading={loading} onClick={this.handleOk}>\n              Submit\n            </Button>,\n          ]}\n        >\n          <p>Some contents...</p>\n          <p>Some contents...</p>\n          <p>Some contents...</p>\n          <p>Some contents...</p>\n          <p>Some contents...</p>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Modal, Button } from 'antd';\n\nclass App extends React.Component {\n  state = {\n    loading: false,\n    visible: false,\n  }\n  showModal = () => {\n    this.setState({\n      visible: true,\n    });\n  }\n  handleOk = () => {\n    this.setState({ loading: true });\n    setTimeout(() => {\n      this.setState({ loading: false, visible: false });\n    }, 3000);\n  }\n  handleCancel = () => {\n    this.setState({ visible: false });\n  }\n  render() {\n    const { visible, loading } = this.state;\n    return (\n      <div>\n        <Button type=\"primary\" onClick={this.showModal}>\n          Open\n        </Button>\n        <Modal\n          visible={visible}\n          title=\"Title\"\n          onOk={this.handleOk}\n          onCancel={this.handleCancel}\n          footer={[\n            <Button key=\"back\" size=\"large\" onClick={this.handleCancel}>Return</Button>,\n            <Button key=\"submit\" type=\"primary\" size=\"large\" loading={loading} onClick={this.handleOk}>\n              Submit\n            </Button>,\n          ]}\n        >\n          <p>Some contents...</p>\n          <p>Some contents...</p>\n          <p>Some contents...</p>\n          <p>Some contents...</p>\n          <p>Some contents...</p>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_modal_footer() {\nreturn(<App />);\n};\n\nexport const demo = <DemoComponent_modal_footer key=\"DemoComponent_modal_footer\" />;\n"],"cssCodes":[]},{"name":"info","content":"---\norder: 5\ntitle:\n  zh-CN: 信息提示\n  en-US: Information modal dialog\n---\n\n## zh-CN\n\n各种类型的信息提示，只提供一个按钮用于关闭。\n\n## en-US\n\nIn the various types of information modal dialog, only one button to close dialog is provided.\n\n````jsx\nimport { Modal, Button } from 'antd';\n\nfunction info() {\n  Modal.info({\n    title: 'This is a notification message',\n    content: (\n      <div>\n        <p>some messages...some messages...</p>\n        <p>some messages...some messages...</p>\n      </div>\n    ),\n    onOk() {},\n  });\n}\n\nfunction success() {\n  Modal.success({\n    title: 'This is a success message',\n    content: 'some messages...some messages...',\n  });\n}\n\nfunction error() {\n  Modal.error({\n    title: 'This is an error message',\n    content: 'some messages...some messages...',\n  });\n}\n\nfunction warning() {\n  Modal.warning({\n    title: 'This is a warning message',\n    content: 'some messages...some messages...',\n  });\n}\n\nReactDOM.render(\n  <div>\n    <Button onClick={info}>Info</Button>\n    <Button onClick={success}>Success</Button>\n    <Button onClick={error}>Error</Button>\n    <Button onClick={warning}>Warning</Button>\n  </div>,\n  mountNode\n);\n````\n","jsCodes":["import React from 'react';\nimport { Modal, Button } from 'antd';\n\nfunction info() {\n  Modal.info({\n    title: 'This is a notification message',\n    content: (\n      <div>\n        <p>some messages...some messages...</p>\n        <p>some messages...some messages...</p>\n      </div>\n    ),\n    onOk() {},\n  });\n}\n\nfunction success() {\n  Modal.success({\n    title: 'This is a success message',\n    content: 'some messages...some messages...',\n  });\n}\n\nfunction error() {\n  Modal.error({\n    title: 'This is an error message',\n    content: 'some messages...some messages...',\n  });\n}\n\nfunction warning() {\n  Modal.warning({\n    title: 'This is a warning message',\n    content: 'some messages...some messages...',\n  });\n}\n\nexport default function DemoComponent_modal_info() {\nreturn(\n  <div>\n    <Button onClick={info}>Info</Button>\n    <Button onClick={success}>Success</Button>\n    <Button onClick={error}>Error</Button>\n    <Button onClick={warning}>Warning</Button>\n  </div>);\n};\n\nexport const demo = <DemoComponent_modal_info key=\"DemoComponent_modal_info\" />;\n"],"cssCodes":[]},{"name":"locale","content":"---\norder: 6\ntitle:\n  zh-CN: 国际化\n  en-US: Internationalization\n---\n\n## zh-CN\n\n设置 `okText` 与 `cancelText` 以自定义按钮文字。\n\n## en-US\n\nTo customize the text of the buttons, you need to set `okText` and `cancelText` props.\n\n````jsx\nimport { Modal, Button } from 'antd';\n\nclass LocalizedModal extends React.Component {\n  state = { visible: false }\n  showModal = () => {\n    this.setState({\n      visible: true,\n    });\n  }\n  hideModal = () => {\n    this.setState({\n      visible: false,\n    });\n  }\n  render() {\n    return (\n      <div>\n        <Button type=\"primary\" onClick={this.showModal}>Modal</Button>\n        <Modal\n          title=\"Modal\"\n          visible={this.state.visible}\n          onOk={this.hideModal}\n          onCancel={this.hideModal}\n          okText=\"确认\"\n          cancelText=\"取消\"\n        >\n          <p>Bla bla ...</p>\n          <p>Bla bla ...</p>\n          <p>Bla bla ...</p>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nfunction confirm() {\n  Modal.confirm({\n    title: 'Confirm',\n    content: 'Bla bla ...',\n    okText: '确认',\n    cancelText: '取消',\n  });\n}\n\nReactDOM.render(\n  <div>\n    <LocalizedModal />\n    <br />\n    <Button onClick={confirm}>Confirm</Button>\n  </div>,\n  mountNode\n);\n````\n","jsCodes":["import React from 'react';\nimport { Modal, Button } from 'antd';\n\nclass LocalizedModal extends React.Component {\n  state = { visible: false }\n  showModal = () => {\n    this.setState({\n      visible: true,\n    });\n  }\n  hideModal = () => {\n    this.setState({\n      visible: false,\n    });\n  }\n  render() {\n    return (\n      <div>\n        <Button type=\"primary\" onClick={this.showModal}>Modal</Button>\n        <Modal\n          title=\"Modal\"\n          visible={this.state.visible}\n          onOk={this.hideModal}\n          onCancel={this.hideModal}\n          okText=\"确认\"\n          cancelText=\"取消\"\n        >\n          <p>Bla bla ...</p>\n          <p>Bla bla ...</p>\n          <p>Bla bla ...</p>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nfunction confirm() {\n  Modal.confirm({\n    title: 'Confirm',\n    content: 'Bla bla ...',\n    okText: '确认',\n    cancelText: '取消',\n  });\n}\n\nexport default function DemoComponent_modal_locale() {\nreturn(\n  <div>\n    <LocalizedModal />\n    <br />\n    <Button onClick={confirm}>Confirm</Button>\n  </div>);\n};\n\nexport const demo = <DemoComponent_modal_locale key=\"DemoComponent_modal_locale\" />;\n"],"cssCodes":[]},{"name":"manual","content":"---\norder: 7\ntitle:\n  zh-CN: 手动移除\n  en-US: Manual to destroy\n---\n\n## zh-CN\n\n手动关闭modal。\n\n## en-US\n\nManually destroying a modal.\n\n````jsx\nimport { Modal, Button } from 'antd';\n\nfunction success() {\n  const modal = Modal.success({\n    title: 'This is a notification message',\n    content: 'This modal will be destroyed after 1 second',\n  });\n  setTimeout(() => modal.destroy(), 1000);\n}\n\n\nReactDOM.render(\n  <Button onClick={success}>Success</Button>,\n  mountNode\n);\n````\n","jsCodes":["import React from 'react';\nimport { Modal, Button } from 'antd';\n\nfunction success() {\n  const modal = Modal.success({\n    title: 'This is a notification message',\n    content: 'This modal will be destroyed after 1 second',\n  });\n  setTimeout(() => modal.destroy(), 1000);\n}\n\n\nexport default function DemoComponent_modal_manual() {\nreturn(\n  <Button onClick={success}>Success</Button>);\n};\n\nexport const demo = <DemoComponent_modal_manual key=\"DemoComponent_modal_manual\" />;\n"],"cssCodes":[]},{"name":"position","content":"---\norder: 7\ntitle:\n  zh-CN: 自定义位置\n  en-US: To customize the position of modal\n---\n\n## zh-CN\n\n`1.0` 之后，Modal 的 `align` 属性被移除，您可以直接使用 `style.top` 或配合其他样式来设置对话框位置。\n\n## en-US\n\nAfter release `1.0`,  Modal's `align` prop was removed. You can use `style.top` or other styles to\nset position of modal dialog.\n\n````jsx\nimport { Modal, Button } from 'antd';\n\nclass App extends React.Component {\n  state = {\n    modal1Visible: false,\n    modal2Visible: false,\n  }\n  setModal1Visible(modal1Visible) {\n    this.setState({ modal1Visible });\n  }\n  setModal2Visible(modal2Visible) {\n    this.setState({ modal2Visible });\n  }\n  render() {\n    return (\n      <div>\n        <Button type=\"primary\" onClick={() => this.setModal1Visible(true)}>Display a modal dialog at 20px to Top</Button>\n        <Modal\n          title=\"20px to Top\"\n          style={{ top: 20 }}\n          visible={this.state.modal1Visible}\n          onOk={() => this.setModal1Visible(false)}\n          onCancel={() => this.setModal1Visible(false)}\n        >\n          <p>some contents...</p>\n          <p>some contents...</p>\n          <p>some contents...</p>\n        </Modal>\n        <br /><br />\n        <Button type=\"primary\" onClick={() => this.setModal2Visible(true)}>Vertically centered modal dialog</Button>\n        <Modal\n          title=\"Vertically centered modal dialog\"\n          wrapClassName=\"vertical-center-modal\"\n          visible={this.state.modal2Visible}\n          onOk={() => this.setModal2Visible(false)}\n          onCancel={() => this.setModal2Visible(false)}\n        >\n          <p>some contents...</p>\n          <p>some contents...</p>\n          <p>some contents...</p>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n````\n\n````css\n/* use css to set position of modal */\n.vertical-center-modal {\n  text-align: center;\n  white-space: nowrap;\n}\n\n.vertical-center-modal:before {\n  content: '';\n  display: inline-block;\n  height: 100%;\n  vertical-align: middle;\n  width: 0;\n}\n\n.vertical-center-modal .ant-modal {\n  display: inline-block;\n  vertical-align: middle;\n  top: 0;\n  text-align: left;\n}\n\n/*\n// Use flex which not working in IE\n.vertical-center-modal {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.vertical-center-modal .ant-modal {\n  top: 0;\n}\n*/\n````\n","jsCodes":["import React from 'react';\nimport { Modal, Button } from 'antd';\n\nclass App extends React.Component {\n  state = {\n    modal1Visible: false,\n    modal2Visible: false,\n  }\n  setModal1Visible(modal1Visible) {\n    this.setState({ modal1Visible });\n  }\n  setModal2Visible(modal2Visible) {\n    this.setState({ modal2Visible });\n  }\n  render() {\n    return (\n      <div>\n        <Button type=\"primary\" onClick={() => this.setModal1Visible(true)}>Display a modal dialog at 20px to Top</Button>\n        <Modal\n          title=\"20px to Top\"\n          style={{ top: 20 }}\n          visible={this.state.modal1Visible}\n          onOk={() => this.setModal1Visible(false)}\n          onCancel={() => this.setModal1Visible(false)}\n        >\n          <p>some contents...</p>\n          <p>some contents...</p>\n          <p>some contents...</p>\n        </Modal>\n        <br /><br />\n        <Button type=\"primary\" onClick={() => this.setModal2Visible(true)}>Vertically centered modal dialog</Button>\n        <Modal\n          title=\"Vertically centered modal dialog\"\n          wrapClassName=\"vertical-center-modal\"\n          visible={this.state.modal2Visible}\n          onOk={() => this.setModal2Visible(false)}\n          onCancel={() => this.setModal2Visible(false)}\n        >\n          <p>some contents...</p>\n          <p>some contents...</p>\n          <p>some contents...</p>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_modal_position() {\nreturn(<App />);\n};\n\nexport const demo = <DemoComponent_modal_position key=\"DemoComponent_modal_position\" />;\n"],"cssCodes":["/* use css to set position of modal */\n.vertical-center-modal {\n  text-align: center;\n  white-space: nowrap;\n}\n\n.vertical-center-modal:before {\n  content: '';\n  display: inline-block;\n  height: 100%;\n  vertical-align: middle;\n  width: 0;\n}\n\n.vertical-center-modal .ant-modal {\n  display: inline-block;\n  vertical-align: middle;\n  top: 0;\n  text-align: left;\n}\n\n/*\n// Use flex which not working in IE\n.vertical-center-modal {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.vertical-center-modal .ant-modal {\n  top: 0;\n}\n*/\n"]}]},{"name":"notification","demos":[{"name":"basic","content":"---\norder: 0\ntitle:\n  zh-CN: 基本\n  en-US: Basic\n---\n\n## zh-CN\n\n最简单的用法，4.5 秒后自动关闭。\n\n## en-US\n\nThe simplest usage that close the notification box after 4.5s.\n\n````jsx\nimport { Button, notification } from 'antd';\n\nconst openNotification = () => {\n  notification.open({\n    message: 'Notification Title',\n    description: 'This is the content of the notification. This is the content of the notification. This is the content of the notification.',\n  });\n};\n\nReactDOM.render(\n  <Button type=\"primary\" onClick={openNotification}>Open the notification box</Button>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Button, notification } from 'antd';\n\nconst openNotification = () => {\n  notification.open({\n    message: 'Notification Title',\n    description: 'This is the content of the notification. This is the content of the notification. This is the content of the notification.',\n  });\n};\n\nexport default function DemoComponent_notification_basic() {\nreturn(\n  <Button type=\"primary\" onClick={openNotification}>Open the notification box</Button>\n);\n};\n\nexport const demo = <DemoComponent_notification_basic key=\"DemoComponent_notification_basic\" />;\n"],"cssCodes":[]},{"name":"custom_icon","content":"---\norder: 4\ntitle:\n  zh-CN: 自定义图标\n  en-US: Customized Icon\n---\n\n## zh-CN\n\n图标可以被自定义。\n\n## en-US\n\nThe icon can be customized to any react node.\n\n````jsx\nimport { Button, notification, Icon } from 'antd';\n\nconst openNotification = () => {\n  notification.open({\n    message: 'Notification Title',\n    description: 'This is the content of the notification. This is the content of the notification. This is the content of the notification.',\n    icon: <Icon type=\"smile-circle\" style={{ color: '#108ee9' }} />,\n  });\n};\n\nReactDOM.render(\n  <Button type=\"primary\" onClick={openNotification}>Open the notification box</Button>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Button, notification, Icon } from 'antd';\n\nconst openNotification = () => {\n  notification.open({\n    message: 'Notification Title',\n    description: 'This is the content of the notification. This is the content of the notification. This is the content of the notification.',\n    icon: <Icon type=\"smile-circle\" style={{ color: '#108ee9' }} />,\n  });\n};\n\nexport default function DemoComponent_notification_custom_icon() {\nreturn(\n  <Button type=\"primary\" onClick={openNotification}>Open the notification box</Button>\n);\n};\n\nexport const demo = <DemoComponent_notification_custom_icon key=\"DemoComponent_notification_custom_icon\" />;\n"],"cssCodes":[]},{"name":"custom_style","content":"---\norder: 6\ntitle:\n  zh-CN: 自定义样式\n  en-US: Customized style\n---\n\n## zh-CN\n\n使用 style 和 className 来定义样式。\n\n## en-US\n\nThe style and className are available to customize Notification.\n\n````jsx\nimport { Button, notification } from 'antd';\n\nconst openNotification = () => {\n  notification.open({\n    message: 'Notification Title',\n    description: 'This is the content of the notification. This is the content of the notification. This is the content of the notification.',\n    style: {\n      width: 600,\n      marginLeft: 335 - 600,\n    },\n  });\n};\n\nReactDOM.render(\n  <Button type=\"primary\" onClick={openNotification}>Open the notification box</Button>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Button, notification } from 'antd';\n\nconst openNotification = () => {\n  notification.open({\n    message: 'Notification Title',\n    description: 'This is the content of the notification. This is the content of the notification. This is the content of the notification.',\n    style: {\n      width: 600,\n      marginLeft: 335 - 600,\n    },\n  });\n};\n\nexport default function DemoComponent_notification_custom_style() {\nreturn(\n  <Button type=\"primary\" onClick={openNotification}>Open the notification box</Button>\n);\n};\n\nexport const demo = <DemoComponent_notification_custom_style key=\"DemoComponent_notification_custom_style\" />;\n"],"cssCodes":[]},{"name":"duration","content":"---\norder: 1\ntitle:\n  zh-CN: 自动关闭的延时\n  en-US: Duration after which the notification box is closed\n---\n\n## zh-CN\n\n自定义通知框自动关闭的延时，默认`4.5s`，取消自动关闭只要将该值设为 `0` 即可。\n\n## en-US\n\n`Duration` can be used to specify how long the notification stays open. After the duration time elapses,\nthe notification closes automatically. If not specified, default value is 4.5 seconds. If you set the value to 0,\nthe notification box will never close automatically.\n\n````jsx\nimport { Button, notification } from 'antd';\n\nconst openNotification = () => {\n  const args = {\n    message: 'Notification Title',\n    description: 'I will never close automatically. I will be close automatically. I will never close automatically.',\n    duration: 0,\n  };\n  notification.open(args);\n};\n\nReactDOM.render(\n  <Button type=\"primary\" onClick={openNotification}>Open the notification box</Button>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Button, notification } from 'antd';\n\nconst openNotification = () => {\n  const args = {\n    message: 'Notification Title',\n    description: 'I will never close automatically. I will be close automatically. I will never close automatically.',\n    duration: 0,\n  };\n  notification.open(args);\n};\n\nexport default function DemoComponent_notification_duration() {\nreturn(\n  <Button type=\"primary\" onClick={openNotification}>Open the notification box</Button>\n);\n};\n\nexport const demo = <DemoComponent_notification_duration key=\"DemoComponent_notification_duration\" />;\n"],"cssCodes":[]},{"name":"placement","content":"---\norder: 5\ntitle:\n  zh-CN: 位置\n  en-US: Placement\n---\n\n## zh-CN\n\n可以设置通知从右上角、右下角、左下角、左上角弹出。\n\n## en-US\n\nA notification box can pop up from `topRight` or `bottomRight` or `bottomLeft` or `topLeft`.\n\n````jsx\nimport { Button, Select, notification } from 'antd';\n\nconst { Option } = Select;\nconst options = ['topLeft', 'topRight', 'bottomLeft', 'bottomRight'];\nconst openNotification = () => {\n  notification.open({\n    message: 'Notification Title',\n    description: 'This is the content of the notification. This is the content of the notification. This is the content of the notification.',\n  });\n};\n\nReactDOM.render(\n  <div>\n    <Select\n      defaultValue=\"topRight\"\n      style={{ width: 120, marginRight: 10 }}\n      onChange={(val) => {\n        notification.config({\n          placement: val,\n        });\n      }}\n    >\n      {options.map(val => <Option key={val} value={val}>{val}</Option>)}\n    </Select>\n    <Button\n      type=\"primary\"\n      onClick={openNotification}\n    >\n      Open the notification box\n    </Button>\n  </div>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Button, Select, notification } from 'antd';\n\nconst { Option } = Select;\nconst options = ['topLeft', 'topRight', 'bottomLeft', 'bottomRight'];\nconst openNotification = () => {\n  notification.open({\n    message: 'Notification Title',\n    description: 'This is the content of the notification. This is the content of the notification. This is the content of the notification.',\n  });\n};\n\nexport default function DemoComponent_notification_placement() {\nreturn(\n  <div>\n    <Select\n      defaultValue=\"topRight\"\n      style={{ width: 120, marginRight: 10 }}\n      onChange={(val) => {\n        notification.config({\n          placement: val,\n        });\n      }}\n    >\n      {options.map(val => <Option key={val} value={val}>{val}</Option>)}\n    </Select>\n    <Button\n      type=\"primary\"\n      onClick={openNotification}\n    >\n      Open the notification box\n    </Button>\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_notification_placement key=\"DemoComponent_notification_placement\" />;\n"],"cssCodes":[]},{"name":"with_btn","content":"---\norder: 3\ntitle:\n  zh-CN: 自定义按钮\n  en-US: Custom close button\n---\n\n## zh-CN\n\n自定义关闭按钮的样式和文字。\n\n## en-US\n\nTo customize the style or font of the close button.\n\n````jsx\nimport { Button, notification } from 'antd';\n\nconst close = () => {\n  console.log('Notification was closed. Either the close button was clicked or duration time elapsed.');\n};\n\nconst openNotification = () => {\n  const key = `open${Date.now()}`;\n  const btnClick = function () {\n    // to hide notification box\n    notification.close(key);\n  };\n  const btn = (\n    <Button type=\"primary\" size=\"small\" onClick={btnClick}>\n      Confirm\n    </Button>\n  );\n  notification.open({\n    message: 'Notification Title',\n    description: 'A function will be be called after the notification is closed (automatically after the \"duration\" time of manually).',\n    btn,\n    key,\n    onClose: close,\n  });\n};\n\nReactDOM.render(\n  <Button type=\"primary\" onClick={openNotification}>Open the notification box</Button>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Button, notification } from 'antd';\n\nconst close = () => {\n  console.log('Notification was closed. Either the close button was clicked or duration time elapsed.');\n};\n\nconst openNotification = () => {\n  const key = `open${Date.now()}`;\n  const btnClick = function () {\n    // to hide notification box\n    notification.close(key);\n  };\n  const btn = (\n    <Button type=\"primary\" size=\"small\" onClick={btnClick}>\n      Confirm\n    </Button>\n  );\n  notification.open({\n    message: 'Notification Title',\n    description: 'A function will be be called after the notification is closed (automatically after the \"duration\" time of manually).',\n    btn,\n    key,\n    onClose: close,\n  });\n};\n\nexport default function DemoComponent_notification_with_btn() {\nreturn(\n  <Button type=\"primary\" onClick={openNotification}>Open the notification box</Button>\n);\n};\n\nexport const demo = <DemoComponent_notification_with_btn key=\"DemoComponent_notification_with_btn\" />;\n"],"cssCodes":[]},{"name":"with_icon","content":"---\norder: 2\ntitle:\n  zh-CN: 带有图标的通知提醒框\n  en-US: Notification with icon\n---\n\n## zh-CN\n\n通知提醒框左侧有图标。\n\n## en-US\n\nA notification box with a icon at the left side.\n\n````jsx\nimport { Button, notification } from 'antd';\n\nconst openNotificationWithIcon = (type) => {\n  notification[type]({\n    message: 'Notification Title',\n    description: 'This is the content of the notification. This is the content of the notification. This is the content of the notification.',\n  });\n};\n\nReactDOM.render(\n  <div>\n    <Button onClick={() => openNotificationWithIcon('success')}>Success</Button>\n    <Button onClick={() => openNotificationWithIcon('info')}>Info</Button>\n    <Button onClick={() => openNotificationWithIcon('warning')}>Warning</Button>\n    <Button onClick={() => openNotificationWithIcon('error')}>Error</Button>\n  </div>\n, mountNode);\n````\n\n<style>\n.code-box-demo .ant-btn {\n  margin-right: 1em;\n}\n</style>\n","jsCodes":["import React from 'react';\nimport { Button, notification } from 'antd';\n\nconst openNotificationWithIcon = (type) => {\n  notification[type]({\n    message: 'Notification Title',\n    description: 'This is the content of the notification. This is the content of the notification. This is the content of the notification.',\n  });\n};\n\nexport default function DemoComponent_notification_with_icon() {\nreturn(\n  <div>\n    <Button onClick={() => openNotificationWithIcon('success')}>Success</Button>\n    <Button onClick={() => openNotificationWithIcon('info')}>Info</Button>\n    <Button onClick={() => openNotificationWithIcon('warning')}>Warning</Button>\n    <Button onClick={() => openNotificationWithIcon('error')}>Error</Button>\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_notification_with_icon key=\"DemoComponent_notification_with_icon\" />;\n"],"cssCodes":[]}]},{"name":"pagination","demos":[{"name":"basic","content":"---\norder: 0\ntitle:\n  zh-CN: 基本\n  en-US: Basic\n---\n\n## zh-CN\n\n基础分页。\n\n## en-US\n\nBasic pagination.\n\n````jsx\nimport { Pagination } from 'antd';\n\nReactDOM.render(<Pagination defaultCurrent={1} total={50} />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Pagination } from 'antd';\n\nexport default function DemoComponent_pagination_basic() {\nreturn(<Pagination defaultCurrent={1} total={50} />);\n};\n\nexport const demo = <DemoComponent_pagination_basic key=\"DemoComponent_pagination_basic\" />;\n"],"cssCodes":[]},{"name":"changer","content":"---\norder: 2\ntitle:\n  zh-CN: 改变\n  en-US: Changer\n---\n\n## zh-CN\n\n改变每页显示条目数。\n\n## en-US\n\nChange `pageSize`.\n\n````jsx\nimport { Pagination } from 'antd';\n\nfunction onShowSizeChange(current, pageSize) {\n  console.log(current, pageSize);\n}\n\nReactDOM.render(\n  <Pagination showSizeChanger onShowSizeChange={onShowSizeChange} defaultCurrent={3} total={500} />\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Pagination } from 'antd';\n\nfunction onShowSizeChange(current, pageSize) {\n  console.log(current, pageSize);\n}\n\nexport default function DemoComponent_pagination_changer() {\nreturn(\n  <Pagination showSizeChanger onShowSizeChange={onShowSizeChange} defaultCurrent={3} total={500} />\n);\n};\n\nexport const demo = <DemoComponent_pagination_changer key=\"DemoComponent_pagination_changer\" />;\n"],"cssCodes":[]},{"name":"controlled","content":"---\norder: 8\ntitle:\n  zh-CN: 受控\n  en-US: Controlled\n---\n\n## zh-CN\n\n受控制的页码。\n\n## en-US\n\nControlled page number.\n\n````jsx\nimport { Pagination } from 'antd';\n\nclass App extends React.Component {\n  state = {\n    current: 3,\n  }\n  onChange = (page) => {\n    console.log(page);\n    this.setState({\n      current: page,\n    });\n  }\n  render() {\n    return <Pagination current={this.state.current} onChange={this.onChange} total={50} />;\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Pagination } from 'antd';\n\nclass App extends React.Component {\n  state = {\n    current: 3,\n  }\n  onChange = (page) => {\n    console.log(page);\n    this.setState({\n      current: page,\n    });\n  }\n  render() {\n    return <Pagination current={this.state.current} onChange={this.onChange} total={50} />;\n  }\n}\n\nexport default function DemoComponent_pagination_controlled() {\nreturn(<App />);\n};\n\nexport const demo = <DemoComponent_pagination_controlled key=\"DemoComponent_pagination_controlled\" />;\n"],"cssCodes":[]},{"name":"jump","content":"---\norder: 3\ntitle:\n  zh-CN: 跳转\n  en-US: Jumper\n---\n\n## zh-CN\n\n快速跳转到某一页。\n\n## en-US\n\nJump to a page directly.\n\n````jsx\nimport { Pagination } from 'antd';\n\nfunction onChange(pageNumber) {\n  console.log('Page: ', pageNumber);\n}\n\nReactDOM.render(\n  <Pagination showQuickJumper defaultCurrent={2} total={500} onChange={onChange} />,\n  mountNode\n);\n````\n","jsCodes":["import React from 'react';\nimport { Pagination } from 'antd';\n\nfunction onChange(pageNumber) {\n  console.log('Page: ', pageNumber);\n}\n\nexport default function DemoComponent_pagination_jump() {\nreturn(\n  <Pagination showQuickJumper defaultCurrent={2} total={500} onChange={onChange} />);\n};\n\nexport const demo = <DemoComponent_pagination_jump key=\"DemoComponent_pagination_jump\" />;\n"],"cssCodes":[]},{"name":"mini","content":"---\norder: 4\ntitle:\n  zh-CN: 迷你\n  en-US: Mini size\n---\n\n## zh-CN\n\n迷你版本。\n\n## en-US\n\nMini size pagination.\n\n````jsx\nimport { Pagination } from 'antd';\n\nfunction showTotal(total) {\n  return `Total ${total} items`;\n}\n\nReactDOM.render(\n  <div>\n    <Pagination size=\"small\" total={50} />\n    <Pagination size=\"small\" total={50} showSizeChanger showQuickJumper />\n    <Pagination size=\"small\" total={50} showTotal={showTotal} />\n  </div>\n, mountNode);\n````\n\n<style>\n#components-pagination-demo-mini .ant-pagination:not(:last-child) {\n  margin-bottom: 24px;\n}\n</style>\n","jsCodes":["import React from 'react';\nimport { Pagination } from 'antd';\n\nfunction showTotal(total) {\n  return `Total ${total} items`;\n}\n\nexport default function DemoComponent_pagination_mini() {\nreturn(\n  <div>\n    <Pagination size=\"small\" total={50} />\n    <Pagination size=\"small\" total={50} showSizeChanger showQuickJumper />\n    <Pagination size=\"small\" total={50} showTotal={showTotal} />\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_pagination_mini key=\"DemoComponent_pagination_mini\" />;\n"],"cssCodes":[]},{"name":"more","content":"---\norder: 1\ntitle:\n  zh-CN: 更多\n  en-US: More\n---\n\n## zh-CN\n\n更多分页。\n\n## en-US\n\nMore pages.\n\n````jsx\nimport { Pagination } from 'antd';\n\nReactDOM.render(\n  <Pagination defaultCurrent={6} total={500} />\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Pagination } from 'antd';\n\nexport default function DemoComponent_pagination_more() {\nreturn(\n  <Pagination defaultCurrent={6} total={500} />\n);\n};\n\nexport const demo = <DemoComponent_pagination_more key=\"DemoComponent_pagination_more\" />;\n"],"cssCodes":[]},{"name":"simple","content":"---\norder: 6\ntitle:\n  zh-CN: 简洁\n  en-US: Simple mode\n---\n\n## zh-CN\n\n简单的翻页。\n\n## en-US\n\nSimple mode.\n\n````jsx\nimport { Pagination } from 'antd';\n\nReactDOM.render(\n  <Pagination simple defaultCurrent={2} total={50} />\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Pagination } from 'antd';\n\nexport default function DemoComponent_pagination_simple() {\nreturn(\n  <Pagination simple defaultCurrent={2} total={50} />\n);\n};\n\nexport const demo = <DemoComponent_pagination_simple key=\"DemoComponent_pagination_simple\" />;\n"],"cssCodes":[]},{"name":"total","content":"---\norder: 9\ntitle:\n  zh-CN: 总数\n  en-US: Total number\n---\n\n## zh-CN\n\n通过设置 `showTotal` 展示总共有多少数据。\n\n## en-US\n\nYou can show the total number of data by setting `showTotal`.\n\n````jsx\nimport { Pagination } from 'antd';\n\nReactDOM.render(\n  <div>\n    <Pagination\n      total={85}\n      showTotal={total => `Total ${total} items`}\n      pageSize={20}\n      defaultCurrent={1}\n    />\n    <br />\n    <Pagination\n      total={85}\n      showTotal={(total, range) => `${range[0]}-${range[1]} of ${total} items`}\n      pageSize={20}\n      defaultCurrent={1}\n    />\n  </div>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Pagination } from 'antd';\n\nexport default function DemoComponent_pagination_total() {\nreturn(\n  <div>\n    <Pagination\n      total={85}\n      showTotal={total => `Total ${total} items`}\n      pageSize={20}\n      defaultCurrent={1}\n    />\n    <br />\n    <Pagination\n      total={85}\n      showTotal={(total, range) => `${range[0]}-${range[1]} of ${total} items`}\n      pageSize={20}\n      defaultCurrent={1}\n    />\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_pagination_total key=\"DemoComponent_pagination_total\" />;\n"],"cssCodes":[]}]},{"name":"popconfirm","demos":[{"name":"basic","content":"---\norder: 0\ntitle:\n  zh-CN: 基本\n  en-US: Basic\n---\n\n## zh-CN\n\n最简单的用法。\n\n## en-US\n\nThe basic example.\n\n````jsx\nimport { Popconfirm, message } from 'antd';\n\nfunction confirm(e) {\n  console.log(e);\n  message.success('Click on Yes');\n}\n\nfunction cancel(e) {\n  console.log(e);\n  message.error('Click on No');\n}\n\nReactDOM.render(\n  <Popconfirm title=\"Are you sure delete this task?\" onConfirm={confirm} onCancel={cancel} okText=\"Yes\" cancelText=\"No\">\n    <a href=\"#\">Delete</a>\n  </Popconfirm>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Popconfirm, message } from 'antd';\n\nfunction confirm(e) {\n  console.log(e);\n  message.success('Click on Yes');\n}\n\nfunction cancel(e) {\n  console.log(e);\n  message.error('Click on No');\n}\n\nexport default function DemoComponent_popconfirm_basic() {\nreturn(\n  <Popconfirm title=\"Are you sure delete this task?\" onConfirm={confirm} onCancel={cancel} okText=\"Yes\" cancelText=\"No\">\n    <a href=\"#\">Delete</a>\n  </Popconfirm>\n);\n};\n\nexport const demo = <DemoComponent_popconfirm_basic key=\"DemoComponent_popconfirm_basic\" />;\n"],"cssCodes":[]},{"name":"dynamic_trigger","content":"---\norder: 3\ntitle:\n  zh-CN: 条件触发\n  en-US: Conditional trigger\n---\n\n## zh-CN\n\n可以判断是否需要弹出。\n\n## en-US\n\nMake it pop up under some conditions.\n\n````jsx\nimport { Popconfirm, Switch, message } from 'antd';\n\nclass App extends React.Component {\n  state = {\n    visible: false,\n    condition: true,   // Whether meet the condition, if not show popconfirm.\n  }\n  changeCondition = (value) => {\n    this.setState({ condition: value });\n  }\n  confirm = () => {\n    this.setState({ visible: false });\n    message.success('Next step.');\n  }\n  cancel = () => {\n    this.setState({ visible: false });\n    message.error('Click on cancel.');\n  }\n  handleVisibleChange = (visible) => {\n    if (!visible) {\n      this.setState({ visible });\n      return;\n    }\n    // Determining condition before show the popconfirm.\n    console.log(this.state.condition);\n    if (this.state.condition) {\n      this.confirm();  // next step\n    } else {\n      this.setState({ visible });  // show the popconfirm\n    }\n  }\n  render() {\n    return (\n      <div>\n        <Popconfirm\n          title=\"Are you sure delete this task?\"\n          visible={this.state.visible}\n          onVisibleChange={this.handleVisibleChange}\n          onConfirm={this.confirm}\n          onCancel={this.cancel}\n          okText=\"Yes\"\n          cancelText=\"No\"\n        >\n          <a href=\"#\">Delete a task</a>\n        </Popconfirm>\n        <br />\n        <br />\n        Whether directly execute：<Switch defaultChecked onChange={this.changeCondition} />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Popconfirm, Switch, message } from 'antd';\n\nclass App extends React.Component {\n  state = {\n    visible: false,\n    condition: true,   // Whether meet the condition, if not show popconfirm.\n  }\n  changeCondition = (value) => {\n    this.setState({ condition: value });\n  }\n  confirm = () => {\n    this.setState({ visible: false });\n    message.success('Next step.');\n  }\n  cancel = () => {\n    this.setState({ visible: false });\n    message.error('Click on cancel.');\n  }\n  handleVisibleChange = (visible) => {\n    if (!visible) {\n      this.setState({ visible });\n      return;\n    }\n    // Determining condition before show the popconfirm.\n    console.log(this.state.condition);\n    if (this.state.condition) {\n      this.confirm();  // next step\n    } else {\n      this.setState({ visible });  // show the popconfirm\n    }\n  }\n  render() {\n    return (\n      <div>\n        <Popconfirm\n          title=\"Are you sure delete this task?\"\n          visible={this.state.visible}\n          onVisibleChange={this.handleVisibleChange}\n          onConfirm={this.confirm}\n          onCancel={this.cancel}\n          okText=\"Yes\"\n          cancelText=\"No\"\n        >\n          <a href=\"#\">Delete a task</a>\n        </Popconfirm>\n        <br />\n        <br />\n        Whether directly execute：<Switch defaultChecked onChange={this.changeCondition} />\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_popconfirm_dynamic_trigger() {\nreturn(<App />);\n};\n\nexport const demo = <DemoComponent_popconfirm_dynamic_trigger key=\"DemoComponent_popconfirm_dynamic_trigger\" />;\n"],"cssCodes":[]},{"name":"locale","content":"---\norder: 1\ntitle:\n  zh-CN: 国际化\n  en-US: Locale text\n---\n\n## zh-CN\n\n使用 `okText` 和 `cancelText` 自定义按钮文字。\n\n## en-US\n\nSet `okText` and `cancelText` props to customise the button's labels.\n\n````jsx\nimport { Popconfirm } from 'antd';\n\nReactDOM.render(\n  <Popconfirm title=\"Are you sure？\" okText=\"Yes\" cancelText=\"No\">\n    <a href=\"#\">Delete</a>\n  </Popconfirm>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Popconfirm } from 'antd';\n\nexport default function DemoComponent_popconfirm_locale() {\nreturn(\n  <Popconfirm title=\"Are you sure？\" okText=\"Yes\" cancelText=\"No\">\n    <a href=\"#\">Delete</a>\n  </Popconfirm>\n);\n};\n\nexport const demo = <DemoComponent_popconfirm_locale key=\"DemoComponent_popconfirm_locale\" />;\n"],"cssCodes":[]},{"name":"placement","content":"---\norder: 2\ntitle:\n  zh-CN: 位置\n  en-US: Placement\n---\n\n## zh-CN\n\n位置有十二个方向。如需箭头指向目标元素中心，可以设置 `arrowPointAtCenter`。\n\n## en-US\n\nThere are 12 `placement` options available. Use `arrowPointAtCenter` if you want arrow point at the center of target.\n\n````jsx\nimport { Popconfirm, message, Button } from 'antd';\n\nconst text = 'Are you sure delete this task?';\n\nfunction confirm() {\n  message.info('Click on Yes.');\n}\n\nReactDOM.render(<div className=\"demo\">\n  <div style={{ marginLeft: 70, whiteSpace: 'nowrap' }}>\n    <Popconfirm placement=\"topLeft\" title={text} onConfirm={confirm} okText=\"Yes\" cancelText=\"No\">\n      <Button>TL</Button>\n    </Popconfirm>\n    <Popconfirm placement=\"top\" title={text} onConfirm={confirm} okText=\"Yes\" cancelText=\"No\">\n      <Button>Top</Button>\n    </Popconfirm>\n    <Popconfirm placement=\"topRight\" title={text} onConfirm={confirm} okText=\"Yes\" cancelText=\"No\">\n      <Button>TR</Button>\n    </Popconfirm>\n  </div>\n  <div style={{ width: 70, float: 'left' }}>\n    <Popconfirm placement=\"leftTop\" title={text} onConfirm={confirm} okText=\"Yes\" cancelText=\"No\">\n      <Button>LT</Button>\n    </Popconfirm>\n    <Popconfirm placement=\"left\" title={text} onConfirm={confirm} okText=\"Yes\" cancelText=\"No\">\n      <Button>Left</Button>\n    </Popconfirm>\n    <Popconfirm placement=\"leftBottom\" title={text} onConfirm={confirm} okText=\"Yes\" cancelText=\"No\">\n      <Button>LB</Button>\n    </Popconfirm>\n  </div>\n  <div style={{ width: 70, marginLeft: 304 }}>\n    <Popconfirm placement=\"rightTop\" title={text} onConfirm={confirm} okText=\"Yes\" cancelText=\"No\">\n      <Button>RT</Button>\n    </Popconfirm>\n    <Popconfirm placement=\"right\" title={text} onConfirm={confirm} okText=\"Yes\" cancelText=\"No\">\n      <Button>Right</Button>\n    </Popconfirm>\n    <Popconfirm placement=\"rightBottom\" title={text} onConfirm={confirm} okText=\"Yes\" cancelText=\"No\">\n      <Button>RB</Button>\n    </Popconfirm>\n  </div>\n  <div style={{ marginLeft: 70, clear: 'both', whiteSpace: 'nowrap' }}>\n    <Popconfirm placement=\"bottomLeft\" title={text} onConfirm={confirm} okText=\"Yes\" cancelText=\"No\">\n      <Button>BL</Button>\n    </Popconfirm>\n    <Popconfirm placement=\"bottom\" title={text} onConfirm={confirm} okText=\"Yes\" cancelText=\"No\">\n      <Button>Bottom</Button>\n    </Popconfirm>\n    <Popconfirm placement=\"bottomRight\" title={text} onConfirm={confirm} okText=\"Yes\" cancelText=\"No\">\n      <Button>BR</Button>\n    </Popconfirm>\n  </div>\n</div>, mountNode);\n````\n\n<style>\n.code-box-demo .ant-popover-wrap > a {\n  margin-right: 8px;\n}\n.code-box-demo .ant-btn {\n  margin-right: 8px;\n  margin-bottom: 8px;\n}\n#components-popconfirm-demo-placement .ant-btn {\n  width: 70px;\n}\n</style>\n","jsCodes":["import React from 'react';\nimport { Popconfirm, message, Button } from 'antd';\n\nconst text = 'Are you sure delete this task?';\n\nfunction confirm() {\n  message.info('Click on Yes.');\n}\n\nexport default function DemoComponent_popconfirm_placement() {\nreturn(<div className=\"demo\">\n  <div style={{ marginLeft: 70, whiteSpace: 'nowrap' }}>\n    <Popconfirm placement=\"topLeft\" title={text} onConfirm={confirm} okText=\"Yes\" cancelText=\"No\">\n      <Button>TL</Button>\n    </Popconfirm>\n    <Popconfirm placement=\"top\" title={text} onConfirm={confirm} okText=\"Yes\" cancelText=\"No\">\n      <Button>Top</Button>\n    </Popconfirm>\n    <Popconfirm placement=\"topRight\" title={text} onConfirm={confirm} okText=\"Yes\" cancelText=\"No\">\n      <Button>TR</Button>\n    </Popconfirm>\n  </div>\n  <div style={{ width: 70, float: 'left' }}>\n    <Popconfirm placement=\"leftTop\" title={text} onConfirm={confirm} okText=\"Yes\" cancelText=\"No\">\n      <Button>LT</Button>\n    </Popconfirm>\n    <Popconfirm placement=\"left\" title={text} onConfirm={confirm} okText=\"Yes\" cancelText=\"No\">\n      <Button>Left</Button>\n    </Popconfirm>\n    <Popconfirm placement=\"leftBottom\" title={text} onConfirm={confirm} okText=\"Yes\" cancelText=\"No\">\n      <Button>LB</Button>\n    </Popconfirm>\n  </div>\n  <div style={{ width: 70, marginLeft: 304 }}>\n    <Popconfirm placement=\"rightTop\" title={text} onConfirm={confirm} okText=\"Yes\" cancelText=\"No\">\n      <Button>RT</Button>\n    </Popconfirm>\n    <Popconfirm placement=\"right\" title={text} onConfirm={confirm} okText=\"Yes\" cancelText=\"No\">\n      <Button>Right</Button>\n    </Popconfirm>\n    <Popconfirm placement=\"rightBottom\" title={text} onConfirm={confirm} okText=\"Yes\" cancelText=\"No\">\n      <Button>RB</Button>\n    </Popconfirm>\n  </div>\n  <div style={{ marginLeft: 70, clear: 'both', whiteSpace: 'nowrap' }}>\n    <Popconfirm placement=\"bottomLeft\" title={text} onConfirm={confirm} okText=\"Yes\" cancelText=\"No\">\n      <Button>BL</Button>\n    </Popconfirm>\n    <Popconfirm placement=\"bottom\" title={text} onConfirm={confirm} okText=\"Yes\" cancelText=\"No\">\n      <Button>Bottom</Button>\n    </Popconfirm>\n    <Popconfirm placement=\"bottomRight\" title={text} onConfirm={confirm} okText=\"Yes\" cancelText=\"No\">\n      <Button>BR</Button>\n    </Popconfirm>\n  </div>\n</div>);\n};\n\nexport const demo = <DemoComponent_popconfirm_placement key=\"DemoComponent_popconfirm_placement\" />;\n"],"cssCodes":[]}]},{"name":"popover","demos":[{"name":"arrow_point_at_center","content":"---\norder: 4\ntitle:\n  zh-CN:  箭头指向\n  en-US: Arrow pointing\n---\n\n## zh-CN\n\n设置了 `arrowPointAtCenter` 后，箭头将指向目标元素的中心。\n\n## en-US\n\nThe arrow points to the center of the target element, which set `arrowPointAtCenter`.\n\n````jsx\nimport { Popover, Button } from 'antd';\n\nconst text = <span>Title</span>;\nconst content = (\n  <div>\n    <p>Content</p>\n    <p>Content</p>\n  </div>\n);\n\nReactDOM.render(\n  <div>\n    <Popover placement=\"topLeft\" title={text} content={content}>\n      <Button>Align edge / 边缘对齐</Button>\n    </Popover>\n    <Popover placement=\"topLeft\" title={text} content={content} arrowPointAtCenter>\n      <Button>Arrow points to center / 箭头指向中心</Button>\n    </Popover>\n  </div>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Popover, Button } from 'antd';\n\nconst text = <span>Title</span>;\nconst content = (\n  <div>\n    <p>Content</p>\n    <p>Content</p>\n  </div>\n);\n\nexport default function DemoComponent_popover_arrow_point_at_center() {\nreturn(\n  <div>\n    <Popover placement=\"topLeft\" title={text} content={content}>\n      <Button>Align edge / 边缘对齐</Button>\n    </Popover>\n    <Popover placement=\"topLeft\" title={text} content={content} arrowPointAtCenter>\n      <Button>Arrow points to center / 箭头指向中心</Button>\n    </Popover>\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_popover_arrow_point_at_center key=\"DemoComponent_popover_arrow_point_at_center\" />;\n"],"cssCodes":[]},{"name":"basic","content":"---\norder: 0\ntitle:\n  zh-CN: 基本\n  en-US: Basic\n---\n\n## zh-CN\n\n最简单的用法，浮层的大小由内容区域决定。\n\n## en-US\n\nThe most basic example. The size of the floating layer depends on the contents region.\n\n````jsx\nimport { Popover, Button } from 'antd';\n\nconst content = (\n  <div>\n    <p>Content</p>\n    <p>Content</p>\n  </div>\n);\n\nReactDOM.render(\n  <Popover content={content} title=\"Title\">\n    <Button type=\"primary\">Hover me</Button>\n  </Popover>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Popover, Button } from 'antd';\n\nconst content = (\n  <div>\n    <p>Content</p>\n    <p>Content</p>\n  </div>\n);\n\nexport default function DemoComponent_popover_basic() {\nreturn(\n  <Popover content={content} title=\"Title\">\n    <Button type=\"primary\">Hover me</Button>\n  </Popover>\n);\n};\n\nexport const demo = <DemoComponent_popover_basic key=\"DemoComponent_popover_basic\" />;\n"],"cssCodes":[]},{"name":"control","content":"---\norder: 3\ntitle:\n  zh-CN: 从浮层内关闭\n  en-US: Controlling the close of the dialog\n---\n\n## zh-CN\n\n使用 `visible` 属性控制浮层显示。\n\n## en-US\n\nUse `visible` prop to control the display of the card.\n\n````jsx\nimport { Popover, Button } from 'antd';\n\nclass App extends React.Component {\n  state = {\n    visible: false,\n  }\n  hide = () => {\n    this.setState({\n      visible: false,\n    });\n  }\n  handleVisibleChange = (visible) => {\n    this.setState({ visible });\n  }\n  render() {\n    return (\n      <Popover\n        content={<a onClick={this.hide}>Close</a>}\n        title=\"Title\"\n        trigger=\"click\"\n        visible={this.state.visible}\n        onVisibleChange={this.handleVisibleChange}\n      >\n        <Button type=\"primary\">Click me</Button>\n      </Popover>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Popover, Button } from 'antd';\n\nclass App extends React.Component {\n  state = {\n    visible: false,\n  }\n  hide = () => {\n    this.setState({\n      visible: false,\n    });\n  }\n  handleVisibleChange = (visible) => {\n    this.setState({ visible });\n  }\n  render() {\n    return (\n      <Popover\n        content={<a onClick={this.hide}>Close</a>}\n        title=\"Title\"\n        trigger=\"click\"\n        visible={this.state.visible}\n        onVisibleChange={this.handleVisibleChange}\n      >\n        <Button type=\"primary\">Click me</Button>\n      </Popover>\n    );\n  }\n}\n\nexport default function DemoComponent_popover_control() {\nreturn(<App />);\n};\n\nexport const demo = <DemoComponent_popover_control key=\"DemoComponent_popover_control\" />;\n"],"cssCodes":[]},{"name":"placement","content":"---\norder: 2\ntitle:\n  zh-CN: 位置\n  en-US: Placement\n---\n\n## zh-CN\n\n位置有十二个方向。\n\n## en-US\n\nThere are 12 `placement` options available.\n\n````jsx\nimport { Popover, Button } from 'antd';\n\nconst text = <span>Title</span>;\nconst content = (\n  <div>\n    <p>Content</p>\n    <p>Content</p>\n  </div>\n);\n\nconst buttonWidth = 70;\n\nReactDOM.render(\n  <div className=\"demo\">\n    <div style={{ marginLeft: buttonWidth, whiteSpace: 'nowrap' }}>\n      <Popover placement=\"topLeft\" title={text} content={content} trigger=\"click\">\n        <Button>TL</Button>\n      </Popover>\n      <Popover placement=\"top\" title={text} content={content} trigger=\"click\">\n        <Button>Top</Button>\n      </Popover>\n      <Popover placement=\"topRight\" title={text} content={content} trigger=\"click\">\n        <Button>TR</Button>\n      </Popover>\n    </div>\n    <div style={{ width: buttonWidth, float: 'left' }}>\n      <Popover placement=\"leftTop\" title={text} content={content} trigger=\"click\">\n        <Button>LT</Button>\n      </Popover>\n      <Popover placement=\"left\" title={text} content={content} trigger=\"click\">\n        <Button>Left</Button>\n      </Popover>\n      <Popover placement=\"leftBottom\" title={text} content={content} trigger=\"click\">\n        <Button>LB</Button>\n      </Popover>\n    </div>\n    <div style={{ width: buttonWidth, marginLeft: (buttonWidth * 4) + 24 }}>\n      <Popover placement=\"rightTop\" title={text} content={content} trigger=\"click\">\n        <Button>RT</Button>\n      </Popover>\n      <Popover placement=\"right\" title={text} content={content} trigger=\"click\">\n        <Button>Right</Button>\n      </Popover>\n      <Popover placement=\"rightBottom\" title={text} content={content} trigger=\"click\">\n        <Button>RB</Button>\n      </Popover>\n    </div>\n    <div style={{ marginLeft: buttonWidth, clear: 'both', whiteSpace: 'nowrap' }}>\n      <Popover placement=\"bottomLeft\" title={text} content={content} trigger=\"click\">\n        <Button>BL</Button>\n      </Popover>\n      <Popover placement=\"bottom\" title={text} content={content} trigger=\"click\">\n        <Button>Bottom</Button>\n      </Popover>\n      <Popover placement=\"bottomRight\" title={text} content={content} trigger=\"click\">\n        <Button>BR</Button>\n      </Popover>\n    </div>\n  </div>\n, mountNode);\n````\n\n<style>\n.code-box-demo .ant-btn {\n  margin-right: 8px;\n  margin-bottom: 8px;\n}\n#components-popover-demo-placement .ant-btn {\n  width: 70px;\n}\n</style>\n","jsCodes":["import React from 'react';\nimport { Popover, Button } from 'antd';\n\nconst text = <span>Title</span>;\nconst content = (\n  <div>\n    <p>Content</p>\n    <p>Content</p>\n  </div>\n);\n\nconst buttonWidth = 70;\n\nexport default function DemoComponent_popover_placement() {\nreturn(\n  <div className=\"demo\">\n    <div style={{ marginLeft: buttonWidth, whiteSpace: 'nowrap' }}>\n      <Popover placement=\"topLeft\" title={text} content={content} trigger=\"click\">\n        <Button>TL</Button>\n      </Popover>\n      <Popover placement=\"top\" title={text} content={content} trigger=\"click\">\n        <Button>Top</Button>\n      </Popover>\n      <Popover placement=\"topRight\" title={text} content={content} trigger=\"click\">\n        <Button>TR</Button>\n      </Popover>\n    </div>\n    <div style={{ width: buttonWidth, float: 'left' }}>\n      <Popover placement=\"leftTop\" title={text} content={content} trigger=\"click\">\n        <Button>LT</Button>\n      </Popover>\n      <Popover placement=\"left\" title={text} content={content} trigger=\"click\">\n        <Button>Left</Button>\n      </Popover>\n      <Popover placement=\"leftBottom\" title={text} content={content} trigger=\"click\">\n        <Button>LB</Button>\n      </Popover>\n    </div>\n    <div style={{ width: buttonWidth, marginLeft: (buttonWidth * 4) + 24 }}>\n      <Popover placement=\"rightTop\" title={text} content={content} trigger=\"click\">\n        <Button>RT</Button>\n      </Popover>\n      <Popover placement=\"right\" title={text} content={content} trigger=\"click\">\n        <Button>Right</Button>\n      </Popover>\n      <Popover placement=\"rightBottom\" title={text} content={content} trigger=\"click\">\n        <Button>RB</Button>\n      </Popover>\n    </div>\n    <div style={{ marginLeft: buttonWidth, clear: 'both', whiteSpace: 'nowrap' }}>\n      <Popover placement=\"bottomLeft\" title={text} content={content} trigger=\"click\">\n        <Button>BL</Button>\n      </Popover>\n      <Popover placement=\"bottom\" title={text} content={content} trigger=\"click\">\n        <Button>Bottom</Button>\n      </Popover>\n      <Popover placement=\"bottomRight\" title={text} content={content} trigger=\"click\">\n        <Button>BR</Button>\n      </Popover>\n    </div>\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_popover_placement key=\"DemoComponent_popover_placement\" />;\n"],"cssCodes":[]},{"name":"triggerType","content":"---\norder: 1\ntitle:\n  zh-CN: 三种触发方式\n  en-US: Three ways to trigger\n---\n\n## zh-CN\n\n鼠标移入、聚集、点击。\n\n## en-US\n\nMouse to click, focus and move in.\n\n````jsx\nimport { Popover, Button } from 'antd';\n\nconst content = (\n  <div>\n    <p>Content</p>\n    <p>Content</p>\n  </div>\n);\n\nReactDOM.render(\n  <div>\n    <Popover content={content} title=\"Title\" trigger=\"hover\">\n      <Button>Hover me</Button>\n    </Popover>\n    <Popover content={content} title=\"Title\" trigger=\"focus\">\n      <Button>Focus me</Button>\n    </Popover>\n    <Popover content={content} title=\"Title\" trigger=\"click\">\n      <Button>Click me</Button>\n    </Popover>\n  </div>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Popover, Button } from 'antd';\n\nconst content = (\n  <div>\n    <p>Content</p>\n    <p>Content</p>\n  </div>\n);\n\nexport default function DemoComponent_popover_triggerType() {\nreturn(\n  <div>\n    <Popover content={content} title=\"Title\" trigger=\"hover\">\n      <Button>Hover me</Button>\n    </Popover>\n    <Popover content={content} title=\"Title\" trigger=\"focus\">\n      <Button>Focus me</Button>\n    </Popover>\n    <Popover content={content} title=\"Title\" trigger=\"click\">\n      <Button>Click me</Button>\n    </Popover>\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_popover_triggerType key=\"DemoComponent_popover_triggerType\" />;\n"],"cssCodes":[]}]},{"name":"progress","demos":[{"name":"circle_dynamic","content":"---\norder: 4\ntitle:\n  zh-CN: 进度圈动态展示\n  en-US: Dynamic circular progress bar\n---\n\n## zh-CN\n\n会动的进度条才是好进度条。\n\n## en-US\n\nA dynamic progress bar is better.\n\n````jsx\nimport { Progress, Button } from 'antd';\nconst ButtonGroup = Button.Group;\n\nclass App extends React.Component {\n  state = {\n    percent: 0,\n  }\n  increase = () => {\n    let percent = this.state.percent + 10;\n    if (percent > 100) {\n      percent = 100;\n    }\n    this.setState({ percent });\n  }\n  decline = () => {\n    let percent = this.state.percent - 10;\n    if (percent < 0) {\n      percent = 0;\n    }\n    this.setState({ percent });\n  }\n  render() {\n    return (\n      <div>\n        <Progress type=\"circle\" percent={this.state.percent} />\n        <ButtonGroup>\n          <Button onClick={this.decline} icon=\"minus\" />\n          <Button onClick={this.increase} icon=\"plus\" />\n        </ButtonGroup>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Progress, Button } from 'antd';\nconst ButtonGroup = Button.Group;\n\nclass App extends React.Component {\n  state = {\n    percent: 0,\n  }\n  increase = () => {\n    let percent = this.state.percent + 10;\n    if (percent > 100) {\n      percent = 100;\n    }\n    this.setState({ percent });\n  }\n  decline = () => {\n    let percent = this.state.percent - 10;\n    if (percent < 0) {\n      percent = 0;\n    }\n    this.setState({ percent });\n  }\n  render() {\n    return (\n      <div>\n        <Progress type=\"circle\" percent={this.state.percent} />\n        <ButtonGroup>\n          <Button onClick={this.decline} icon=\"minus\" />\n          <Button onClick={this.increase} icon=\"plus\" />\n        </ButtonGroup>\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_progress_circle_dynamic() {\nreturn(<App />);\n};\n\nexport const demo = <DemoComponent_progress_circle_dynamic key=\"DemoComponent_progress_circle_dynamic\" />;\n"],"cssCodes":[]},{"name":"circle_mini","content":"---\norder: 3\ntitle:\n  zh-CN: 小型进度圈\n  en-US: Mini size circular progress bar\n---\n\n## zh-CN\n\n小一号的圈形进度。\n\n## en-US\n\nA smaller circular progress bar.\n\n````jsx\nimport { Progress } from 'antd';\n\nReactDOM.render(\n  <div>\n    <Progress type=\"circle\" percent={30} width={80} />\n    <Progress type=\"circle\" percent={70} width={80} status=\"exception\" />\n    <Progress type=\"circle\" percent={100} width={80} />\n  </div>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Progress } from 'antd';\n\nexport default function DemoComponent_progress_circle_mini() {\nreturn(\n  <div>\n    <Progress type=\"circle\" percent={30} width={80} />\n    <Progress type=\"circle\" percent={70} width={80} status=\"exception\" />\n    <Progress type=\"circle\" percent={100} width={80} />\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_progress_circle_mini key=\"DemoComponent_progress_circle_mini\" />;\n"],"cssCodes":[]},{"name":"circle","content":"---\norder: 1\ntitle:\n  zh-CN: 进度圈\n  en-US: Circular progress bar\n---\n\n## zh-CN\n\n圈形的进度。\n\n## en-US\n\nA circular progress bar.\n\n````jsx\nimport { Progress } from 'antd';\n\nReactDOM.render(\n  <div>\n    <Progress type=\"circle\" percent={75} />\n    <Progress type=\"circle\" percent={70} status=\"exception\" />\n    <Progress type=\"circle\" percent={100} />\n  </div>\n, mountNode);\n````\n\n<style>\n.ant-progress-circle-wrap,\n.ant-progress-line-wrap {\n  margin-right: 8px;\n  margin-bottom: 5px;\n}\n</style>\n","jsCodes":["import React from 'react';\nimport { Progress } from 'antd';\n\nexport default function DemoComponent_progress_circle() {\nreturn(\n  <div>\n    <Progress type=\"circle\" percent={75} />\n    <Progress type=\"circle\" percent={70} status=\"exception\" />\n    <Progress type=\"circle\" percent={100} />\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_progress_circle key=\"DemoComponent_progress_circle\" />;\n"],"cssCodes":[]},{"name":"dashboard","content":"---\norder: 8\ntitle:\n  zh-CN: 仪表盘\n  en-US: Dashboard\n---\n\n## zh-CN\n\n通过设置 `type=dashboard`，可以很方便地实现仪表盘样式的进度条。\n\n## en-US\n\nBy setting `type=dashboard`, you can get a dashboard style of progress easily.\n\n````jsx\nimport { Progress } from 'antd';\n\nReactDOM.render(<Progress type=\"dashboard\" percent={75} />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Progress } from 'antd';\n\nexport default function DemoComponent_progress_dashboard() {\nreturn(<Progress type=\"dashboard\" percent={75} />);\n};\n\nexport const demo = <DemoComponent_progress_dashboard key=\"DemoComponent_progress_dashboard\" />;\n"],"cssCodes":[]},{"name":"dynamic","content":"---\norder: 4\ntitle:\n  zh-CN: 动态展示\n  en-US: Dynamic\n---\n\n## zh-CN\n\n会动的进度条才是好进度条。\n\n## en-US\n\nA dynamic progress bar is better.\n\n````jsx\nimport { Progress, Button } from 'antd';\nconst ButtonGroup = Button.Group;\n\nclass App extends React.Component {\n  state = {\n    percent: 0,\n  }\n  increase = () => {\n    let percent = this.state.percent + 10;\n    if (percent > 100) {\n      percent = 100;\n    }\n    this.setState({ percent });\n  }\n  decline = () => {\n    let percent = this.state.percent - 10;\n    if (percent < 0) {\n      percent = 0;\n    }\n    this.setState({ percent });\n  }\n  render() {\n    return (\n      <div>\n        <Progress percent={this.state.percent} />\n        <ButtonGroup>\n          <Button onClick={this.decline} icon=\"minus\" />\n          <Button onClick={this.increase} icon=\"plus\" />\n        </ButtonGroup>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Progress, Button } from 'antd';\nconst ButtonGroup = Button.Group;\n\nclass App extends React.Component {\n  state = {\n    percent: 0,\n  }\n  increase = () => {\n    let percent = this.state.percent + 10;\n    if (percent > 100) {\n      percent = 100;\n    }\n    this.setState({ percent });\n  }\n  decline = () => {\n    let percent = this.state.percent - 10;\n    if (percent < 0) {\n      percent = 0;\n    }\n    this.setState({ percent });\n  }\n  render() {\n    return (\n      <div>\n        <Progress percent={this.state.percent} />\n        <ButtonGroup>\n          <Button onClick={this.decline} icon=\"minus\" />\n          <Button onClick={this.increase} icon=\"plus\" />\n        </ButtonGroup>\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_progress_dynamic() {\nreturn(<App />);\n};\n\nexport const demo = <DemoComponent_progress_dynamic key=\"DemoComponent_progress_dynamic\" />;\n"],"cssCodes":[]},{"name":"format","content":"---\norder: 6\ntitle:\n  zh-CN: 自定义文字格式\n  en-US: Custom text format\n---\n\n## zh-CN\n\n`format` 属性指定格式。\n\n## en-US\n\nYou can custom text format by setting `format`.\n\n````jsx\nimport { Progress } from 'antd';\n\nReactDOM.render(\n  <div>\n    <Progress type=\"circle\" percent={75} format={percent => `${percent} Days`} />\n    <Progress type=\"circle\" percent={100} format={() => 'Done'} />\n  </div>\n, mountNode);\n````\n\n<style>\ndiv.ant-progress-circle,\ndiv.ant-progress-line {\n  margin-right: 8px;\n  margin-bottom: 8px;\n}\n</style>\n","jsCodes":["import React from 'react';\nimport { Progress } from 'antd';\n\nexport default function DemoComponent_progress_format() {\nreturn(\n  <div>\n    <Progress type=\"circle\" percent={75} format={percent => `${percent} Days`} />\n    <Progress type=\"circle\" percent={100} format={() => 'Done'} />\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_progress_format key=\"DemoComponent_progress_format\" />;\n"],"cssCodes":[]},{"name":"line_mini","content":"---\norder: 2\ntitle: \n  zh-CN: 小型进度条\n  en-US: Mini size progress bar\n---\n\n## zh-CN\n\n适合放在较狭窄的区域内。\n\n## en-US\n\nAppropriate for a narrow area.\n\n````jsx\nimport { Progress } from 'antd';\n\nReactDOM.render(\n  <div style={{ width: 170 }}>\n    <Progress percent={30} strokeWidth={5} />\n    <Progress percent={50} strokeWidth={5} status=\"active\" />\n    <Progress percent={70} strokeWidth={5} status=\"exception\" />\n    <Progress percent={100} strokeWidth={5} />\n  </div>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Progress } from 'antd';\n\nexport default function DemoComponent_progress_line_mini() {\nreturn(\n  <div style={{ width: 170 }}>\n    <Progress percent={30} strokeWidth={5} />\n    <Progress percent={50} strokeWidth={5} status=\"active\" />\n    <Progress percent={70} strokeWidth={5} status=\"exception\" />\n    <Progress percent={100} strokeWidth={5} />\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_progress_line_mini key=\"DemoComponent_progress_line_mini\" />;\n"],"cssCodes":[]},{"name":"line","content":"---\norder: 0\ntitle:\n  zh-CN: 进度条\n  en-US: Progress bar\n---\n\n## zh-CN\n\n标准的进度条。\n\n## en-US\n\nA standard progress bar.\n\n````jsx\nimport { Progress } from 'antd';\n\nReactDOM.render(\n  <div>\n    <Progress percent={30} />\n    <Progress percent={50} status=\"active\" />\n    <Progress percent={70} status=\"exception\" />\n    <Progress percent={100} />\n    <Progress percent={50} showInfo={false} />\n  </div>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Progress } from 'antd';\n\nexport default function DemoComponent_progress_line() {\nreturn(\n  <div>\n    <Progress percent={30} />\n    <Progress percent={50} status=\"active\" />\n    <Progress percent={70} status=\"exception\" />\n    <Progress percent={100} />\n    <Progress percent={50} showInfo={false} />\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_progress_line key=\"DemoComponent_progress_line\" />;\n"],"cssCodes":[]}]},{"name":"radio","demos":[{"name":"basic","content":"---\norder: 0\ntitle:\n  zh-CN: 基本\n  en-US: Basic\n---\n\n## zh-CN\n\n最简单的用法。\n\n## en-US\n\nThe simplest use.\n\n```jsx\nimport { Radio } from 'antd';\n\nReactDOM.render(<Radio>Radio</Radio>, mountNode);\n```\n","jsCodes":[],"cssCodes":[]},{"name":"disable","content":"---\norder: 1\ntitle:\n  zh-CN: 不可用\n  en-US: disabled\n---\n\n## zh-CN\n\nRadio 不可用。\n\n## en-US\n\nRadio unavailable.\n\n```jsx\nimport { Radio, Button } from 'antd';\n\nclass App extends React.Component {\n  state = {\n    disabled: true,\n  }\n  toggleDisabled = () => {\n    this.setState({\n      disabled: !this.state.disabled,\n    });\n  }\n  render() {\n    return (\n      <div>\n        <Radio defaultChecked={false} disabled={this.state.disabled}>Disabled</Radio>\n        <br />\n        <Radio defaultChecked disabled={this.state.disabled}>Disabled</Radio>\n        <div style={{ marginTop: 20 }}>\n          <Button type=\"primary\" onClick={this.toggleDisabled}>\n            Toggle disabled\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n```\n","jsCodes":[],"cssCodes":[]},{"name":"radiobutton","content":"---\norder: 3\ntitle:\n  zh-CN: 按钮样式\n  en-US: radio style\n---\n\n## zh-CN\n\n按钮样式的单选组合。\n\n## en-US\n\nThe combination of radio button style.\n\n```jsx\nimport { Radio } from 'antd';\nconst RadioButton = Radio.Button;\nconst RadioGroup = Radio.Group;\n\nfunction onChange(e) {\n  console.log(`radio checked:${e.target.value}`);\n}\n\nReactDOM.render(<div>\n  <div>\n    <RadioGroup onChange={onChange} defaultValue=\"a\">\n      <RadioButton value=\"a\">Hangzhou</RadioButton>\n      <RadioButton value=\"b\">Shanghai</RadioButton>\n      <RadioButton value=\"c\">Beijing</RadioButton>\n      <RadioButton value=\"d\">Chengdu</RadioButton>\n    </RadioGroup>\n  </div>\n  <div style={{ marginTop: 16 }}>\n    <RadioGroup onChange={onChange} defaultValue=\"a\">\n      <RadioButton value=\"a\">Hangzhou</RadioButton>\n      <RadioButton value=\"b\" disabled>Shanghai</RadioButton>\n      <RadioButton value=\"c\">Beijing</RadioButton>\n      <RadioButton value=\"d\">Chengdu</RadioButton>\n    </RadioGroup>\n  </div>\n  <div style={{ marginTop: 16 }}>\n    <RadioGroup disabled onChange={onChange} defaultValue=\"a\">\n      <RadioButton value=\"a\">Hangzhou</RadioButton>\n      <RadioButton value=\"b\">Shanghai</RadioButton>\n      <RadioButton value=\"c\">Beijing</RadioButton>\n      <RadioButton value=\"d\">Chengdu</RadioButton>\n    </RadioGroup>\n  </div>\n</div>, mountNode);\n```\n","jsCodes":[],"cssCodes":[]},{"name":"radiogroup_more","content":"---\norder: 2\ntitle:\n  zh-CN: RadioGroup 垂直\n  en-US: Vertical RadioGroup\n---\n\n## zh-CN\n\n垂直的 RadioGroup，配合更多输入框选项。\n\n## en-US\n\nVertical RadioGroup, with more radios.\n\n```jsx\nimport { Radio, Input } from 'antd';\nconst RadioGroup = Radio.Group;\n\nclass App extends React.Component {\n  state = {\n    value: 1,\n  }\n  onChange = (e) => {\n    console.log('radio checked', e.target.value);\n    this.setState({\n      value: e.target.value,\n    });\n  }\n  render() {\n    const radioStyle = {\n      display: 'block',\n      height: '30px',\n      lineHeight: '30px',\n    };\n    return (\n      <RadioGroup onChange={this.onChange} value={this.state.value}>\n        <Radio style={radioStyle} value={1}>Option A</Radio>\n        <Radio style={radioStyle} value={2}>Option B</Radio>\n        <Radio style={radioStyle} value={3}>Option C</Radio>\n        <Radio style={radioStyle} value={4}>\n          More...\n          {this.state.value === 4 ? <Input style={{ width: 100, marginLeft: 10 }} /> : null}\n        </Radio>\n      </RadioGroup>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n```\n","jsCodes":[],"cssCodes":[]},{"name":"radiogroup_options","content":"---\norder: 2\ntitle:\n  zh-CN: RadioGroup 组合 - 配置方式\n  en-US: RadioGroup group - optional\n---\n\n## zh-CN\n\n通过配置 `options` 参数来渲染单选框。\n\n> `2.9.0` 之后支持。\n\n## en-US\n\nRender radios by configuring `options`.\n\n> support after `2.9.0`.\n\n```jsx\nimport { Radio } from 'antd';\nconst RadioGroup = Radio.Group;\n\nconst plainOptions = ['Apple', 'Pear', 'Orange'];\nconst options = [\n  { label: 'Apple', value: 'Apple' },\n  { label: 'Pear', value: 'Pear' },\n  { label: 'Orange', value: 'Orange' },\n];\nconst optionsWithDisabled = [\n  { label: 'Apple', value: 'Apple' },\n  { label: 'Pear', value: 'Pear' },\n  { label: 'Orange', value: 'Orange', disabled: false },\n];\n\nclass App extends React.Component {\n  state = {\n    value1: 'Apple',\n    value2: 'Apple',\n    value3: 'Apple',\n  }\n  onChange1 = (e) => {\n    console.log('radio1 checked', e.target.value);\n    this.setState({\n      value1: e.target.value,\n    });\n  }\n  onChange2 = (e) => {\n    console.log('radio2 checked', e.target.value);\n    this.setState({\n      value2: e.target.value,\n    });\n  }\n  onChange3 = (e) => {\n    console.log('radio3 checked', e.target.value);\n    this.setState({\n      value3: e.target.value,\n    });\n  }\n  render() {\n    return (\n      <div>\n        <RadioGroup options={plainOptions} onChange={this.onChange1} value={this.state.value1} />\n        <RadioGroup options={options} onChange={this.onChange2} value={this.state.value2} />\n        <RadioGroup options={optionsWithDisabled} onChange={this.onChange3} value={this.state.value3} />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n```\n","jsCodes":[],"cssCodes":[]},{"name":"radiogroup","content":"---\norder: 1\ntitle:\n  zh-CN: 单选组合\n  en-US: Radio Group\n---\n\n## zh-CN\n\n一组互斥的 Radio 配合使用。\n\n## en-US\n\nA group of radio components.\n\n```jsx\nimport { Radio } from 'antd';\nconst RadioGroup = Radio.Group;\n\nclass App extends React.Component {\n  state = {\n    value: 1,\n  }\n  onChange = (e) => {\n    console.log('radio checked', e.target.value);\n    this.setState({\n      value: e.target.value,\n    });\n  }\n  render() {\n    return (\n      <RadioGroup onChange={this.onChange} value={this.state.value}>\n        <Radio value={1}>A</Radio>\n        <Radio value={2}>B</Radio>\n        <Radio value={3}>C</Radio>\n        <Radio value={4}>D</Radio>\n      </RadioGroup>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n```\n","jsCodes":[],"cssCodes":[]},{"name":"size","content":"---\norder: 5\ntitle:\n  zh-CN: 大小\n  en-US: Size\n---\n\n## zh-CN\n\n大中小三种组合，可以和表单输入框进行对应配合。\n\n## en-US\n\nThere are three sizes available: large, medium, and small. It can coordinate with input box.\n\n```jsx\nimport { Radio } from 'antd';\nconst RadioButton = Radio.Button;\nconst RadioGroup = Radio.Group;\n\nReactDOM.render(<div>\n  <div>\n    <RadioGroup defaultValue=\"a\" size=\"large\">\n      <RadioButton value=\"a\">Hangzhou</RadioButton>\n      <RadioButton value=\"b\">Shanghai</RadioButton>\n      <RadioButton value=\"c\">Beijing</RadioButton>\n      <RadioButton value=\"d\">Chengdu</RadioButton>\n    </RadioGroup>\n  </div>\n  <div style={{ marginTop: 16 }}>\n    <RadioGroup defaultValue=\"a\">\n      <RadioButton value=\"a\">Hangzhou</RadioButton>\n      <RadioButton value=\"b\">Shanghai</RadioButton>\n      <RadioButton value=\"c\">Beijing</RadioButton>\n      <RadioButton value=\"d\">Chengdu</RadioButton>\n    </RadioGroup>\n  </div>\n  <div style={{ marginTop: 16 }}>\n    <RadioGroup defaultValue=\"a\" size=\"small\">\n      <RadioButton value=\"a\">Hangzhou</RadioButton>\n      <RadioButton value=\"b\">Shanghai</RadioButton>\n      <RadioButton value=\"c\">Beijing</RadioButton>\n      <RadioButton value=\"d\">Chengdu</RadioButton>\n    </RadioGroup>\n  </div>\n</div>, mountNode);\n```\n","jsCodes":[],"cssCodes":[]}]},{"name":"rate","demos":[{"name":"basic","content":"---\norder: 0\ntitle:\n  zh-CN: 基本\n  en-US: Basic\n---\n\n## zh-CN\n\n最简单的用法。\n\n## en-US\n\nThe simplest usage.\n\n````jsx\nimport { Rate } from 'antd';\n\nReactDOM.render(<Rate />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Rate } from 'antd';\n\nexport default function DemoComponent_rate_basic() {\nreturn(<Rate />);\n};\n\nexport const demo = <DemoComponent_rate_basic key=\"DemoComponent_rate_basic\" />;\n"],"cssCodes":[]},{"name":"character","content":"---\norder: 4\ntitle:\n  zh-CN: 其他字符\n  en-US: Other Character\n---\n\n## zh-CN\n\n可以将星星替换为其他字符，比如字母，数字，字体图标甚至中文。\n\n## en-US\n\nReplace the default star to other character like alphabet, digit, iconfont or even Chinese word.\n\n````jsx\nimport { Rate, Icon } from 'antd';\n\nReactDOM.render(\n  <div>\n    <Rate character={<Icon type=\"heart\" />} allowHalf />\n    <br />\n    <Rate character=\"A\" allowHalf style={{ fontSize: 36 }} />\n    <br />\n    <Rate character=\"好\" allowHalf />\n  </div>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Rate, Icon } from 'antd';\n\nexport default function DemoComponent_rate_character() {\nreturn(\n  <div>\n    <Rate character={<Icon type=\"heart\" />} allowHalf />\n    <br />\n    <Rate character=\"A\" allowHalf style={{ fontSize: 36 }} />\n    <br />\n    <Rate character=\"好\" allowHalf />\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_rate_character key=\"DemoComponent_rate_character\" />;\n"],"cssCodes":[]},{"name":"disabled","content":"---\norder: 3\ntitle:\n  zh-CN: 只读\n  en-US: Read only\n---\n\n## zh-CN\n\n只读，无法进行鼠标交互。\n\n## en-US\n\nRead only, can't use mouse to interact.\n\n````jsx\nimport { Rate } from 'antd';\n\nReactDOM.render(<Rate disabled defaultValue={2} />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Rate } from 'antd';\n\nexport default function DemoComponent_rate_disabled() {\nreturn(<Rate disabled defaultValue={2} />);\n};\n\nexport const demo = <DemoComponent_rate_disabled key=\"DemoComponent_rate_disabled\" />;\n"],"cssCodes":[]},{"name":"half","content":"---\norder: 1\ntitle:\n  zh-CN: 半星\n  en-US: Half star\n---\n\n## zh-CN\n\n支持选中半星。\n\n## en-US\n\nSupport select half star.\n\n````jsx\nimport { Rate } from 'antd';\n\nReactDOM.render(<Rate allowHalf defaultValue={2.5} />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Rate } from 'antd';\n\nexport default function DemoComponent_rate_half() {\nreturn(<Rate allowHalf defaultValue={2.5} />);\n};\n\nexport const demo = <DemoComponent_rate_half key=\"DemoComponent_rate_half\" />;\n"],"cssCodes":[]},{"name":"text","content":"---\norder: 2\ntitle:\n  zh-CN: 文案展现\n  en-US: Show copywriting\n---\n\n## zh-CN\n\n给评分组件加上文案展示。\n\n## en-US\n\nAdd copywriting in rate components.\n\n````jsx\nimport { Rate } from 'antd';\n\nclass Rater extends React.Component {\n  state = {\n    value: 3,\n    count: null,\n  }\n  handleChange = (value) => {\n    this.setState({ value });\n  }\n  render() {\n    const { value } = this.state;\n    return (\n      <span>\n        <Rate onChange={this.handleChange} value={value} />\n        {value && <span className=\"ant-rate-text\">{value} stars</span>}\n      </span>\n    );\n  }\n}\n\nReactDOM.render(<Rater />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Rate } from 'antd';\n\nclass Rater extends React.Component {\n  state = {\n    value: 3,\n    count: null,\n  }\n  handleChange = (value) => {\n    this.setState({ value });\n  }\n  render() {\n    const { value } = this.state;\n    return (\n      <span>\n        <Rate onChange={this.handleChange} value={value} />\n        {value && <span className=\"ant-rate-text\">{value} stars</span>}\n      </span>\n    );\n  }\n}\n\nexport default function DemoComponent_rate_text() {\nreturn(<Rater />);\n};\n\nexport const demo = <DemoComponent_rate_text key=\"DemoComponent_rate_text\" />;\n"],"cssCodes":[]}]},{"name":"select","demos":[{"name":"automatic_tokenization","content":"---\norder: 11\ntitle:\n  zh-CN: 自动分词\n  en-US: Automatic tokenization\n---\n\n## zh-CN\n\n试下复制 `露西,杰克` 到输入框里。只在 tags 和 multiple 模式下可用。\n\n## en-US\n\nTry to copy `Lucy,Jack` to the input. Only available in tags and multiple mode.\n\n````jsx\nimport { Select } from 'antd';\nconst Option = Select.Option;\n\nconst children = [];\nfor (let i = 10; i < 36; i++) {\n  children.push(<Option key={i.toString(36) + i}>{i.toString(36) + i}</Option>);\n}\n\nfunction handleChange(value) {\n  console.log(`selected ${value}`);\n}\n\nReactDOM.render(\n  <Select\n    mode=\"tags\"\n    style={{ width: '100%' }}\n    onChange={handleChange}\n    tokenSeparators={[',']}\n  >\n    {children}\n  </Select>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Select } from 'antd';\nconst Option = Select.Option;\n\nconst children = [];\nfor (let i = 10; i < 36; i++) {\n  children.push(<Option key={i.toString(36) + i}>{i.toString(36) + i}</Option>);\n}\n\nfunction handleChange(value) {\n  console.log(`selected ${value}`);\n}\n\nexport default function DemoComponent_select_automatic_tokenization() {\nreturn(\n  <Select\n    mode=\"tags\"\n    style={{ width: '100%' }}\n    onChange={handleChange}\n    tokenSeparators={[',']}\n  >\n    {children}\n  </Select>\n);\n};\n\nexport const demo = <DemoComponent_select_automatic_tokenization key=\"DemoComponent_select_automatic_tokenization\" />;\n"],"cssCodes":[]},{"name":"basic","content":"---\norder: 0\ntitle:\n  zh-CN: 基本使用\n  en-US: Basic Usage\n---\n\n## zh-CN\n\n基本使用。\n\n## en-US\n\nBasic Usage.\n\n````jsx\nimport { Select } from 'antd';\nconst Option = Select.Option;\n\nfunction handleChange(value) {\n  console.log(`selected ${value}`);\n}\n\nReactDOM.render(\n  <div>\n    <Select defaultValue=\"lucy\" style={{ width: 120 }} onChange={handleChange}>\n      <Option value=\"jack\">Jack</Option>\n      <Option value=\"lucy\">Lucy</Option>\n      <Option value=\"disabled\" disabled>Disabled</Option>\n      <Option value=\"Yiminghe\">yiminghe</Option>\n    </Select>\n    <Select defaultValue=\"lucy\" style={{ width: 120 }} allowClear disabled>\n      <Option value=\"lucy\">Lucy</Option>\n    </Select>\n  </div>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Select } from 'antd';\nconst Option = Select.Option;\n\nfunction handleChange(value) {\n  console.log(`selected ${value}`);\n}\n\nexport default function DemoComponent_select_basic() {\nreturn(\n  <div>\n    <Select defaultValue=\"lucy\" style={{ width: 120 }} onChange={handleChange}>\n      <Option value=\"jack\">Jack</Option>\n      <Option value=\"lucy\">Lucy</Option>\n      <Option value=\"disabled\" disabled>Disabled</Option>\n      <Option value=\"Yiminghe\">yiminghe</Option>\n    </Select>\n    <Select defaultValue=\"lucy\" style={{ width: 120 }} allowClear disabled>\n      <Option value=\"lucy\">Lucy</Option>\n    </Select>\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_select_basic key=\"DemoComponent_select_basic\" />;\n"],"cssCodes":[]},{"name":"combobox","content":"---\norder: 4\ntitle:\n  zh-CN: 智能提示\n  en-US: Automatic completion\n---\n\n## zh-CN\n\n输入框自动完成功能，下面是一个账号注册表单的例子。\n\n推荐使用 [AutoComplete](/components/auto-complete/) 组件。\n\n## en-US\n\nAutomatic completion of select input.\n\nUsing the [AutoComplete](/components/auto-complete/) component is strongly recommended instead as it is more flexible and capable.\n\n\n````jsx\nimport { Select } from 'antd';\nconst Option = Select.Option;\n\nclass App extends React.Component {\n  state = {\n    options: [],\n  }\n  handleChange = (value) => {\n    let options;\n    if (!value || value.indexOf('@') >= 0) {\n      options = [];\n    } else {\n      options = ['gmail.com', '163.com', 'qq.com'].map((domain) => {\n        const email = `${value}@${domain}`;\n        return <Option key={email}>{email}</Option>;\n      });\n    }\n    this.setState({ options });\n  }\n  render() {\n    // filterOption needs to be false，as the value is dynamically generated\n    return (\n      <Select\n        mode=\"combobox\"\n        style={{ width: 200 }}\n        onChange={this.handleChange}\n        filterOption={false}\n        placeholder=\"Enter the account name\"\n      >\n        {this.state.options}\n      </Select>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Select } from 'antd';\nconst Option = Select.Option;\n\nclass App extends React.Component {\n  state = {\n    options: [],\n  }\n  handleChange = (value) => {\n    let options;\n    if (!value || value.indexOf('@') >= 0) {\n      options = [];\n    } else {\n      options = ['gmail.com', '163.com', 'qq.com'].map((domain) => {\n        const email = `${value}@${domain}`;\n        return <Option key={email}>{email}</Option>;\n      });\n    }\n    this.setState({ options });\n  }\n  render() {\n    // filterOption needs to be false，as the value is dynamically generated\n    return (\n      <Select\n        mode=\"combobox\"\n        style={{ width: 200 }}\n        onChange={this.handleChange}\n        filterOption={false}\n        placeholder=\"Enter the account name\"\n      >\n        {this.state.options}\n      </Select>\n    );\n  }\n}\n\nexport default function DemoComponent_select_combobox() {\nreturn(<App />);\n};\n\nexport const demo = <DemoComponent_select_combobox key=\"DemoComponent_select_combobox\" />;\n"],"cssCodes":[]},{"name":"coordinate","content":"---\norder: 6\ntitle:\n  zh-CN: 联动\n  en-US: coordinate\n---\n\n## zh-CN\n\n省市联动是典型的例子。\n\n推荐使用 [Cascader](/components/cascader/) 组件。\n\n## en-US\n\nCoordinating the selection of provinces and cities is a common use case and demonstrates how selection can be coordinated.\n\nUsing the [Cascader](/components/cascader) component is strongly recommended instead as it is more flexible and capable.\n\n\n````jsx\nimport { Select } from 'antd';\nconst Option = Select.Option;\n\nconst provinceData = ['Zhejiang', 'Jiangsu'];\nconst cityData = {\n  Zhejiang: ['Hangzhou', 'Ningbo', 'Wenzhou'],\n  Jiangsu: ['Nanjing', 'Suzhou', 'Zhenjiang'],\n};\n\nclass App extends React.Component {\n  state = {\n    cities: cityData[provinceData[0]],\n    secondCity: cityData[provinceData[0]][0],\n  }\n  handleProvinceChange = (value) => {\n    this.setState({\n      cities: cityData[value],\n      secondCity: cityData[value][0],\n    });\n  }\n  onSecondCityChange = (value) => {\n    this.setState({\n      secondCity: value,\n    });\n  }\n  render() {\n    const provinceOptions = provinceData.map(province => <Option key={province}>{province}</Option>);\n    const cityOptions = this.state.cities.map(city => <Option key={city}>{city}</Option>);\n    return (\n      <div>\n        <Select defaultValue={provinceData[0]} style={{ width: 90 }} onChange={this.handleProvinceChange}>\n          {provinceOptions}\n        </Select>\n        <Select value={this.state.secondCity} style={{ width: 90 }} onChange={this.onSecondCityChange}>\n          {cityOptions}\n        </Select>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Select } from 'antd';\nconst Option = Select.Option;\n\nconst provinceData = ['Zhejiang', 'Jiangsu'];\nconst cityData = {\n  Zhejiang: ['Hangzhou', 'Ningbo', 'Wenzhou'],\n  Jiangsu: ['Nanjing', 'Suzhou', 'Zhenjiang'],\n};\n\nclass App extends React.Component {\n  state = {\n    cities: cityData[provinceData[0]],\n    secondCity: cityData[provinceData[0]][0],\n  }\n  handleProvinceChange = (value) => {\n    this.setState({\n      cities: cityData[value],\n      secondCity: cityData[value][0],\n    });\n  }\n  onSecondCityChange = (value) => {\n    this.setState({\n      secondCity: value,\n    });\n  }\n  render() {\n    const provinceOptions = provinceData.map(province => <Option key={province}>{province}</Option>);\n    const cityOptions = this.state.cities.map(city => <Option key={city}>{city}</Option>);\n    return (\n      <div>\n        <Select defaultValue={provinceData[0]} style={{ width: 90 }} onChange={this.handleProvinceChange}>\n          {provinceOptions}\n        </Select>\n        <Select value={this.state.secondCity} style={{ width: 90 }} onChange={this.onSecondCityChange}>\n          {cityOptions}\n        </Select>\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_select_coordinate() {\nreturn(<App />);\n};\n\nexport const demo = <DemoComponent_select_coordinate key=\"DemoComponent_select_coordinate\" />;\n"],"cssCodes":[]},{"name":"label_in_value","content":"---\norder: 10\ntitle:\n  zh-CN: 获得选项的文本\n  en-US: Get value of selected item\n---\n\n## zh-CN\n\n默认情况下 `onChange` 里只能拿到 value，如果需要拿到选中的节点文本 label，可以使用 `labelInValue` 属性。\n\n选中项的 label 会被包装到 value 中传递给 `onChange` 等函数，此时 value 是一个对象。\n\n## en-US\n\nAs a default behavior, the onChange callback can only get the value of the selected item. The labelInValue prop can be used to get the label property of the selected item.\n\nThe label of the selected item will be packed as an object for passing to the onChange callback.\n\n````jsx\nimport { Select } from 'antd';\nconst Option = Select.Option;\n\nfunction handleChange(value) {\n  console.log(value);  // { key: \"lucy\", label: \"Lucy (101)\" }\n}\n\nReactDOM.render(\n  <Select labelInValue defaultValue={{ key: 'lucy' }} style={{ width: 120 }} onChange={handleChange}>\n    <Option value=\"jack\">Jack (100)</Option>\n    <Option value=\"lucy\">Lucy (101)</Option>\n  </Select>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Select } from 'antd';\nconst Option = Select.Option;\n\nfunction handleChange(value) {\n  console.log(value);  // { key: \"lucy\", label: \"Lucy (101)\" }\n}\n\nexport default function DemoComponent_select_label_in_value() {\nreturn(\n  <Select labelInValue defaultValue={{ key: 'lucy' }} style={{ width: 120 }} onChange={handleChange}>\n    <Option value=\"jack\">Jack (100)</Option>\n    <Option value=\"lucy\">Lucy (101)</Option>\n  </Select>\n);\n};\n\nexport const demo = <DemoComponent_select_label_in_value key=\"DemoComponent_select_label_in_value\" />;\n"],"cssCodes":[]},{"name":"multiple","content":"---\norder: 2\ntitle:\n  zh-CN: 多选\n  en-US: multiple selection\n---\n\n## zh-CN\n\n多选，从已有条目中选择（scroll the menu）\n\n## en-US\n\nMultiple selection, selecting from existing items (scroll the menu).\n\n````jsx\nimport { Select } from 'antd';\nconst Option = Select.Option;\n\nconst children = [];\nfor (let i = 10; i < 36; i++) {\n  children.push(<Option key={i.toString(36) + i}>{i.toString(36) + i}</Option>);\n}\n\nfunction handleChange(value) {\n  console.log(`selected ${value}`);\n}\n\nReactDOM.render(\n  <Select\n    mode=\"multiple\"\n    style={{ width: '100%' }}\n    placeholder=\"Please select\"\n    defaultValue={['a10', 'c12']}\n    onChange={handleChange}\n  >\n    {children}\n  </Select>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Select } from 'antd';\nconst Option = Select.Option;\n\nconst children = [];\nfor (let i = 10; i < 36; i++) {\n  children.push(<Option key={i.toString(36) + i}>{i.toString(36) + i}</Option>);\n}\n\nfunction handleChange(value) {\n  console.log(`selected ${value}`);\n}\n\nexport default function DemoComponent_select_multiple() {\nreturn(\n  <Select\n    mode=\"multiple\"\n    style={{ width: '100%' }}\n    placeholder=\"Please select\"\n    defaultValue={['a10', 'c12']}\n    onChange={handleChange}\n  >\n    {children}\n  </Select>\n);\n};\n\nexport const demo = <DemoComponent_select_multiple key=\"DemoComponent_select_multiple\" />;\n"],"cssCodes":[]},{"name":"optgroup","content":"---\norder: 5\ntitle:\n  zh-CN: 分组\n  en-US: Option Group\n---\n\n## zh-CN\n\n用 `OptGroup` 进行选项分组。\n\n## en-US\n\nUsing `OptGroup` to group the options.\n\n````jsx\nimport { Select } from 'antd';\nconst { Option, OptGroup } = Select;\n\nfunction handleChange(value) {\n  console.log(`selected ${value}`);\n}\n\nReactDOM.render(\n  <Select\n    defaultValue=\"lucy\"\n    style={{ width: 200 }}\n    onChange={handleChange}\n  >\n    <OptGroup label=\"Manager\">\n      <Option value=\"jack\">Jack</Option>\n      <Option value=\"lucy\">Lucy</Option>\n    </OptGroup>\n    <OptGroup label=\"Engineer\">\n      <Option value=\"Yiminghe\">yiminghe</Option>\n    </OptGroup>\n  </Select>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Select } from 'antd';\nconst { Option, OptGroup } = Select;\n\nfunction handleChange(value) {\n  console.log(`selected ${value}`);\n}\n\nexport default function DemoComponent_select_optgroup() {\nreturn(\n  <Select\n    defaultValue=\"lucy\"\n    style={{ width: 200 }}\n    onChange={handleChange}\n  >\n    <OptGroup label=\"Manager\">\n      <Option value=\"jack\">Jack</Option>\n      <Option value=\"lucy\">Lucy</Option>\n    </OptGroup>\n    <OptGroup label=\"Engineer\">\n      <Option value=\"Yiminghe\">yiminghe</Option>\n    </OptGroup>\n  </Select>\n);\n};\n\nexport const demo = <DemoComponent_select_optgroup key=\"DemoComponent_select_optgroup\" />;\n"],"cssCodes":[]},{"name":"search_box","content":"---\norder: 9\ntitle:\n  zh-CN: 搜索框\n  en-US: Search Box\n---\n\n## zh-CN\n\n自动补全和远程数据结合。\n\n## en-US\n\nAutocomplete with remote ajax data.\n\n````jsx\nimport { Select } from 'antd';\nimport jsonp from 'fetch-jsonp';\nimport querystring from 'querystring';\nconst Option = Select.Option;\n\nlet timeout;\nlet currentValue;\n\nfunction fetch(value, callback) {\n  if (timeout) {\n    clearTimeout(timeout);\n    timeout = null;\n  }\n  currentValue = value;\n\n  function fake() {\n    const str = querystring.encode({\n      code: 'utf-8',\n      q: value,\n    });\n    jsonp(`https://suggest.taobao.com/sug?${str}`)\n      .then(response => response.json())\n      .then((d) => {\n        if (currentValue === value) {\n          const result = d.result;\n          const data = [];\n          result.forEach((r) => {\n            data.push({\n              value: r[0],\n              text: r[0],\n            });\n          });\n          callback(data);\n        }\n      });\n  }\n\n  timeout = setTimeout(fake, 300);\n}\n\nclass SearchInput extends React.Component {\n  state = {\n    data: [],\n    value: '',\n  }\n  handleChange = (value) => {\n    this.setState({ value });\n    fetch(value, data => this.setState({ data }));\n  }\n  render() {\n    const options = this.state.data.map(d => <Option key={d.value}>{d.text}</Option>);\n    return (\n      <Select\n        mode=\"combobox\"\n        value={this.state.value}\n        placeholder={this.props.placeholder}\n        notFoundContent=\"\"\n        style={this.props.style}\n        defaultActiveFirstOption={false}\n        showArrow={false}\n        filterOption={false}\n        onChange={this.handleChange}\n      >\n        {options}\n      </Select>\n    );\n  }\n}\n\nReactDOM.render(\n  <SearchInput placeholder=\"input search text\" style={{ width: 200 }} />\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Select } from 'antd';\nimport jsonp from 'fetch-jsonp';\nimport querystring from 'querystring';\nconst Option = Select.Option;\n\nlet timeout;\nlet currentValue;\n\nfunction fetch(value, callback) {\n  if (timeout) {\n    clearTimeout(timeout);\n    timeout = null;\n  }\n  currentValue = value;\n\n  function fake() {\n    const str = querystring.encode({\n      code: 'utf-8',\n      q: value,\n    });\n    jsonp(`https://suggest.taobao.com/sug?${str}`)\n      .then(response => response.json())\n      .then((d) => {\n        if (currentValue === value) {\n          const result = d.result;\n          const data = [];\n          result.forEach((r) => {\n            data.push({\n              value: r[0],\n              text: r[0],\n            });\n          });\n          callback(data);\n        }\n      });\n  }\n\n  timeout = setTimeout(fake, 300);\n}\n\nclass SearchInput extends React.Component {\n  state = {\n    data: [],\n    value: '',\n  }\n  handleChange = (value) => {\n    this.setState({ value });\n    fetch(value, data => this.setState({ data }));\n  }\n  render() {\n    const options = this.state.data.map(d => <Option key={d.value}>{d.text}</Option>);\n    return (\n      <Select\n        mode=\"combobox\"\n        value={this.state.value}\n        placeholder={this.props.placeholder}\n        notFoundContent=\"\"\n        style={this.props.style}\n        defaultActiveFirstOption={false}\n        showArrow={false}\n        filterOption={false}\n        onChange={this.handleChange}\n      >\n        {options}\n      </Select>\n    );\n  }\n}\n\nexport default function DemoComponent_select_search_box() {\nreturn(\n  <SearchInput placeholder=\"input search text\" style={{ width: 200 }} />\n);\n};\n\nexport const demo = <DemoComponent_select_search_box key=\"DemoComponent_select_search_box\" />;\n"],"cssCodes":[]},{"name":"search","content":"---\norder: 1\ntitle:\n  zh-CN: 带搜索框\n  en-US: Select with search field\n---\n\n## zh-CN\n\n展开后可对选项进行搜索。\n\n## en-US\n\nSearch the options while expanded.\n\n````jsx\nimport { Select } from 'antd';\nconst Option = Select.Option;\n\nfunction handleChange(value) {\n  console.log(`selected ${value}`);\n}\n\nReactDOM.render(\n  <Select\n    showSearch\n    style={{ width: 200 }}\n    placeholder=\"Select a person\"\n    optionFilterProp=\"children\"\n    onChange={handleChange}\n    filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n  >\n    <Option value=\"jack\">Jack</Option>\n    <Option value=\"lucy\">Lucy</Option>\n    <Option value=\"tom\">Tom</Option>\n  </Select>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Select } from 'antd';\nconst Option = Select.Option;\n\nfunction handleChange(value) {\n  console.log(`selected ${value}`);\n}\n\nexport default function DemoComponent_select_search() {\nreturn(\n  <Select\n    showSearch\n    style={{ width: 200 }}\n    placeholder=\"Select a person\"\n    optionFilterProp=\"children\"\n    onChange={handleChange}\n    filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n  >\n    <Option value=\"jack\">Jack</Option>\n    <Option value=\"lucy\">Lucy</Option>\n    <Option value=\"tom\">Tom</Option>\n  </Select>\n);\n};\n\nexport const demo = <DemoComponent_select_search key=\"DemoComponent_select_search\" />;\n"],"cssCodes":[]},{"name":"select_users","content":"---\norder: 12\ntitle:\n  zh-CN: 搜索用户\n  en-US: Search and Select Users\n---\n\n## zh-CN\n\n一个带有远程搜索，节流控制，请求时序控制，加载状态的多选示例。\n\n## en-US\n\nA complete multiple select sample with remote search, debounce fetch, ajax callback order flow, and loading state.\n\n````jsx\nimport { Select, Spin } from 'antd';\nimport debounce from 'lodash.debounce';\nconst Option = Select.Option;\n\nclass UserRemoteSelect extends React.Component {\n  constructor(props) {\n    super(props);\n    this.lastFetchId = 0;\n    this.fetchUser = debounce(this.fetchUser, 800);\n  }\n  state = {\n    data: [],\n    value: [],\n    fetching: false,\n  }\n  fetchUser = (value) => {\n    console.log('fetching user', value);\n    this.lastFetchId += 1;\n    const fetchId = this.lastFetchId;\n    this.setState({ fetching: true });\n    fetch('https://randomuser.me/api/?results=5')\n      .then(response => response.json())\n      .then((body) => {\n        if (fetchId !== this.lastFetchId) { // for fetch callback order\n          return;\n        }\n        const data = body.results.map(user => ({\n          text: `${user.name.first} ${user.name.last}`,\n          value: user.login.username,\n          fetching: false,\n        }));\n        this.setState({ data });\n      });\n  }\n  handleChange = (value) => {\n    this.setState({\n      value,\n      data: [],\n      fetching: false,\n    });\n  }\n  render() {\n    const { fetching, data, value } = this.state;\n    return (\n      <Select\n        mode=\"multiple\"\n        labelInValue\n        value={value}\n        placeholder=\"Select users\"\n        notFoundContent={fetching ? <Spin size=\"small\" /> : null}\n        filterOption={false}\n        onSearch={this.fetchUser}\n        onChange={this.handleChange}\n        style={{ width: '100%' }}\n      >\n        {data.map(d => <Option key={d.value}>{d.text}</Option>)}\n      </Select>\n    );\n  }\n}\n\nReactDOM.render(<UserRemoteSelect />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Select, Spin } from 'antd';\nimport debounce from 'lodash.debounce';\nconst Option = Select.Option;\n\nclass UserRemoteSelect extends React.Component {\n  constructor(props) {\n    super(props);\n    this.lastFetchId = 0;\n    this.fetchUser = debounce(this.fetchUser, 800);\n  }\n  state = {\n    data: [],\n    value: [],\n    fetching: false,\n  }\n  fetchUser = (value) => {\n    console.log('fetching user', value);\n    this.lastFetchId += 1;\n    const fetchId = this.lastFetchId;\n    this.setState({ fetching: true });\n    fetch('https://randomuser.me/api/?results=5')\n      .then(response => response.json())\n      .then((body) => {\n        if (fetchId !== this.lastFetchId) { // for fetch callback order\n          return;\n        }\n        const data = body.results.map(user => ({\n          text: `${user.name.first} ${user.name.last}`,\n          value: user.login.username,\n          fetching: false,\n        }));\n        this.setState({ data });\n      });\n  }\n  handleChange = (value) => {\n    this.setState({\n      value,\n      data: [],\n      fetching: false,\n    });\n  }\n  render() {\n    const { fetching, data, value } = this.state;\n    return (\n      <Select\n        mode=\"multiple\"\n        labelInValue\n        value={value}\n        placeholder=\"Select users\"\n        notFoundContent={fetching ? <Spin size=\"small\" /> : null}\n        filterOption={false}\n        onSearch={this.fetchUser}\n        onChange={this.handleChange}\n        style={{ width: '100%' }}\n      >\n        {data.map(d => <Option key={d.value}>{d.text}</Option>)}\n      </Select>\n    );\n  }\n}\n\nexport default function DemoComponent_select_select_users() {\nreturn(<UserRemoteSelect />);\n};\n\nexport const demo = <DemoComponent_select_select_users key=\"DemoComponent_select_select_users\" />;\n"],"cssCodes":[]},{"name":"size","content":"---\norder: 1\ntitle:\n  zh-CN: 三种大小\n  en-US: Sizes\n---\n\n## zh-CN\n\n三种大小的选择框，当 size 分别为 `large` 和 `small` 时，输入框高度为 `32px` 和 `22px` ，默认高度为 `28px`\n\n## en-US\n\nThe height of the inpub field for the select defaults to 28px. If size is set to large, the height will be 32px, and if set to small, 22px.\n\n````jsx\nimport { Select, Radio } from 'antd';\nconst Option = Select.Option;\n\nconst children = [];\nfor (let i = 10; i < 36; i++) {\n  children.push(<Option key={i.toString(36) + i}>{i.toString(36) + i}</Option>);\n}\n\nfunction handleChange(value) {\n  console.log(`Selected: ${value}`);\n}\n\nclass SelectSizesDemo extends React.Component {\n  state = {\n    size: 'default',\n  };\n\n  handleSizeChange = (e) => {\n    this.setState({ size: e.target.value });\n  }\n\n  render() {\n    const { size } = this.state;\n    return (\n      <div>\n        <Radio.Group value={size} onChange={this.handleSizeChange}>\n          <Radio.Button value=\"large\">Large</Radio.Button>\n          <Radio.Button value=\"default\">Default</Radio.Button>\n          <Radio.Button value=\"small\">Small</Radio.Button>\n        </Radio.Group>\n        <br /><br />\n        <Select\n          size={size}\n          defaultValue=\"a1\"\n          onChange={handleChange}\n          style={{ width: 200 }}\n        >\n          {children}\n        </Select>\n        <br />\n        <Select\n          mode=\"combobox\"\n          size={size}\n          defaultValue=\"a1\"\n          onChange={handleChange}\n          style={{ width: 200 }}\n        >\n          {children}\n        </Select>\n        <br />\n        <Select\n          mode=\"multiple\"\n          size={size}\n          placeholder=\"Please select\"\n          defaultValue={['a10', 'c12']}\n          onChange={handleChange}\n          style={{ width: '100%' }}\n        >\n          {children}\n        </Select>\n        <br />\n        <Select\n          mode=\"tags\"\n          size={size}\n          placeholder=\"Please select\"\n          defaultValue={['a10', 'c12']}\n          onChange={handleChange}\n          style={{ width: '100%' }}\n        >\n          {children}\n        </Select>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<SelectSizesDemo />, mountNode);\n````\n\n````css\n.code-box-demo .ant-select {\n  margin: 0 8px 10px 0;\n}\n\n#components-select-demo-search-box .code-box-demo .ant-select {\n  margin: 0;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Select, Radio } from 'antd';\nconst Option = Select.Option;\n\nconst children = [];\nfor (let i = 10; i < 36; i++) {\n  children.push(<Option key={i.toString(36) + i}>{i.toString(36) + i}</Option>);\n}\n\nfunction handleChange(value) {\n  console.log(`Selected: ${value}`);\n}\n\nclass SelectSizesDemo extends React.Component {\n  state = {\n    size: 'default',\n  };\n\n  handleSizeChange = (e) => {\n    this.setState({ size: e.target.value });\n  }\n\n  render() {\n    const { size } = this.state;\n    return (\n      <div>\n        <Radio.Group value={size} onChange={this.handleSizeChange}>\n          <Radio.Button value=\"large\">Large</Radio.Button>\n          <Radio.Button value=\"default\">Default</Radio.Button>\n          <Radio.Button value=\"small\">Small</Radio.Button>\n        </Radio.Group>\n        <br /><br />\n        <Select\n          size={size}\n          defaultValue=\"a1\"\n          onChange={handleChange}\n          style={{ width: 200 }}\n        >\n          {children}\n        </Select>\n        <br />\n        <Select\n          mode=\"combobox\"\n          size={size}\n          defaultValue=\"a1\"\n          onChange={handleChange}\n          style={{ width: 200 }}\n        >\n          {children}\n        </Select>\n        <br />\n        <Select\n          mode=\"multiple\"\n          size={size}\n          placeholder=\"Please select\"\n          defaultValue={['a10', 'c12']}\n          onChange={handleChange}\n          style={{ width: '100%' }}\n        >\n          {children}\n        </Select>\n        <br />\n        <Select\n          mode=\"tags\"\n          size={size}\n          placeholder=\"Please select\"\n          defaultValue={['a10', 'c12']}\n          onChange={handleChange}\n          style={{ width: '100%' }}\n        >\n          {children}\n        </Select>\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_select_size() {\nreturn(<SelectSizesDemo />);\n};\n\nexport const demo = <DemoComponent_select_size key=\"DemoComponent_select_size\" />;\n"],"cssCodes":[".code-box-demo .ant-select {\n  margin: 0 8px 10px 0;\n}\n\n#components-select-demo-search-box .code-box-demo .ant-select {\n  margin: 0;\n}\n"]},{"name":"tags","content":"---\norder: 3\ntitle:\n  zh-CN: 标签\n  en-US: Tags\n---\n\n## zh-CN\n\ntags select，随意输入的内容（scroll the menu）\n\n## en-US\n\nSelect with tags, transform input to tag (scroll the menu)\n\n````jsx\nimport { Select } from 'antd';\nconst Option = Select.Option;\n\nconst children = [];\nfor (let i = 10; i < 36; i++) {\n  children.push(<Option key={i.toString(36) + i}>{i.toString(36) + i}</Option>);\n}\n\nfunction handleChange(value) {\n  console.log(`selected ${value}`);\n}\n\nReactDOM.render(\n  <Select\n    mode=\"tags\"\n    style={{ width: '100%' }}\n    searchPlaceholder=\"标签模式\"\n    onChange={handleChange}\n  >\n    {children}\n  </Select>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Select } from 'antd';\nconst Option = Select.Option;\n\nconst children = [];\nfor (let i = 10; i < 36; i++) {\n  children.push(<Option key={i.toString(36) + i}>{i.toString(36) + i}</Option>);\n}\n\nfunction handleChange(value) {\n  console.log(`selected ${value}`);\n}\n\nexport default function DemoComponent_select_tags() {\nreturn(\n  <Select\n    mode=\"tags\"\n    style={{ width: '100%' }}\n    searchPlaceholder=\"标签模式\"\n    onChange={handleChange}\n  >\n    {children}\n  </Select>\n);\n};\n\nexport const demo = <DemoComponent_select_tags key=\"DemoComponent_select_tags\" />;\n"],"cssCodes":[]}]},{"name":"slider","demos":[{"name":"basic","content":"---\norder: 0\ntitle:\n  zh-CN: 基本\n  en-US: Basic\n---\n\n## zh-CN\n\n基本滑动条。当 `range` 为 `true` 时，渲染为双滑块。当 `disabled` 为 `true` 时，滑块处于不可用状态。\n\n## en-US\n\nBasic slider. When `range` is `true`, display as dual thumb mode. When `disable` is `true`, the slider will not be interactable.\n\n````jsx\nimport { Slider, Switch } from 'antd';\n\nclass Demo extends React.Component {\n  state = {\n    disabled: false,\n  };\n  handleDisabledChange = (disabled) => {\n    this.setState({ disabled });\n  }\n  render() {\n    const { disabled } = this.state;\n    return (\n      <div>\n        <Slider defaultValue={30} disabled={disabled} />\n        <Slider range defaultValue={[20, 50]} disabled={disabled} />\n        Disabled: <Switch size=\"small\" checked={disabled} onChange={this.handleDisabledChange} />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n````\n\n<style>\n.code-box-demo .ant-slider {\n  margin-bottom: 16px;\n}\n</style>\n","jsCodes":["import React from 'react';\nimport { Slider, Switch } from 'antd';\n\nclass Demo extends React.Component {\n  state = {\n    disabled: false,\n  };\n  handleDisabledChange = (disabled) => {\n    this.setState({ disabled });\n  }\n  render() {\n    const { disabled } = this.state;\n    return (\n      <div>\n        <Slider defaultValue={30} disabled={disabled} />\n        <Slider range defaultValue={[20, 50]} disabled={disabled} />\n        Disabled: <Switch size=\"small\" checked={disabled} onChange={this.handleDisabledChange} />\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_slider_basic() {\nreturn(<Demo />);\n};\n\nexport const demo = <DemoComponent_slider_basic key=\"DemoComponent_slider_basic\" />;\n"],"cssCodes":[]},{"name":"event","content":"---\norder: 4\ntitle:\n  zh-CN: 事件\n  en-US: Event\n---\n\n## zh-CN\n\n当 Slider 的值发生改变时，会触发 `onChange` 事件，并把改变后的值作为参数传入。在 `onmouseup` 时，会触发 `onAfterChange` 事件，并把当前值作为参数传入。\n\n## en-US\n\nThe `onChange` callback function will fire when the user changes the slider's value.\nThe `onAfterChange` callback function will fire when `onmouseup` fired.\n\n````jsx\nimport { Slider } from 'antd';\n\nfunction onChange(value) {\n  console.log('onChange: ', value);\n}\n\nfunction onAfterChange(value) {\n  console.log('onAfterChange: ', value);\n}\n\nReactDOM.render(\n  <div>\n    <Slider defaultValue={30} onChange={onChange} onAfterChange={onAfterChange} />\n    <Slider range step={10} defaultValue={[20, 50]} onChange={onChange} onAfterChange={onAfterChange} />\n  </div>,\n  mountNode\n);\n````\n","jsCodes":["import React from 'react';\nimport { Slider } from 'antd';\n\nfunction onChange(value) {\n  console.log('onChange: ', value);\n}\n\nfunction onAfterChange(value) {\n  console.log('onAfterChange: ', value);\n}\n\nexport default function DemoComponent_slider_event() {\nreturn(\n  <div>\n    <Slider defaultValue={30} onChange={onChange} onAfterChange={onAfterChange} />\n    <Slider range step={10} defaultValue={[20, 50]} onChange={onChange} onAfterChange={onAfterChange} />\n  </div>);\n};\n\nexport const demo = <DemoComponent_slider_event key=\"DemoComponent_slider_event\" />;\n"],"cssCodes":[]},{"name":"icon_slider","content":"---\norder: 2\ntitle:\n  zh-CN: 带 icon 的滑块\n  en-US: Slider with icon\n---\n\n## zh-CN\n\n滑块左右可以设置图标来表达业务含义。\n\n## en-US\n\nYou can add an icon beside the slider to make it meaningful.\n\n````jsx\nimport { Slider, Icon } from 'antd';\n\nclass IconSlider extends React.Component {\n  constructor(props) {\n    super(props);\n    const { max, min } = props;\n    const mid = ((max - min) / 2).toFixed(5);\n    this.state = {\n      preIconClass: this.props.value >= mid ? '' : 'anticon-highlight',\n      nextIconClass: this.props.value >= mid ? 'anticon-highlight' : '',\n      mid,\n      sliderValue: this.props.value,\n    };\n  }\n  handleChange = (v) => {\n    this.setState({\n      preIconClass: v >= this.state.mid ? '' : 'anticon-highlight',\n      nextIconClass: v >= this.state.mid ? 'anticon-highlight' : '',\n      sliderValue: v,\n    });\n  }\n  render() {\n    return (\n      <div className=\"icon-wrapper\">\n        <Icon className={this.state.preIconClass} type={this.props.icon[0]} />\n        <Slider {...this.props} onChange={this.handleChange} value={this.state.sliderValue} />\n        <Icon className={this.state.nextIconClass} type={this.props.icon[1]} />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<IconSlider min={0} max={20} value={0} icon={['frown-o', 'smile-o']} />, mountNode);\n````\n\n````css\n.icon-wrapper {\n  position: relative;\n  padding: 0px 30px;\n}\n\n.icon-wrapper .anticon {\n  position: absolute;\n  top: -3px;\n  width: 16px;\n  height: 16px;\n  line-height: 1;\n  font-size: 16px;\n  color: @disabled-color;\n}\n\n.icon-wrapper .anticon:first-child {\n  left: 0;\n}\n\n.icon-wrapper .anticon:last-child {\n  right: 0;\n}\n\n.anticon.anticon-highlight {\n  color: #666;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Slider, Icon } from 'antd';\n\nclass IconSlider extends React.Component {\n  constructor(props) {\n    super(props);\n    const { max, min } = props;\n    const mid = ((max - min) / 2).toFixed(5);\n    this.state = {\n      preIconClass: this.props.value >= mid ? '' : 'anticon-highlight',\n      nextIconClass: this.props.value >= mid ? 'anticon-highlight' : '',\n      mid,\n      sliderValue: this.props.value,\n    };\n  }\n  handleChange = (v) => {\n    this.setState({\n      preIconClass: v >= this.state.mid ? '' : 'anticon-highlight',\n      nextIconClass: v >= this.state.mid ? 'anticon-highlight' : '',\n      sliderValue: v,\n    });\n  }\n  render() {\n    return (\n      <div className=\"icon-wrapper\">\n        <Icon className={this.state.preIconClass} type={this.props.icon[0]} />\n        <Slider {...this.props} onChange={this.handleChange} value={this.state.sliderValue} />\n        <Icon className={this.state.nextIconClass} type={this.props.icon[1]} />\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_slider_icon_slider() {\nreturn(<IconSlider min={0} max={20} value={0} icon={['frown-o', 'smile-o']} />);\n};\n\nexport const demo = <DemoComponent_slider_icon_slider key=\"DemoComponent_slider_icon_slider\" />;\n"],"cssCodes":[".icon-wrapper {\n  position: relative;\n  padding: 0px 30px;\n}\n\n.icon-wrapper .anticon {\n  position: absolute;\n  top: -3px;\n  width: 16px;\n  height: 16px;\n  line-height: 1;\n  font-size: 16px;\n  color: @disabled-color;\n}\n\n.icon-wrapper .anticon:first-child {\n  left: 0;\n}\n\n.icon-wrapper .anticon:last-child {\n  right: 0;\n}\n\n.anticon.anticon-highlight {\n  color: #666;\n}\n"]},{"name":"input_number","content":"---\norder: 1\ntitle:\n  zh-CN: 带输入框的滑块\n  en-US: Slider with InputNumber\n---\n\n## zh-CN\n\n和 [数字输入框](/components/input-number/) 组件保持同步。\n\n## en-US\n\nSynchronize with [InptNumber](/components/input-number/) component.\n\n````jsx\nimport { Slider, InputNumber, Row, Col } from 'antd';\n\nclass IntegerStep extends React.Component {\n  state = {\n    inputValue: 1,\n  }\n  onChange = (value) => {\n    this.setState({\n      inputValue: value,\n    });\n  }\n  render() {\n    return (\n      <Row>\n        <Col span={12}>\n          <Slider min={1} max={20} onChange={this.onChange} value={this.state.inputValue} />\n        </Col>\n        <Col span={4}>\n          <InputNumber\n            min={1}\n            max={20}\n            style={{ marginLeft: 16 }}\n            value={this.state.inputValue}\n            onChange={this.onChange}\n          />\n        </Col>\n      </Row>\n    );\n  }\n}\n\nclass DecimalStep extends React.Component {\n  state = {\n    inputValue: 0,\n  }\n  onChange = (value) => {\n    this.setState({\n      inputValue: value,\n    });\n  }\n  render() {\n    return (\n      <Row>\n        <Col span={12}>\n          <Slider min={0} max={1} onChange={this.onChange} value={this.state.inputValue} step={0.01} />\n        </Col>\n        <Col span={4}>\n          <InputNumber\n            min={0}\n            max={1}\n            style={{ marginLeft: 16 }}\n            step={0.01}\n            value={this.state.inputValue}\n            onChange={this.onChange}\n          />\n        </Col>\n      </Row>\n    );\n  }\n}\n\nReactDOM.render(\n  <div>\n    <IntegerStep />\n    <DecimalStep />\n  </div>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Slider, InputNumber, Row, Col } from 'antd';\n\nclass IntegerStep extends React.Component {\n  state = {\n    inputValue: 1,\n  }\n  onChange = (value) => {\n    this.setState({\n      inputValue: value,\n    });\n  }\n  render() {\n    return (\n      <Row>\n        <Col span={12}>\n          <Slider min={1} max={20} onChange={this.onChange} value={this.state.inputValue} />\n        </Col>\n        <Col span={4}>\n          <InputNumber\n            min={1}\n            max={20}\n            style={{ marginLeft: 16 }}\n            value={this.state.inputValue}\n            onChange={this.onChange}\n          />\n        </Col>\n      </Row>\n    );\n  }\n}\n\nclass DecimalStep extends React.Component {\n  state = {\n    inputValue: 0,\n  }\n  onChange = (value) => {\n    this.setState({\n      inputValue: value,\n    });\n  }\n  render() {\n    return (\n      <Row>\n        <Col span={12}>\n          <Slider min={0} max={1} onChange={this.onChange} value={this.state.inputValue} step={0.01} />\n        </Col>\n        <Col span={4}>\n          <InputNumber\n            min={0}\n            max={1}\n            style={{ marginLeft: 16 }}\n            step={0.01}\n            value={this.state.inputValue}\n            onChange={this.onChange}\n          />\n        </Col>\n      </Row>\n    );\n  }\n}\n\nexport default function DemoComponent_slider_input_number() {\nreturn(\n  <div>\n    <IntegerStep />\n    <DecimalStep />\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_slider_input_number key=\"DemoComponent_slider_input_number\" />;\n"],"cssCodes":[]},{"name":"mark","content":"---\norder: 5\ntitle:\n  zh-CN: 带标签的滑块\n  en-US: Graduated slider\n---\n\n## zh-CN\n\n使用 `marks` 属性标注分段式滑块，使用 `value` / `defaultValue` 指定滑块位置。当 `included=false` 时，表明不同标记间为并列关系。当 `step=null` 时，Slider 的可选值仅有 `marks` 标出来的部分。\n\n## en-US\n\nUsing `marks` property to mark a graduated slider, use `value` or `defaultValue` to specify the position of thumb.\nWhen `included` is false, means that different thumbs are coordinative.\nwhen `step` is null, users can only slide the thumbs onto marks.\n\n\n````jsx\nimport { Slider } from 'antd';\n\nconst marks = {\n  0: '0°C',\n  26: '26°C',\n  37: '37°C',\n  100: {\n    style: {\n      color: '#f50',\n    },\n    label: <strong>100°C</strong>,\n  },\n};\n\nReactDOM.render(\n  <div>\n    <h4>included=true</h4>\n    <Slider marks={marks} defaultValue={37} />\n    <Slider range marks={marks} defaultValue={[26, 37]} />\n\n    <h4>included=false</h4>\n    <Slider marks={marks} included={false} defaultValue={37} />\n\n    <h4>marks & step</h4>\n    <Slider marks={marks} step={10} defaultValue={37} />\n\n    <h4>step=null</h4>\n    <Slider marks={marks} step={null} defaultValue={37} />\n  </div>\n, mountNode);\n````\n\n<style>\n#components-slider-demo-mark h4 {\n  margin: 0 0 16px;\n}\n#components-slider-demo-mark .ant-slider-with-marks {\n  margin-bottom: 44px;\n}\n</style>\n","jsCodes":["import React from 'react';\nimport { Slider } from 'antd';\n\nconst marks = {\n  0: '0°C',\n  26: '26°C',\n  37: '37°C',\n  100: {\n    style: {\n      color: '#f50',\n    },\n    label: <strong>100°C</strong>,\n  },\n};\n\nexport default function DemoComponent_slider_mark() {\nreturn(\n  <div>\n    <h4>included=true</h4>\n    <Slider marks={marks} defaultValue={37} />\n    <Slider range marks={marks} defaultValue={[26, 37]} />\n\n    <h4>included=false</h4>\n    <Slider marks={marks} included={false} defaultValue={37} />\n\n    <h4>marks & step</h4>\n    <Slider marks={marks} step={10} defaultValue={37} />\n\n    <h4>step=null</h4>\n    <Slider marks={marks} step={null} defaultValue={37} />\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_slider_mark key=\"DemoComponent_slider_mark\" />;\n"],"cssCodes":[]},{"name":"tip_formatter","content":"---\norder: 3\ntitle:\n  zh-CN: 自定义提示\n  en-US: Customerize tooltip\n---\n\n## zh-CN\n\n使用 `tipFormatter` 可以格式化 `Tooltip` 的内容，设置 `tipFormatter={null}`，则隐藏 `Tooltip`。\n\n## en-US\n\nUse `tipFormatter` to format content of `Toolip`. If `tipFormatter` is null, hide it.\n\n````jsx\nimport { Slider } from 'antd';\n\nfunction formatter(value) {\n  return `${value}%`;\n}\n\nReactDOM.render(\n  <div>\n    <Slider tipFormatter={formatter} />\n    <Slider tipFormatter={null} />\n  </div>,\n  mountNode\n);\n````\n","jsCodes":["import React from 'react';\nimport { Slider } from 'antd';\n\nfunction formatter(value) {\n  return `${value}%`;\n}\n\nexport default function DemoComponent_slider_tip_formatter() {\nreturn(\n  <div>\n    <Slider tipFormatter={formatter} />\n    <Slider tipFormatter={null} />\n  </div>);\n};\n\nexport const demo = <DemoComponent_slider_tip_formatter key=\"DemoComponent_slider_tip_formatter\" />;\n"],"cssCodes":[]},{"name":"vertical","content":"---\norder: 6\ntitle:\n  zh-CN: 垂直\n  en-US: Vertical\n---\n\n## zh-CN\n\n垂直方向的 Slider。\n\n## en-US\n\nThe vertical Slider.\n\n````jsx\nimport { Slider } from 'antd';\n\nconst style = {\n  float: 'left',\n  height: 300,\n  marginLeft: 70,\n};\n\nconst marks = {\n  0: '0°C',\n  26: '26°C',\n  37: '37°C',\n  100: {\n    style: {\n      color: '#f50',\n    },\n    label: <strong>100°C</strong>,\n  },\n};\n\nReactDOM.render(\n  <div style={{ height: 300 }}>\n    <div style={style}>\n      <Slider vertical defaultValue={30} />\n    </div>\n    <div style={style}>\n      <Slider vertical range step={10} defaultValue={[20, 50]} />\n    </div>\n    <div style={style}>\n      <Slider vertical range marks={marks} defaultValue={[26, 37]} />\n    </div>\n  </div>,\n  mountNode\n);\n````\n","jsCodes":["import React from 'react';\nimport { Slider } from 'antd';\n\nconst style = {\n  float: 'left',\n  height: 300,\n  marginLeft: 70,\n};\n\nconst marks = {\n  0: '0°C',\n  26: '26°C',\n  37: '37°C',\n  100: {\n    style: {\n      color: '#f50',\n    },\n    label: <strong>100°C</strong>,\n  },\n};\n\nexport default function DemoComponent_slider_vertical() {\nreturn(\n  <div style={{ height: 300 }}>\n    <div style={style}>\n      <Slider vertical defaultValue={30} />\n    </div>\n    <div style={style}>\n      <Slider vertical range step={10} defaultValue={[20, 50]} />\n    </div>\n    <div style={style}>\n      <Slider vertical range marks={marks} defaultValue={[26, 37]} />\n    </div>\n  </div>);\n};\n\nexport const demo = <DemoComponent_slider_vertical key=\"DemoComponent_slider_vertical\" />;\n"],"cssCodes":[]}]},{"name":"spin","demos":[{"name":"basic","content":"---\norder: 0\ntitle: \n  zh-CN: 基本用法\n  en-US: basic Usage\n---\n\n## zh-CN\n\n一个简单的 loading 状态。\n\n## en-US\n\nA simple loading status.\n\n````jsx\nimport { Spin } from 'antd';\n\nReactDOM.render(<Spin />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Spin } from 'antd';\n\nexport default function DemoComponent_spin_basic() {\nreturn(<Spin />);\n};\n\nexport const demo = <DemoComponent_spin_basic key=\"DemoComponent_spin_basic\" />;\n"],"cssCodes":[]},{"name":"delayAndDebounce","content":"---\norder: 5\ntitle:\n  zh-CN: 延迟\n  en-US: delay\n---\n\n## zh-CN\n\n延迟显示 loading 效果。当 spinning 状态在 `delay` 时间内结束，则不显示 loading 状态。\n\n## en-US\n\nSpecifies a delay for loading state. If `spinning` ends during delay, loading status won't appear.\n\n````jsx\nimport { Spin, Alert, Switch } from 'antd';\n\nclass Card extends React.Component {\n  state = { loading: false }\n  toggle = (value) => {\n    this.setState({ loading: value });\n  }\n  render() {\n    const container = (\n      <Alert\n        message=\"Alert message title\"\n        description=\"Further details about the context of this alert.\"\n        type=\"info\"\n      />\n    );\n    return (\n      <div>\n        <Spin spinning={this.state.loading} delay={500} >{container}</Spin>\n        Loading state：<Switch checked={this.state.loading} onChange={this.toggle} />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Card />, mountNode);\n````\n\n````css\n.example {\n  text-align: center;\n  background: rgba(0,0,0,0.05);\n  border-radius: 4px;\n  margin-bottom: 20px;\n  padding: 30px 50px;\n  margin: 20px 0;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Spin, Alert, Switch } from 'antd';\n\nclass Card extends React.Component {\n  state = { loading: false }\n  toggle = (value) => {\n    this.setState({ loading: value });\n  }\n  render() {\n    const container = (\n      <Alert\n        message=\"Alert message title\"\n        description=\"Further details about the context of this alert.\"\n        type=\"info\"\n      />\n    );\n    return (\n      <div>\n        <Spin spinning={this.state.loading} delay={500} >{container}</Spin>\n        Loading state：<Switch checked={this.state.loading} onChange={this.toggle} />\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_spin_delayAndDebounce() {\nreturn(<Card />);\n};\n\nexport const demo = <DemoComponent_spin_delayAndDebounce key=\"DemoComponent_spin_delayAndDebounce\" />;\n"],"cssCodes":[".example {\n  text-align: center;\n  background: rgba(0,0,0,0.05);\n  border-radius: 4px;\n  margin-bottom: 20px;\n  padding: 30px 50px;\n  margin: 20px 0;\n}\n"]},{"name":"inside","content":"---\norder: 2\ntitle: \n  zh-CN: 容器\n  en-US: Inside a container\n---\n\n## zh-CN\n\n放入一个容器中。\n\n## en-US\n\nSpin in a container.\n\n````jsx\nimport { Spin } from 'antd';\n\nReactDOM.render(\n  <div className=\"example\">\n    <Spin />\n  </div>\n, mountNode);\n````\n\n````css\n.example {\n  text-align: center;\n  background: rgba(0,0,0,0.05);\n  border-radius: 4px;\n  margin-bottom: 20px;\n  padding: 30px 50px;\n  margin: 20px 0;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Spin } from 'antd';\n\nexport default function DemoComponent_spin_inside() {\nreturn(\n  <div className=\"example\">\n    <Spin />\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_spin_inside key=\"DemoComponent_spin_inside\" />;\n"],"cssCodes":[".example {\n  text-align: center;\n  background: rgba(0,0,0,0.05);\n  border-radius: 4px;\n  margin-bottom: 20px;\n  padding: 30px 50px;\n  margin: 20px 0;\n}\n"]},{"name":"nested","content":"---\norder: 3\ntitle:\n  zh-CN: 卡片加载中\n  en-US: Embedded mode\n---\n\n## zh-CN\n\n可以直接把内容内嵌到 `Spin` 中，将现有容器变为加载状态。\n\n## en-US\n\nEmbedding content into `Spin` will alter it into loading state.\n\n````jsx\nimport { Spin, Switch, Alert } from 'antd';\n\nclass Card extends React.Component {\n  state = { loading: false }\n  toggle = (value) => {\n    this.setState({ loading: value });\n  }\n  render() {\n    return (\n      <div>\n        <Spin spinning={this.state.loading}>\n          <Alert\n            message=\"Alert message title\"\n            description=\"Further details about the context of this alert.\"\n            type=\"info\"\n          />\n        </Spin>\n        <div style={{ marginTop: 16 }}>\n          Loading state：<Switch checked={this.state.loading} onChange={this.toggle} />\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Card />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Spin, Switch, Alert } from 'antd';\n\nclass Card extends React.Component {\n  state = { loading: false }\n  toggle = (value) => {\n    this.setState({ loading: value });\n  }\n  render() {\n    return (\n      <div>\n        <Spin spinning={this.state.loading}>\n          <Alert\n            message=\"Alert message title\"\n            description=\"Further details about the context of this alert.\"\n            type=\"info\"\n          />\n        </Spin>\n        <div style={{ marginTop: 16 }}>\n          Loading state：<Switch checked={this.state.loading} onChange={this.toggle} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_spin_nested() {\nreturn(<Card />);\n};\n\nexport const demo = <DemoComponent_spin_nested key=\"DemoComponent_spin_nested\" />;\n"],"cssCodes":[]},{"name":"size","content":"---\norder: 1\ntitle: \n  zh-CN: 各种大小\n  en-US: Size\n---\n\n## zh-CN\n\n小的用于文本加载，默认用于卡片容器级加载，大的用于**页面级**加载。\n\n## en-US\n\nA small `Spin` use in loading text, default `Spin` use in loading card-level block, and large `Spin` use in loading **page**.\n\n````jsx\nimport { Spin } from 'antd';\n\nReactDOM.render(\n  <div>\n    <Spin size=\"small\" />\n    <Spin />\n    <Spin size=\"large\" />\n  </div>\n, mountNode);\n````\n\n<style>\n.ant-spin {\n  margin-right: 16px;\n}\n</style>\n","jsCodes":["import React from 'react';\nimport { Spin } from 'antd';\n\nexport default function DemoComponent_spin_size() {\nreturn(\n  <div>\n    <Spin size=\"small\" />\n    <Spin />\n    <Spin size=\"large\" />\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_spin_size key=\"DemoComponent_spin_size\" />;\n"],"cssCodes":[]},{"name":"tip","content":"---\norder: 4\ntitle:\n  zh-CN: 自定义描述文案\n  en-US: Customized description\n---\n\n## zh-CN\n\n自定义描述文案。\n\n## en-US\n\nCustomized description content.\n\n````jsx\nimport { Spin, Alert } from 'antd';\n\nReactDOM.render(\n  <Spin tip=\"Loading...\">\n    <Alert\n      message=\"Alert message title\"\n      description=\"Further details about the context of this alert.\"\n      type=\"info\"\n    />\n  </Spin>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Spin, Alert } from 'antd';\n\nexport default function DemoComponent_spin_tip() {\nreturn(\n  <Spin tip=\"Loading...\">\n    <Alert\n      message=\"Alert message title\"\n      description=\"Further details about the context of this alert.\"\n      type=\"info\"\n    />\n  </Spin>\n);\n};\n\nexport const demo = <DemoComponent_spin_tip key=\"DemoComponent_spin_tip\" />;\n"],"cssCodes":[]}]},{"name":"steps","demos":[{"name":"customized_progress_dot","content":"---\norder: 9\ntitle:\n  zh-CN: 自定义点状步骤条\n  en-US: Customized Dot Style\n---\n\n## zh-CN\n\n为点状步骤条增加自定义展示。\n\n## en-US\n\nYou can customize the display for Steps with progress dot style.\n\n````jsx\nimport { Steps, Popover } from 'antd';\nconst Step = Steps.Step;\n\nconst customDot = (dot, { status, index }) => (\n  <Popover content={<span>step {index} status: {status}</span>}>\n    {dot}\n  </Popover>\n);\n\nReactDOM.render(\n  <Steps current={1} progressDot={customDot}>\n    <Step title=\"Finished\" description=\"You can hover on the dot.\" />\n    <Step title=\"In Progress\" description=\"You can hover on the dot.\" />\n    <Step title=\"Waiting\" description=\"You can hover on the dot.\" />\n    <Step title=\"Waiting\" description=\"You can hover on the dot.\" />\n  </Steps>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Steps, Popover } from 'antd';\nconst Step = Steps.Step;\n\nconst customDot = (dot, { status, index }) => (\n  <Popover content={<span>step {index} status: {status}</span>}>\n    {dot}\n  </Popover>\n);\n\nexport default function DemoComponent_steps_customized_progress_dot() {\nreturn(\n  <Steps current={1} progressDot={customDot}>\n    <Step title=\"Finished\" description=\"You can hover on the dot.\" />\n    <Step title=\"In Progress\" description=\"You can hover on the dot.\" />\n    <Step title=\"Waiting\" description=\"You can hover on the dot.\" />\n    <Step title=\"Waiting\" description=\"You can hover on the dot.\" />\n  </Steps>\n);\n};\n\nexport const demo = <DemoComponent_steps_customized_progress_dot key=\"DemoComponent_steps_customized_progress_dot\" />;\n"],"cssCodes":[]},{"name":"error","content":"---\norder: 6\ntitle:\n  zh-CN: 步骤运行错误\n  en-US: Error status\n---\n\n## zh-CN\n\n使用 Steps 的 `status` 属性来指定当前步骤的状态。\n\n## en-US\n\nBy using `status` of `Steps`, you can specify the state for current step.\n\n````jsx\nimport { Steps } from 'antd';\nconst Step = Steps.Step;\n\nReactDOM.render(\n  <Steps current={1} status=\"error\">\n    <Step title=\"Finished\" description=\"This is a description\" />\n    <Step title=\"In Process\" description=\"This is a description\" />\n    <Step title=\"Waiting\" description=\"This is a description\" />\n  </Steps>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Steps } from 'antd';\nconst Step = Steps.Step;\n\nexport default function DemoComponent_steps_error() {\nreturn(\n  <Steps current={1} status=\"error\">\n    <Step title=\"Finished\" description=\"This is a description\" />\n    <Step title=\"In Process\" description=\"This is a description\" />\n    <Step title=\"Waiting\" description=\"This is a description\" />\n  </Steps>\n);\n};\n\nexport const demo = <DemoComponent_steps_error key=\"DemoComponent_steps_error\" />;\n"],"cssCodes":[]},{"name":"icon","content":"---\norder: 2\ntitle:\n  zh-CN: 带图标的步骤条\n  en-US: With icon\n---\n\n## zh-CN\n\n通过设置 `Steps.Step` 的 `icon` 属性，可以启用自定义图标。\n\n## en-US\n\nYou can use your own custom icons by setting the property `icon` for `Steps.Step`.\n\n````jsx\nimport { Steps, Icon } from 'antd';\nconst Step = Steps.Step;\n\nReactDOM.render(\n  <Steps>\n    <Step status=\"finish\" title=\"Login\" icon={<Icon type=\"user\" />} />\n    <Step status=\"finish\" title=\"Verification\" icon={<Icon type=\"solution\" />} />\n    <Step status=\"process\" title=\"Pay\" icon={<Icon type=\"credit-card\" />} />\n    <Step status=\"wait\" title=\"Done\" icon={<Icon type=\"smile-o\" />} />\n  </Steps>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Steps, Icon } from 'antd';\nconst Step = Steps.Step;\n\nexport default function DemoComponent_steps_icon() {\nreturn(\n  <Steps>\n    <Step status=\"finish\" title=\"Login\" icon={<Icon type=\"user\" />} />\n    <Step status=\"finish\" title=\"Verification\" icon={<Icon type=\"solution\" />} />\n    <Step status=\"process\" title=\"Pay\" icon={<Icon type=\"credit-card\" />} />\n    <Step status=\"wait\" title=\"Done\" icon={<Icon type=\"smile-o\" />} />\n  </Steps>\n);\n};\n\nexport const demo = <DemoComponent_steps_icon key=\"DemoComponent_steps_icon\" />;\n"],"cssCodes":[]},{"name":"progress_dot","content":"---\norder: 8\ntitle:\n  zh-CN: 点状步骤条\n  en-US: Dot Style\n---\n\n## zh-CN\n\n包含步骤点的进度条。\n\n## en-US\n\nSteps with progress dot style.\n\n````jsx\nimport { Steps } from 'antd';\nconst Step = Steps.Step;\n\nReactDOM.render(\n  <Steps progressDot current={1}>\n    <Step title=\"Finished\" description=\"This is a description.\" />\n    <Step title=\"In Progress\" description=\"This is a description.\" />\n    <Step title=\"Waiting\" description=\"This is a description.\" />\n  </Steps>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Steps } from 'antd';\nconst Step = Steps.Step;\n\nexport default function DemoComponent_steps_progress_dot() {\nreturn(\n  <Steps progressDot current={1}>\n    <Step title=\"Finished\" description=\"This is a description.\" />\n    <Step title=\"In Progress\" description=\"This is a description.\" />\n    <Step title=\"Waiting\" description=\"This is a description.\" />\n  </Steps>\n);\n};\n\nexport const demo = <DemoComponent_steps_progress_dot key=\"DemoComponent_steps_progress_dot\" />;\n"],"cssCodes":[]},{"name":"simple","content":"---\norder: 0\ntitle:\n  zh-CN: 基本用法\n  en-US: Basic\n---\n\n## zh-CN\n\n简单的步骤条。\n\n## en-US\n\nThe most basic step bar.\n\n````jsx\nimport { Steps } from 'antd';\nconst Step = Steps.Step;\n\nReactDOM.render(\n  <Steps current={1}>\n    <Step title=\"Finished\" description=\"This is a description.\" />\n    <Step title=\"In Progress\" description=\"This is a description.\" />\n    <Step title=\"Waiting\" description=\"This is a description.\" />\n  </Steps>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Steps } from 'antd';\nconst Step = Steps.Step;\n\nexport default function DemoComponent_steps_simple() {\nreturn(\n  <Steps current={1}>\n    <Step title=\"Finished\" description=\"This is a description.\" />\n    <Step title=\"In Progress\" description=\"This is a description.\" />\n    <Step title=\"Waiting\" description=\"This is a description.\" />\n  </Steps>\n);\n};\n\nexport const demo = <DemoComponent_steps_simple key=\"DemoComponent_steps_simple\" />;\n"],"cssCodes":[]},{"name":"small_size","content":"---\norder: 1\ntitle:\n  zh-CN: 迷你版\n  en-US: Mini version\n---\n\n## zh-CN\n\n迷你版的步骤条，通过设置 `<Steps size=\"small\">` 启用.\n\n## en-US\n\nBy setting like this: `<Steps size=\"small\">`, you can get a mini version.\n\n````jsx\nimport { Steps } from 'antd';\nconst Step = Steps.Step;\n\nReactDOM.render(\n  <Steps size=\"small\" current={1}>\n    <Step title=\"Finished\" />\n    <Step title=\"In Progress\" />\n    <Step title=\"Waiting\" />\n  </Steps>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Steps } from 'antd';\nconst Step = Steps.Step;\n\nexport default function DemoComponent_steps_small_size() {\nreturn(\n  <Steps size=\"small\" current={1}>\n    <Step title=\"Finished\" />\n    <Step title=\"In Progress\" />\n    <Step title=\"Waiting\" />\n  </Steps>\n);\n};\n\nexport const demo = <DemoComponent_steps_small_size key=\"DemoComponent_steps_small_size\" />;\n"],"cssCodes":[]},{"name":"step_next","content":"---\norder: 3\ntitle:\n  zh-CN: 步骤切换\n  en-US: Switch Step\n---\n\n## zh-CN\n\n通常配合内容及按钮使用，表示一个流程的处理进度。\n\n## en-US\n\nCooperate with the content and buttons, to represent the progress of a process.\n\n````jsx\nimport { Steps, Button, message } from 'antd';\nconst Step = Steps.Step;\n\nconst steps = [{\n  title: 'First',\n  content: 'First-content',\n}, {\n  title: 'Second',\n  content: 'Second-content',\n}, {\n  title: 'Last',\n  content: 'Last-content',\n}];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      current: 0,\n    };\n  }\n  next() {\n    const current = this.state.current + 1;\n    this.setState({ current });\n  }\n  prev() {\n    const current = this.state.current - 1;\n    this.setState({ current });\n  }\n  render() {\n    const { current } = this.state;\n    return (\n      <div>\n        <Steps current={current}>\n          {steps.map(item => <Step key={item.title} title={item.title} />)}\n        </Steps>\n        <div className=\"steps-content\">{steps[this.state.current].content}</div>\n        <div className=\"steps-action\">\n          {\n            this.state.current < steps.length - 1\n            &&\n            <Button type=\"primary\" onClick={() => this.next()}>Next</Button>\n          }\n          {\n            this.state.current === steps.length - 1\n            &&\n            <Button type=\"primary\" onClick={() => message.success('Processing complete!')}>Done</Button>\n          }\n          {\n            this.state.current > 0\n            &&\n            <Button style={{ marginLeft: 8 }} onClick={() => this.prev()}>\n              Previous\n            </Button>\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n````\n\n````css\n.steps-content {\n  margin-top: 16px;\n  border: 1px dashed #e9e9e9;\n  border-radius: 6px;\n  background-color: #fafafa;\n  min-height: 200px;\n  text-align: center;\n  padding-top: 80px;\n}\n\n.steps-action {\n  margin-top: 24px;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Steps, Button, message } from 'antd';\nconst Step = Steps.Step;\n\nconst steps = [{\n  title: 'First',\n  content: 'First-content',\n}, {\n  title: 'Second',\n  content: 'Second-content',\n}, {\n  title: 'Last',\n  content: 'Last-content',\n}];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      current: 0,\n    };\n  }\n  next() {\n    const current = this.state.current + 1;\n    this.setState({ current });\n  }\n  prev() {\n    const current = this.state.current - 1;\n    this.setState({ current });\n  }\n  render() {\n    const { current } = this.state;\n    return (\n      <div>\n        <Steps current={current}>\n          {steps.map(item => <Step key={item.title} title={item.title} />)}\n        </Steps>\n        <div className=\"steps-content\">{steps[this.state.current].content}</div>\n        <div className=\"steps-action\">\n          {\n            this.state.current < steps.length - 1\n            &&\n            <Button type=\"primary\" onClick={() => this.next()}>Next</Button>\n          }\n          {\n            this.state.current === steps.length - 1\n            &&\n            <Button type=\"primary\" onClick={() => message.success('Processing complete!')}>Done</Button>\n          }\n          {\n            this.state.current > 0\n            &&\n            <Button style={{ marginLeft: 8 }} onClick={() => this.prev()}>\n              Previous\n            </Button>\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_steps_step_next() {\nreturn(<App />);\n};\n\nexport const demo = <DemoComponent_steps_step_next key=\"DemoComponent_steps_step_next\" />;\n"],"cssCodes":[".steps-content {\n  margin-top: 16px;\n  border: 1px dashed #e9e9e9;\n  border-radius: 6px;\n  background-color: #fafafa;\n  min-height: 200px;\n  text-align: center;\n  padding-top: 80px;\n}\n\n.steps-action {\n  margin-top: 24px;\n}\n"]},{"name":"vertical_small","content":"---\norder: 5\ntitle:\n  zh-CN: 竖直方向的小型步骤条\n  en-US: Vertical mini version\n---\n\n## zh-CN\n\n简单的竖直方向的小型步骤条。\n\n## en-US\n\nA simple mini version step bar in the vertical direction.\n\n````jsx\nimport { Steps } from 'antd';\nconst Step = Steps.Step;\n\nReactDOM.render(\n  <Steps direction=\"vertical\" size=\"small\" current={1}>\n    <Step title=\"Finished\" description=\"This is a description.\" />\n    <Step title=\"In Progress\" description=\"This is a description.\" />\n    <Step title=\"Waiting\" description=\"This is a description.\" />\n  </Steps>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Steps } from 'antd';\nconst Step = Steps.Step;\n\nexport default function DemoComponent_steps_vertical_small() {\nreturn(\n  <Steps direction=\"vertical\" size=\"small\" current={1}>\n    <Step title=\"Finished\" description=\"This is a description.\" />\n    <Step title=\"In Progress\" description=\"This is a description.\" />\n    <Step title=\"Waiting\" description=\"This is a description.\" />\n  </Steps>\n);\n};\n\nexport const demo = <DemoComponent_steps_vertical_small key=\"DemoComponent_steps_vertical_small\" />;\n"],"cssCodes":[]},{"name":"vertical","content":"---\norder: 4\ntitle:\n  zh-CN: 竖直方向的步骤条\n  en-US: Vertical\n---\n\n## zh-CN\n\n简单的竖直方向的步骤条。\n\n## en-US\n\nA simple step bar in the vertical direction.\n\n````jsx\nimport { Steps } from 'antd';\nconst Step = Steps.Step;\n\nReactDOM.render(\n  <Steps direction=\"vertical\" current={1}>\n    <Step title=\"Finished\" description=\"This is a description.\" />\n    <Step title=\"In Progress\" description=\"This is a description.\" />\n    <Step title=\"Waiting\" description=\"This is a description.\" />\n  </Steps>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Steps } from 'antd';\nconst Step = Steps.Step;\n\nexport default function DemoComponent_steps_vertical() {\nreturn(\n  <Steps direction=\"vertical\" current={1}>\n    <Step title=\"Finished\" description=\"This is a description.\" />\n    <Step title=\"In Progress\" description=\"This is a description.\" />\n    <Step title=\"Waiting\" description=\"This is a description.\" />\n  </Steps>\n);\n};\n\nexport const demo = <DemoComponent_steps_vertical key=\"DemoComponent_steps_vertical\" />;\n"],"cssCodes":[]}]},{"name":"switch","demos":[{"name":"basic","content":"---\norder: 0\ntitle:\n  zh-CN: 基本\n  en-US: Basic\n---\n\n## zh-CN\n\n最简单的用法。\n\n## en-US\n\nThe most basic usage.\n\n````jsx\nimport { Switch } from 'antd';\n\nfunction onChange(checked) {\n  console.log(`switch to ${checked}`);\n}\n\nReactDOM.render(\n  <Switch defaultChecked={false} onChange={onChange} />,\n  mountNode\n);\n````\n\n<style>\n.ant-switch {\n  margin-bottom: 8px;\n}\n<style>\n","jsCodes":["import React from 'react';\nimport { Switch } from 'antd';\n\nfunction onChange(checked) {\n  console.log(`switch to ${checked}`);\n}\n\nexport default function DemoComponent_switch_basic() {\nreturn(\n  <Switch defaultChecked={false} onChange={onChange} />);\n};\n\nexport const demo = <DemoComponent_switch_basic key=\"DemoComponent_switch_basic\" />;\n"],"cssCodes":[]},{"name":"disabled","content":"---\norder: 1\ntitle:\n  zh-CN: 不可用\n  en-US: Disabled\n---\n\n## zh-CN\n\nSwitch 失效状态。\n\n## en-US\n\nDisabled state of `Switch`.\n\n````jsx\nimport { Switch, Button } from 'antd';\n\nclass App extends React.Component {\n  state = {\n    disabled: true,\n  }\n  toggle = () => {\n    this.setState({\n      disabled: !this.state.disabled,\n    });\n  }\n  render() {\n    return (\n      <div>\n        <Switch disabled={this.state.disabled} />\n        <br />\n        <Button type=\"primary\" onClick={this.toggle}>Toggle disabled</Button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Switch, Button } from 'antd';\n\nclass App extends React.Component {\n  state = {\n    disabled: true,\n  }\n  toggle = () => {\n    this.setState({\n      disabled: !this.state.disabled,\n    });\n  }\n  render() {\n    return (\n      <div>\n        <Switch disabled={this.state.disabled} />\n        <br />\n        <Button type=\"primary\" onClick={this.toggle}>Toggle disabled</Button>\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_switch_disabled() {\nreturn(<App />);\n};\n\nexport const demo = <DemoComponent_switch_disabled key=\"DemoComponent_switch_disabled\" />;\n"],"cssCodes":[]},{"name":"size","content":"---\norder: 3\ntitle:\n  zh-CN: 两种大小\n  en-US: Two sizes\n---\n\n## zh-CN\n\n`size=\"small\"` 表示小号开关。\n\n## en-US\n\n`size=\"small\"` represents a small sized switch.\n\n````jsx\nimport { Switch } from 'antd';\n\nReactDOM.render(\n  <div>\n    <Switch />\n    <br />\n    <Switch size=\"small\" />\n  </div>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Switch } from 'antd';\n\nexport default function DemoComponent_switch_size() {\nreturn(\n  <div>\n    <Switch />\n    <br />\n    <Switch size=\"small\" />\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_switch_size key=\"DemoComponent_switch_size\" />;\n"],"cssCodes":[]},{"name":"text","content":"---\norder: 2\ntitle:\n  zh-CN: 文字和图标\n  en-US: Text & icon\n---\n\n## zh-CN\n\n带有文字和图标。\n\n## en-US\n\nWith text and icon.\n\n````jsx\nimport { Switch, Icon } from 'antd';\n\nReactDOM.render(<div>\n  <Switch checkedChildren=\"开\" unCheckedChildren=\"关\" />\n  <br />\n  <Switch checkedChildren=\"1\" unCheckedChildren=\"0\" />\n  <br />\n  <Switch checkedChildren={<Icon type=\"check\" />} unCheckedChildren={<Icon type=\"cross\" />} />\n</div>, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Switch, Icon } from 'antd';\n\nexport default function DemoComponent_switch_text() {\nreturn(<div>\n  <Switch checkedChildren=\"开\" unCheckedChildren=\"关\" />\n  <br />\n  <Switch checkedChildren=\"1\" unCheckedChildren=\"0\" />\n  <br />\n  <Switch checkedChildren={<Icon type=\"check\" />} unCheckedChildren={<Icon type=\"cross\" />} />\n</div>);\n};\n\nexport const demo = <DemoComponent_switch_text key=\"DemoComponent_switch_text\" />;\n"],"cssCodes":[]}]},{"name":"table","demos":[{"name":"ajax","content":"---\norder: 9\ntitle:\n  en-US: Ajax\n  zh-CN: 远程加载数据\n---\n\n## zh-CN\n\n这个例子通过简单的 ajax 读取方式，演示了如何从服务端读取并展现数据，具有筛选、排序等功能以及页面 loading 效果。开发者可以自行接入其他数据处理方式。\n\n另外，本例也展示了筛选排序功能如何交给服务端实现，列不需要指定具体的 `onFilter` 和 `sorter` 函数，而是在把筛选和排序的参数发到服务端来处理。\n\n**注意，此示例使用 [模拟接口](https://randomuser.me)，展示数据可能不准确，请打开网络面板查看请求。**\n\n## en-US\n\nThis example shows how to fetch and present data from remote server, and how to implement filtering and sorting in server side by sending related parameters to server.\n\n**Note, this example use [Mock API](https://randomuser.me) that you can look up in Network Console.**\n\n````jsx\nimport { Table } from 'antd';\nimport reqwest from 'reqwest';\n\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n  sorter: true,\n  render: name => `${name.first} ${name.last}`,\n  width: '20%',\n}, {\n  title: 'Gender',\n  dataIndex: 'gender',\n  filters: [\n    { text: 'Male', value: 'male' },\n    { text: 'Female', value: 'female' },\n  ],\n  width: '20%',\n}, {\n  title: 'Email',\n  dataIndex: 'email',\n}];\n\nclass App extends React.Component {\n  state = {\n    data: [],\n    pagination: {},\n    loading: false,\n  };\n  handleTableChange = (pagination, filters, sorter) => {\n    const pager = { ...this.state.pagination };\n    pager.current = pagination.current;\n    this.setState({\n      pagination: pager,\n    });\n    this.fetch({\n      results: pagination.pageSize,\n      page: pagination.current,\n      sortField: sorter.field,\n      sortOrder: sorter.order,\n      ...filters,\n    });\n  }\n  fetch = (params = {}) => {\n    console.log('params:', params);\n    this.setState({ loading: true });\n    reqwest({\n      url: 'https://randomuser.me/api',\n      method: 'get',\n      data: {\n        results: 10,\n        ...params,\n      },\n      type: 'json',\n    }).then((data) => {\n      const pagination = { ...this.state.pagination };\n      // Read total count from server\n      // pagination.total = data.totalCount;\n      pagination.total = 200;\n      this.setState({\n        loading: false,\n        data: data.results,\n        pagination,\n      });\n    });\n  }\n  componentDidMount() {\n    this.fetch();\n  }\n  render() {\n    return (\n      <Table columns={columns}\n        rowKey={record => record.registered}\n        dataSource={this.state.data}\n        pagination={this.state.pagination}\n        loading={this.state.loading}\n        onChange={this.handleTableChange}\n      />\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Table } from 'antd';\nimport reqwest from 'reqwest';\n\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n  sorter: true,\n  render: name => `${name.first} ${name.last}`,\n  width: '20%',\n}, {\n  title: 'Gender',\n  dataIndex: 'gender',\n  filters: [\n    { text: 'Male', value: 'male' },\n    { text: 'Female', value: 'female' },\n  ],\n  width: '20%',\n}, {\n  title: 'Email',\n  dataIndex: 'email',\n}];\n\nclass App extends React.Component {\n  state = {\n    data: [],\n    pagination: {},\n    loading: false,\n  };\n  handleTableChange = (pagination, filters, sorter) => {\n    const pager = { ...this.state.pagination };\n    pager.current = pagination.current;\n    this.setState({\n      pagination: pager,\n    });\n    this.fetch({\n      results: pagination.pageSize,\n      page: pagination.current,\n      sortField: sorter.field,\n      sortOrder: sorter.order,\n      ...filters,\n    });\n  }\n  fetch = (params = {}) => {\n    console.log('params:', params);\n    this.setState({ loading: true });\n    reqwest({\n      url: 'https://randomuser.me/api',\n      method: 'get',\n      data: {\n        results: 10,\n        ...params,\n      },\n      type: 'json',\n    }).then((data) => {\n      const pagination = { ...this.state.pagination };\n      // Read total count from server\n      // pagination.total = data.totalCount;\n      pagination.total = 200;\n      this.setState({\n        loading: false,\n        data: data.results,\n        pagination,\n      });\n    });\n  }\n  componentDidMount() {\n    this.fetch();\n  }\n  render() {\n    return (\n      <Table columns={columns}\n        rowKey={record => record.registered}\n        dataSource={this.state.data}\n        pagination={this.state.pagination}\n        loading={this.state.loading}\n        onChange={this.handleTableChange}\n      />\n    );\n  }\n}\n\nexport default function DemoComponent_table_ajax() {\nreturn(<App />);\n};\n\nexport const demo = <DemoComponent_table_ajax key=\"DemoComponent_table_ajax\" />;\n"],"cssCodes":[]},{"name":"basic","content":"---\norder: 0\ntitle:\n  en-US: Basic Usage\n  zh-CN: 基本用法\n---\n\n## zh-CN\n\n简单的表格，最后一列是各种操作。\n\n## en-US\n\nSimple table with actions.\n\n````jsx\nimport { Table, Icon } from 'antd';\n\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n  key: 'name',\n  render: text => <a href=\"#\">{text}</a>,\n}, {\n  title: 'Age',\n  dataIndex: 'age',\n  key: 'age',\n}, {\n  title: 'Address',\n  dataIndex: 'address',\n  key: 'address',\n}, {\n  title: 'Action',\n  key: 'action',\n  render: (text, record) => (\n    <span>\n      <a href=\"#\">Action 一 {record.name}</a>\n      <span className=\"ant-divider\" />\n      <a href=\"#\">Delete</a>\n      <span className=\"ant-divider\" />\n      <a href=\"#\" className=\"ant-dropdown-link\">\n        More actions <Icon type=\"down\" />\n      </a>\n    </span>\n  ),\n}];\n\nconst data = [{\n  key: '1',\n  name: 'John Brown',\n  age: 32,\n  address: 'New York No. 1 Lake Park',\n}, {\n  key: '2',\n  name: 'Jim Green',\n  age: 42,\n  address: 'London No. 1 Lake Park',\n}, {\n  key: '3',\n  name: 'Joe Black',\n  age: 32,\n  address: 'Sidney No. 1 Lake Park',\n}];\n\nReactDOM.render(<Table columns={columns} dataSource={data} />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Table, Icon } from 'antd';\n\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n  key: 'name',\n  render: text => <a href=\"#\">{text}</a>,\n}, {\n  title: 'Age',\n  dataIndex: 'age',\n  key: 'age',\n}, {\n  title: 'Address',\n  dataIndex: 'address',\n  key: 'address',\n}, {\n  title: 'Action',\n  key: 'action',\n  render: (text, record) => (\n    <span>\n      <a href=\"#\">Action 一 {record.name}</a>\n      <span className=\"ant-divider\" />\n      <a href=\"#\">Delete</a>\n      <span className=\"ant-divider\" />\n      <a href=\"#\" className=\"ant-dropdown-link\">\n        More actions <Icon type=\"down\" />\n      </a>\n    </span>\n  ),\n}];\n\nconst data = [{\n  key: '1',\n  name: 'John Brown',\n  age: 32,\n  address: 'New York No. 1 Lake Park',\n}, {\n  key: '2',\n  name: 'Jim Green',\n  age: 42,\n  address: 'London No. 1 Lake Park',\n}, {\n  key: '3',\n  name: 'Joe Black',\n  age: 32,\n  address: 'Sidney No. 1 Lake Park',\n}];\n\nexport default function DemoComponent_table_basic() {\nreturn(<Table columns={columns} dataSource={data} />);\n};\n\nexport const demo = <DemoComponent_table_basic key=\"DemoComponent_table_basic\" />;\n"],"cssCodes":[]},{"name":"bordered","content":"---\norder: 11\ntitle:\n  en-US: border, title and footer\n  zh-CN: 带边框\n---\n\n## zh-CN\n\n添加表格边框线，页头和页脚。\n\n## en-US\n\nAdd border, title and footer for table.\n\n````jsx\nimport { Table } from 'antd';\n\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n  render: text => <a href=\"#\">{text}</a>,\n}, {\n  title: 'Cash Assets',\n  className: 'column-money',\n  dataIndex: 'money',\n}, {\n  title: 'Address',\n  dataIndex: 'address',\n}];\n\nconst data = [{\n  key: '1',\n  name: 'John Brown',\n  money: '￥300,000.00',\n  address: 'New York No. 1 Lake Park',\n}, {\n  key: '2',\n  name: 'Jim Green',\n  money: '￥1,256,000.00',\n  address: 'London No. 1 Lake Park',\n}, {\n  key: '3',\n  name: 'Joe Black',\n  money: '￥120,000.00',\n  address: 'Sidney No. 1 Lake Park',\n}];\n\nReactDOM.render(\n  <Table\n    columns={columns}\n    dataSource={data}\n    bordered\n    title={() => 'Header'}\n    footer={() => 'Footer'}\n  />\n, mountNode);\n````\n\n````css\nth.column-money,\ntd.column-money {\n  text-align: right!important;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Table } from 'antd';\n\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n  render: text => <a href=\"#\">{text}</a>,\n}, {\n  title: 'Cash Assets',\n  className: 'column-money',\n  dataIndex: 'money',\n}, {\n  title: 'Address',\n  dataIndex: 'address',\n}];\n\nconst data = [{\n  key: '1',\n  name: 'John Brown',\n  money: '￥300,000.00',\n  address: 'New York No. 1 Lake Park',\n}, {\n  key: '2',\n  name: 'Jim Green',\n  money: '￥1,256,000.00',\n  address: 'London No. 1 Lake Park',\n}, {\n  key: '3',\n  name: 'Joe Black',\n  money: '￥120,000.00',\n  address: 'Sidney No. 1 Lake Park',\n}];\n\nexport default function DemoComponent_table_bordered() {\nreturn(\n  <Table\n    columns={columns}\n    dataSource={data}\n    bordered\n    title={() => 'Header'}\n    footer={() => 'Footer'}\n  />\n);\n};\n\nexport const demo = <DemoComponent_table_bordered key=\"DemoComponent_table_bordered\" />;\n"],"cssCodes":["th.column-money,\ntd.column-money {\n  text-align: right!important;\n}\n"]},{"name":"colspan_rowspan","content":"---\norder: 14\ntitle:\n  en-US: colSpan and rowSpan\n  zh-CN: 表格行/列合并\n---\n\n## zh-CN\n\n表头只支持列合并，使用 column 里的 colSpan 进行设置。\n\n表格支持行/列合并，使用 render 里的单元格属性 colSpan 或者 rowSpan 设值为 0 时，设置的表格不会渲染。\n\n## en-US\n\nTable column title supports `colSpan` that set in `column`.\n\nTable cell supports `colSpan` and `rowSpan` that set in render return object. When each of them is set to `0`, the cell will not be rendered.\n\n````jsx\nimport { Table } from 'antd';\n\n// In the fifth row, other columns are merged into first column\n// by setting it's colSpan to be 0\nconst renderContent = (value, row, index) => {\n  const obj = {\n    children: value,\n    props: {},\n  };\n  if (index === 4) {\n    obj.props.colSpan = 0;\n  }\n  return obj;\n};\n\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n  render: (text, row, index) => {\n    if (index < 4) {\n      return <a href=\"#\">{text}</a>;\n    }\n    return {\n      children: <a href=\"#\">{text}</a>,\n      props: {\n        colSpan: 5,\n      },\n    };\n  },\n}, {\n  title: 'Age',\n  dataIndex: 'age',\n  render: renderContent,\n}, {\n  title: 'Home phone',\n  colSpan: 2,\n  dataIndex: 'tel',\n  render: (value, row, index) => {\n    const obj = {\n      children: value,\n      props: {},\n    };\n    if (index === 2) {\n      obj.props.rowSpan = 2;\n    }\n    // These two are merged into above cell\n    if (index === 3) {\n      obj.props.rowSpan = 0;\n    }\n    if (index === 4) {\n      obj.props.colSpan = 0;\n    }\n    return obj;\n  },\n}, {\n  title: 'Phone',\n  colSpan: 0,\n  dataIndex: 'phone',\n  render: renderContent,\n}, {\n  title: 'Address',\n  dataIndex: 'address',\n  render: renderContent,\n}];\n\nconst data = [{\n  key: '1',\n  name: 'John Brown',\n  age: 32,\n  tel: '0571-22098909',\n  phone: 18889898989,\n  address: 'New York No. 1 Lake Park',\n}, {\n  key: '2',\n  name: 'Jim Green',\n  tel: '0571-22098333',\n  phone: 18889898888,\n  age: 42,\n  address: 'London No. 1 Lake Park',\n}, {\n  key: '3',\n  name: 'Joe Black',\n  age: 32,\n  tel: '0575-22098909',\n  phone: 18900010002,\n  address: 'Sidney No. 1 Lake Park',\n}, {\n  key: '4',\n  name: 'Jim Red',\n  age: 18,\n  tel: '0575-22098909',\n  phone: 18900010002,\n  address: 'London No. 2 Lake Park',\n}, {\n  key: '5',\n  name: 'Jake White',\n  age: 18,\n  tel: '0575-22098909',\n  phone: 18900010002,\n  address: 'Dublin No. 2 Lake Park',\n}];\n\nReactDOM.render(<Table columns={columns} dataSource={data} bordered />\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Table } from 'antd';\n\n// In the fifth row, other columns are merged into first column\n// by setting it's colSpan to be 0\nconst renderContent = (value, row, index) => {\n  const obj = {\n    children: value,\n    props: {},\n  };\n  if (index === 4) {\n    obj.props.colSpan = 0;\n  }\n  return obj;\n};\n\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n  render: (text, row, index) => {\n    if (index < 4) {\n      return <a href=\"#\">{text}</a>;\n    }\n    return {\n      children: <a href=\"#\">{text}</a>,\n      props: {\n        colSpan: 5,\n      },\n    };\n  },\n}, {\n  title: 'Age',\n  dataIndex: 'age',\n  render: renderContent,\n}, {\n  title: 'Home phone',\n  colSpan: 2,\n  dataIndex: 'tel',\n  render: (value, row, index) => {\n    const obj = {\n      children: value,\n      props: {},\n    };\n    if (index === 2) {\n      obj.props.rowSpan = 2;\n    }\n    // These two are merged into above cell\n    if (index === 3) {\n      obj.props.rowSpan = 0;\n    }\n    if (index === 4) {\n      obj.props.colSpan = 0;\n    }\n    return obj;\n  },\n}, {\n  title: 'Phone',\n  colSpan: 0,\n  dataIndex: 'phone',\n  render: renderContent,\n}, {\n  title: 'Address',\n  dataIndex: 'address',\n  render: renderContent,\n}];\n\nconst data = [{\n  key: '1',\n  name: 'John Brown',\n  age: 32,\n  tel: '0571-22098909',\n  phone: 18889898989,\n  address: 'New York No. 1 Lake Park',\n}, {\n  key: '2',\n  name: 'Jim Green',\n  tel: '0571-22098333',\n  phone: 18889898888,\n  age: 42,\n  address: 'London No. 1 Lake Park',\n}, {\n  key: '3',\n  name: 'Joe Black',\n  age: 32,\n  tel: '0575-22098909',\n  phone: 18900010002,\n  address: 'Sidney No. 1 Lake Park',\n}, {\n  key: '4',\n  name: 'Jim Red',\n  age: 18,\n  tel: '0575-22098909',\n  phone: 18900010002,\n  address: 'London No. 2 Lake Park',\n}, {\n  key: '5',\n  name: 'Jake White',\n  age: 18,\n  tel: '0575-22098909',\n  phone: 18900010002,\n  address: 'Dublin No. 2 Lake Park',\n}];\n\nexport default function DemoComponent_table_colspan_rowspan() {\nreturn(<Table columns={columns} dataSource={data} bordered />\n);\n};\n\nexport const demo = <DemoComponent_table_colspan_rowspan key=\"DemoComponent_table_colspan_rowspan\" />;\n"],"cssCodes":[]},{"name":"custom_filter_panel","content":"---\norder: 8\ntitle:\n  en-US: Customized filter panel\n  zh-CN: 自定义筛选菜单\n---\n\n## zh-CN\n\n通过 `filterDropdown`、`filterDropdownVisible` 和 `filterDropdownVisibleChange` 定义自定义的列筛选功能，并实现一个搜索列的示例。\n\n## en-US\n\nImplement a customized column search example via `filterDropdown`, `filterDropdownVisible` and `filterDropdownVisibleChange`.\n\n````jsx\nimport { Table, Input, Button, Icon } from 'antd';\n\nconst data = [{\n  key: '1',\n  name: 'John Brown',\n  age: 32,\n  address: 'New York No. 1 Lake Park',\n}, {\n  key: '2',\n  name: 'Joe Black',\n  age: 42,\n  address: 'London No. 1 Lake Park',\n}, {\n  key: '3',\n  name: 'Jim Green',\n  age: 32,\n  address: 'Sidney No. 1 Lake Park',\n}, {\n  key: '4',\n  name: 'Jim Red',\n  age: 32,\n  address: 'London No. 2 Lake Park',\n}];\n\nclass App extends React.Component {\n  state = {\n    filterDropdownVisible: false,\n    data,\n    searchText: '',\n    filtered: false,\n  };\n  onInputChange = (e) => {\n    this.setState({ searchText: e.target.value });\n  }\n  onSearch = () => {\n    const { searchText } = this.state;\n    const reg = new RegExp(searchText, 'gi');\n    this.setState({\n      filterDropdownVisible: false,\n      filtered: !!searchText,\n      data: data.map((record) => {\n        const match = record.name.match(reg);\n        if (!match) {\n          return null;\n        }\n        return {\n          ...record,\n          name: (\n            <span>\n              {record.name.split(reg).map((text, i) => (\n                i > 0 ? [<span className=\"highlight\">{match[0]}</span>, text] : text\n              ))}\n            </span>\n          ),\n        };\n      }).filter(record => !!record),\n    });\n  }\n  render() {\n    const columns = [{\n      title: 'Name',\n      dataIndex: 'name',\n      key: 'name',\n      filterDropdown: (\n        <div className=\"custom-filter-dropdown\">\n          <Input\n            ref={ele => this.searchInput = ele}\n            placeholder=\"Search name\"\n            value={this.state.searchText}\n            onChange={this.onInputChange}\n            onPressEnter={this.onSearch}\n          />\n          <Button type=\"primary\" onClick={this.onSearch}>Search</Button>\n        </div>\n      ),\n      filterIcon: <Icon type=\"smile-o\" style={{ color: this.state.filtered ? '#108ee9' : '#aaa' }} />,\n      filterDropdownVisible: this.state.filterDropdownVisible,\n      onFilterDropdownVisibleChange: (visible) => {\n        this.setState({\n          filterDropdownVisible: visible,\n        }, () => this.searchInput.focus());\n      },\n    }, {\n      title: 'Age',\n      dataIndex: 'age',\n      key: 'age',\n    }, {\n      title: 'Address',\n      dataIndex: 'address',\n      key: 'address',\n      filters: [{\n        text: 'London',\n        value: 'London',\n      }, {\n        text: 'New York',\n        value: 'New York',\n      }],\n      onFilter: (value, record) => record.address.indexOf(value) === 0,\n    }];\n    return <Table columns={columns} dataSource={this.state.data} />;\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n````\n\n````css\n.custom-filter-dropdown {\n  padding: 8px;\n  border-radius: 6px;\n  background: #fff;\n  box-shadow: 0 1px 6px rgba(0, 0, 0, .2);\n}\n\n.custom-filter-dropdown input {\n  width: 130px;\n  margin-right: 8px;\n}\n\n.highlight {\n  color: #f50;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Table, Input, Button, Icon } from 'antd';\n\nconst data = [{\n  key: '1',\n  name: 'John Brown',\n  age: 32,\n  address: 'New York No. 1 Lake Park',\n}, {\n  key: '2',\n  name: 'Joe Black',\n  age: 42,\n  address: 'London No. 1 Lake Park',\n}, {\n  key: '3',\n  name: 'Jim Green',\n  age: 32,\n  address: 'Sidney No. 1 Lake Park',\n}, {\n  key: '4',\n  name: 'Jim Red',\n  age: 32,\n  address: 'London No. 2 Lake Park',\n}];\n\nclass App extends React.Component {\n  state = {\n    filterDropdownVisible: false,\n    data,\n    searchText: '',\n    filtered: false,\n  };\n  onInputChange = (e) => {\n    this.setState({ searchText: e.target.value });\n  }\n  onSearch = () => {\n    const { searchText } = this.state;\n    const reg = new RegExp(searchText, 'gi');\n    this.setState({\n      filterDropdownVisible: false,\n      filtered: !!searchText,\n      data: data.map((record) => {\n        const match = record.name.match(reg);\n        if (!match) {\n          return null;\n        }\n        return {\n          ...record,\n          name: (\n            <span>\n              {record.name.split(reg).map((text, i) => (\n                i > 0 ? [<span className=\"highlight\">{match[0]}</span>, text] : text\n              ))}\n            </span>\n          ),\n        };\n      }).filter(record => !!record),\n    });\n  }\n  render() {\n    const columns = [{\n      title: 'Name',\n      dataIndex: 'name',\n      key: 'name',\n      filterDropdown: (\n        <div className=\"custom-filter-dropdown\">\n          <Input\n            ref={ele => this.searchInput = ele}\n            placeholder=\"Search name\"\n            value={this.state.searchText}\n            onChange={this.onInputChange}\n            onPressEnter={this.onSearch}\n          />\n          <Button type=\"primary\" onClick={this.onSearch}>Search</Button>\n        </div>\n      ),\n      filterIcon: <Icon type=\"smile-o\" style={{ color: this.state.filtered ? '#108ee9' : '#aaa' }} />,\n      filterDropdownVisible: this.state.filterDropdownVisible,\n      onFilterDropdownVisibleChange: (visible) => {\n        this.setState({\n          filterDropdownVisible: visible,\n        }, () => this.searchInput.focus());\n      },\n    }, {\n      title: 'Age',\n      dataIndex: 'age',\n      key: 'age',\n    }, {\n      title: 'Address',\n      dataIndex: 'address',\n      key: 'address',\n      filters: [{\n        text: 'London',\n        value: 'London',\n      }, {\n        text: 'New York',\n        value: 'New York',\n      }],\n      onFilter: (value, record) => record.address.indexOf(value) === 0,\n    }];\n    return <Table columns={columns} dataSource={this.state.data} />;\n  }\n}\n\nexport default function DemoComponent_table_custom_filter_panel() {\nreturn(<App />);\n};\n\nexport const demo = <DemoComponent_table_custom_filter_panel key=\"DemoComponent_table_custom_filter_panel\" />;\n"],"cssCodes":[".custom-filter-dropdown {\n  padding: 8px;\n  border-radius: 6px;\n  background: #fff;\n  box-shadow: 0 1px 6px rgba(0, 0, 0, .2);\n}\n\n.custom-filter-dropdown input {\n  width: 130px;\n  margin-right: 8px;\n}\n\n.highlight {\n  color: #f50;\n}\n"]},{"name":"dynamic_settings","content":"---\norder: 25\ntitle:\n  en-US: Dynamic Settings\n  zh-CN: 动态控制表格属性\n---\n\n## zh-CN\n\n选择不同配置组合查看效果。\n\n## en-US\n\nSelect different settings to see the result.\n\n````jsx\nimport { Table, Icon, Switch, Radio, Form } from 'antd';\nconst FormItem = Form.Item;\n\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n  key: 'name',\n  width: 150,\n  render: text => <a href=\"#\">{text}</a>,\n}, {\n  title: 'Age',\n  dataIndex: 'age',\n  key: 'age',\n  width: 70,\n}, {\n  title: 'Address',\n  dataIndex: 'address',\n  key: 'address',\n}, {\n  title: 'Action',\n  key: 'action',\n  width: 360,\n  render: (text, record) => (\n    <span>\n      <a href=\"#\">Action 一 {record.name}</a>\n      <span className=\"ant-divider\" />\n      <a href=\"#\">Delete</a>\n      <span className=\"ant-divider\" />\n      <a href=\"#\" className=\"ant-dropdown-link\">\n        More actions <Icon type=\"down\" />\n      </a>\n    </span>\n  ),\n}];\n\nconst data = [];\nfor (let i = 1; i <= 10; i++) {\n  data.push({\n    key: i,\n    name: 'John Brown',\n    age: `${i}2`,\n    address: `New York No. ${i} Lake Park`,\n    description: `My name is John Brown, I am ${i}2 years old, living in New York No. ${i} Lake Park.`,\n  });\n}\n\nconst expandedRowRender = record => <p>{record.description}</p>;\nconst title = () => 'Here is title';\nconst showHeader = true;\nconst footer = () => 'Here is footer';\nconst scroll = { y: 240 };\n\nclass Demo extends React.Component {\n  state = {\n    bordered: false,\n    loading: false,\n    pagination: true,\n    size: 'default',\n    expandedRowRender,\n    title,\n    showHeader,\n    footer,\n    rowSelection: {},\n    scroll: undefined,\n  }\n\n  handleToggle = (prop) => {\n    return (enable) => {\n      this.setState({ [prop]: enable });\n    };\n  }\n\n  handleSizeChange = (e) => {\n    this.setState({ size: e.target.value });\n  }\n\n  handleExpandChange = (enable) => {\n    this.setState({ expandedRowRender: enable ? expandedRowRender : false });\n  }\n\n  handleTitleChange = (enable) => {\n    this.setState({ title: enable ? title : undefined });\n  }\n\n  handleHeaderChange = (enable) => {\n    this.setState({ showHeader: enable ? showHeader : false });\n  }\n\n  handleFooterChange = (enable) => {\n    this.setState({ footer: enable ? footer : undefined });\n  }\n\n  handleRowSelectionChange = (enable) => {\n    this.setState({ rowSelection: enable ? {} : undefined });\n  }\n\n  handleScollChange = (enable) => {\n    this.setState({ scroll: enable ? scroll : undefined });\n  }\n\n  render() {\n    const state = this.state;\n    return (\n      <div>\n        <div className=\"components-table-demo-control-bar\">\n          <Form layout=\"inline\">\n            <FormItem label=\"Bordered\">\n              <Switch checked={state.bordered} onChange={this.handleToggle('bordered')} />\n            </FormItem>\n            <FormItem label=\"loading\">\n              <Switch checked={state.loading} onChange={this.handleToggle('loading')} />\n            </FormItem>\n            <FormItem label=\"Pagination\">\n              <Switch checked={state.pagination} onChange={this.handleToggle('pagination')} />\n            </FormItem>\n            <FormItem label=\"Title\">\n              <Switch checked={!!state.title} onChange={this.handleTitleChange} />\n            </FormItem>\n            <FormItem label=\"Column Header\">\n              <Switch checked={!!state.showHeader} onChange={this.handleHeaderChange} />\n            </FormItem>\n            <FormItem label=\"Footer\">\n              <Switch checked={!!state.footer} onChange={this.handleFooterChange} />\n            </FormItem>\n            <FormItem label=\"Expandable\">\n              <Switch checked={!!state.expandedRowRender} onChange={this.handleExpandChange} />\n            </FormItem>\n            <FormItem label=\"Checkbox\">\n              <Switch checked={!!state.rowSelection} onChange={this.handleRowSelectionChange} />\n            </FormItem>\n            <FormItem label=\"Fixed Header\">\n              <Switch checked={!!state.scroll} onChange={this.handleScollChange} />\n            </FormItem>\n            <FormItem label=\"Size\">\n              <Radio.Group size=\"default\" value={state.size} onChange={this.handleSizeChange}>\n                <Radio.Button value=\"default\">Default</Radio.Button>\n                <Radio.Button value=\"middle\">Middle</Radio.Button>\n                <Radio.Button value=\"small\">Small</Radio.Button>\n              </Radio.Group>\n            </FormItem>\n          </Form>\n        </div>\n        <Table {...this.state} columns={columns} dataSource={data} />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n````\n\n<style>\n.components-table-demo-control-bar {\n  margin-bottom: 10px;\n}\n.components-table-demo-control-bar .ant-form-item {\n  margin-right: 16px;\n  margin-bottom: 8px;\n}\n</style>\n","jsCodes":["import React from 'react';\nimport { Table, Icon, Switch, Radio, Form } from 'antd';\nconst FormItem = Form.Item;\n\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n  key: 'name',\n  width: 150,\n  render: text => <a href=\"#\">{text}</a>,\n}, {\n  title: 'Age',\n  dataIndex: 'age',\n  key: 'age',\n  width: 70,\n}, {\n  title: 'Address',\n  dataIndex: 'address',\n  key: 'address',\n}, {\n  title: 'Action',\n  key: 'action',\n  width: 360,\n  render: (text, record) => (\n    <span>\n      <a href=\"#\">Action 一 {record.name}</a>\n      <span className=\"ant-divider\" />\n      <a href=\"#\">Delete</a>\n      <span className=\"ant-divider\" />\n      <a href=\"#\" className=\"ant-dropdown-link\">\n        More actions <Icon type=\"down\" />\n      </a>\n    </span>\n  ),\n}];\n\nconst data = [];\nfor (let i = 1; i <= 10; i++) {\n  data.push({\n    key: i,\n    name: 'John Brown',\n    age: `${i}2`,\n    address: `New York No. ${i} Lake Park`,\n    description: `My name is John Brown, I am ${i}2 years old, living in New York No. ${i} Lake Park.`,\n  });\n}\n\nconst expandedRowRender = record => <p>{record.description}</p>;\nconst title = () => 'Here is title';\nconst showHeader = true;\nconst footer = () => 'Here is footer';\nconst scroll = { y: 240 };\n\nclass Demo extends React.Component {\n  state = {\n    bordered: false,\n    loading: false,\n    pagination: true,\n    size: 'default',\n    expandedRowRender,\n    title,\n    showHeader,\n    footer,\n    rowSelection: {},\n    scroll: undefined,\n  }\n\n  handleToggle = (prop) => {\n    return (enable) => {\n      this.setState({ [prop]: enable });\n    };\n  }\n\n  handleSizeChange = (e) => {\n    this.setState({ size: e.target.value });\n  }\n\n  handleExpandChange = (enable) => {\n    this.setState({ expandedRowRender: enable ? expandedRowRender : false });\n  }\n\n  handleTitleChange = (enable) => {\n    this.setState({ title: enable ? title : undefined });\n  }\n\n  handleHeaderChange = (enable) => {\n    this.setState({ showHeader: enable ? showHeader : false });\n  }\n\n  handleFooterChange = (enable) => {\n    this.setState({ footer: enable ? footer : undefined });\n  }\n\n  handleRowSelectionChange = (enable) => {\n    this.setState({ rowSelection: enable ? {} : undefined });\n  }\n\n  handleScollChange = (enable) => {\n    this.setState({ scroll: enable ? scroll : undefined });\n  }\n\n  render() {\n    const state = this.state;\n    return (\n      <div>\n        <div className=\"components-table-demo-control-bar\">\n          <Form layout=\"inline\">\n            <FormItem label=\"Bordered\">\n              <Switch checked={state.bordered} onChange={this.handleToggle('bordered')} />\n            </FormItem>\n            <FormItem label=\"loading\">\n              <Switch checked={state.loading} onChange={this.handleToggle('loading')} />\n            </FormItem>\n            <FormItem label=\"Pagination\">\n              <Switch checked={state.pagination} onChange={this.handleToggle('pagination')} />\n            </FormItem>\n            <FormItem label=\"Title\">\n              <Switch checked={!!state.title} onChange={this.handleTitleChange} />\n            </FormItem>\n            <FormItem label=\"Column Header\">\n              <Switch checked={!!state.showHeader} onChange={this.handleHeaderChange} />\n            </FormItem>\n            <FormItem label=\"Footer\">\n              <Switch checked={!!state.footer} onChange={this.handleFooterChange} />\n            </FormItem>\n            <FormItem label=\"Expandable\">\n              <Switch checked={!!state.expandedRowRender} onChange={this.handleExpandChange} />\n            </FormItem>\n            <FormItem label=\"Checkbox\">\n              <Switch checked={!!state.rowSelection} onChange={this.handleRowSelectionChange} />\n            </FormItem>\n            <FormItem label=\"Fixed Header\">\n              <Switch checked={!!state.scroll} onChange={this.handleScollChange} />\n            </FormItem>\n            <FormItem label=\"Size\">\n              <Radio.Group size=\"default\" value={state.size} onChange={this.handleSizeChange}>\n                <Radio.Button value=\"default\">Default</Radio.Button>\n                <Radio.Button value=\"middle\">Middle</Radio.Button>\n                <Radio.Button value=\"small\">Small</Radio.Button>\n              </Radio.Group>\n            </FormItem>\n          </Form>\n        </div>\n        <Table {...this.state} columns={columns} dataSource={data} />\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_table_dynamic_settings() {\nreturn(<Demo />);\n};\n\nexport const demo = <DemoComponent_table_dynamic_settings key=\"DemoComponent_table_dynamic_settings\" />;\n"],"cssCodes":[]},{"name":"edit_cell","content":"---\norder: 22\ntitle:\n  en-US: Editable Cells\n  zh-CN: 可编辑单元格\n---\n\n## zh-CN\n\n带单元格编辑功能的表格。\n\n## en-US\n\nTable with editable cells.\n\n````jsx\nimport { Table, Input, Icon, Button, Popconfirm } from 'antd';\n\nclass EditableCell extends React.Component {\n  state = {\n    value: this.props.value,\n    editable: false,\n  }\n  handleChange = (e) => {\n    const value = e.target.value;\n    this.setState({ value });\n  }\n  check = () => {\n    this.setState({ editable: false });\n    if (this.props.onChange) {\n      this.props.onChange(this.state.value);\n    }\n  }\n  edit = () => {\n    this.setState({ editable: true });\n  }\n  render() {\n    const { value, editable } = this.state;\n    return (\n      <div className=\"editable-cell\">\n        {\n          editable ?\n            <div className=\"editable-cell-input-wrapper\">\n              <Input\n                value={value}\n                onChange={this.handleChange}\n                onPressEnter={this.check}\n              />\n              <Icon\n                type=\"check\"\n                className=\"editable-cell-icon-check\"\n                onClick={this.check}\n              />\n            </div>\n            :\n            <div className=\"editable-cell-text-wrapper\">\n              {value || ' '}\n              <Icon\n                type=\"edit\"\n                className=\"editable-cell-icon\"\n                onClick={this.edit}\n              />\n            </div>\n        }\n      </div>\n    );\n  }\n}\n\nclass EditableTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.columns = [{\n      title: 'name',\n      dataIndex: 'name',\n      width: '30%',\n      render: (text, record, index) => (\n        <EditableCell\n          value={text}\n          onChange={this.onCellChange(index, 'name')}\n        />\n      ),\n    }, {\n      title: 'age',\n      dataIndex: 'age',\n    }, {\n      title: 'address',\n      dataIndex: 'address',\n    }, {\n      title: 'operation',\n      dataIndex: 'operation',\n      render: (text, record, index) => {\n        return (\n          this.state.dataSource.length > 1 ?\n          (\n            <Popconfirm title=\"Sure to delete?\" onConfirm={() => this.onDelete(index)}>\n              <a href=\"#\">Delete</a>\n            </Popconfirm>\n          ) : null\n        );\n      },\n    }];\n\n    this.state = {\n      dataSource: [{\n        key: '0',\n        name: 'Edward King 0',\n        age: '32',\n        address: 'London, Park Lane no. 0',\n      }, {\n        key: '1',\n        name: 'Edward King 1',\n        age: '32',\n        address: 'London, Park Lane no. 1',\n      }],\n      count: 2,\n    };\n  }\n  onCellChange = (index, key) => {\n    return (value) => {\n      const dataSource = [...this.state.dataSource];\n      dataSource[index][key] = value;\n      this.setState({ dataSource });\n    };\n  }\n  onDelete = (index) => {\n    const dataSource = [...this.state.dataSource];\n    dataSource.splice(index, 1);\n    this.setState({ dataSource });\n  }\n  handleAdd = () => {\n    const { count, dataSource } = this.state;\n    const newData = {\n      key: count,\n      name: `Edward King ${count}`,\n      age: 32,\n      address: `London, Park Lane no. ${count}`,\n    };\n    this.setState({\n      dataSource: [...dataSource, newData],\n      count: count + 1,\n    });\n  }\n  render() {\n    const { dataSource } = this.state;\n    const columns = this.columns;\n    return (\n      <div>\n        <Button className=\"editable-add-btn\" onClick={this.handleAdd}>Add</Button>\n        <Table bordered dataSource={dataSource} columns={columns} />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<EditableTable />, mountNode);\n````\n\n````css\n.editable-cell {\n  position: relative;\n}\n\n.editable-cell-input-wrapper,\n.editable-cell-text-wrapper {\n  padding-right: 24px;\n}\n\n.editable-cell-text-wrapper {\n  padding: 5px 24px 5px 5px;\n}\n\n.editable-cell-icon,\n.editable-cell-icon-check {\n  position: absolute;\n  right: 0;\n  width: 20px;\n  cursor: pointer;\n}\n\n.editable-cell-icon {\n  line-height: 18px;\n  display: none;\n}\n\n.editable-cell-icon-check {\n  line-height: 28px;\n}\n\n.editable-cell:hover .editable-cell-icon {\n  display: inline-block;\n}\n\n.editable-cell-icon:hover,\n.editable-cell-icon-check:hover {\n  color: #108ee9;\n}\n\n.editable-add-btn {\n  margin-bottom: 8px;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Table, Input, Icon, Button, Popconfirm } from 'antd';\n\nclass EditableCell extends React.Component {\n  state = {\n    value: this.props.value,\n    editable: false,\n  }\n  handleChange = (e) => {\n    const value = e.target.value;\n    this.setState({ value });\n  }\n  check = () => {\n    this.setState({ editable: false });\n    if (this.props.onChange) {\n      this.props.onChange(this.state.value);\n    }\n  }\n  edit = () => {\n    this.setState({ editable: true });\n  }\n  render() {\n    const { value, editable } = this.state;\n    return (\n      <div className=\"editable-cell\">\n        {\n          editable ?\n            <div className=\"editable-cell-input-wrapper\">\n              <Input\n                value={value}\n                onChange={this.handleChange}\n                onPressEnter={this.check}\n              />\n              <Icon\n                type=\"check\"\n                className=\"editable-cell-icon-check\"\n                onClick={this.check}\n              />\n            </div>\n            :\n            <div className=\"editable-cell-text-wrapper\">\n              {value || ' '}\n              <Icon\n                type=\"edit\"\n                className=\"editable-cell-icon\"\n                onClick={this.edit}\n              />\n            </div>\n        }\n      </div>\n    );\n  }\n}\n\nclass EditableTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.columns = [{\n      title: 'name',\n      dataIndex: 'name',\n      width: '30%',\n      render: (text, record, index) => (\n        <EditableCell\n          value={text}\n          onChange={this.onCellChange(index, 'name')}\n        />\n      ),\n    }, {\n      title: 'age',\n      dataIndex: 'age',\n    }, {\n      title: 'address',\n      dataIndex: 'address',\n    }, {\n      title: 'operation',\n      dataIndex: 'operation',\n      render: (text, record, index) => {\n        return (\n          this.state.dataSource.length > 1 ?\n          (\n            <Popconfirm title=\"Sure to delete?\" onConfirm={() => this.onDelete(index)}>\n              <a href=\"#\">Delete</a>\n            </Popconfirm>\n          ) : null\n        );\n      },\n    }];\n\n    this.state = {\n      dataSource: [{\n        key: '0',\n        name: 'Edward King 0',\n        age: '32',\n        address: 'London, Park Lane no. 0',\n      }, {\n        key: '1',\n        name: 'Edward King 1',\n        age: '32',\n        address: 'London, Park Lane no. 1',\n      }],\n      count: 2,\n    };\n  }\n  onCellChange = (index, key) => {\n    return (value) => {\n      const dataSource = [...this.state.dataSource];\n      dataSource[index][key] = value;\n      this.setState({ dataSource });\n    };\n  }\n  onDelete = (index) => {\n    const dataSource = [...this.state.dataSource];\n    dataSource.splice(index, 1);\n    this.setState({ dataSource });\n  }\n  handleAdd = () => {\n    const { count, dataSource } = this.state;\n    const newData = {\n      key: count,\n      name: `Edward King ${count}`,\n      age: 32,\n      address: `London, Park Lane no. ${count}`,\n    };\n    this.setState({\n      dataSource: [...dataSource, newData],\n      count: count + 1,\n    });\n  }\n  render() {\n    const { dataSource } = this.state;\n    const columns = this.columns;\n    return (\n      <div>\n        <Button className=\"editable-add-btn\" onClick={this.handleAdd}>Add</Button>\n        <Table bordered dataSource={dataSource} columns={columns} />\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_table_edit_cell() {\nreturn(<EditableTable />);\n};\n\nexport const demo = <DemoComponent_table_edit_cell key=\"DemoComponent_table_edit_cell\" />;\n"],"cssCodes":[".editable-cell {\n  position: relative;\n}\n\n.editable-cell-input-wrapper,\n.editable-cell-text-wrapper {\n  padding-right: 24px;\n}\n\n.editable-cell-text-wrapper {\n  padding: 5px 24px 5px 5px;\n}\n\n.editable-cell-icon,\n.editable-cell-icon-check {\n  position: absolute;\n  right: 0;\n  width: 20px;\n  cursor: pointer;\n}\n\n.editable-cell-icon {\n  line-height: 18px;\n  display: none;\n}\n\n.editable-cell-icon-check {\n  line-height: 28px;\n}\n\n.editable-cell:hover .editable-cell-icon {\n  display: inline-block;\n}\n\n.editable-cell-icon:hover,\n.editable-cell-icon-check:hover {\n  color: #108ee9;\n}\n\n.editable-add-btn {\n  margin-bottom: 8px;\n}\n"]},{"name":"edit_row","content":"---\norder: 23\ntitle:\n  en-US: Editable Rows\n  zh-CN: 可编辑行\n---\n\n## zh-CN\n\n带行编辑功能的表格。\n\n## en-US\n\nTable with editable rows.\n\n````jsx\nimport { Table, Input, Popconfirm } from 'antd';\n\nclass EditableCell extends React.Component {\n  state = {\n    value: this.props.value,\n    editable: this.props.editable || false,\n  }\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.editable !== this.state.editable) {\n      this.setState({ editable: nextProps.editable });\n      if (nextProps.editable) {\n        this.cacheValue = this.state.value;\n      }\n    }\n    if (nextProps.status && nextProps.status !== this.props.status) {\n      if (nextProps.status === 'save') {\n        this.props.onChange(this.state.value);\n      } else if (nextProps.status === 'cancel') {\n        this.setState({ value: this.cacheValue });\n        this.props.onChange(this.cacheValue);\n      }\n    }\n  }\n  shouldComponentUpdate(nextProps, nextState) {\n    return nextProps.editable !== this.state.editable ||\n           nextState.value !== this.state.value;\n  }\n  handleChange(e) {\n    const value = e.target.value;\n    this.setState({ value });\n  }\n  render() {\n    const { value, editable } = this.state;\n    return (\n      <div>\n        {\n          editable ?\n            <div>\n              <Input\n                value={value}\n                onChange={e => this.handleChange(e)}\n              />\n            </div>\n            :\n            <div className=\"editable-row-text\">\n              {value.toString() || ' '}\n            </div>\n        }\n      </div>\n    );\n  }\n}\n\nclass EditableTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.columns = [{\n      title: 'name',\n      dataIndex: 'name',\n      width: '25%',\n      render: (text, record, index) => this.renderColumns(this.state.data, index, 'name', text),\n    }, {\n      title: 'age',\n      dataIndex: 'age',\n      width: '15%',\n      render: (text, record, index) => this.renderColumns(this.state.data, index, 'age', text),\n    }, {\n      title: 'address',\n      dataIndex: 'address',\n      width: '40%',\n      render: (text, record, index) => this.renderColumns(this.state.data, index, 'address', text),\n    }, {\n      title: 'operation',\n      dataIndex: 'operation',\n      render: (text, record, index) => {\n        const { editable } = this.state.data[index].name;\n        return (\n          <div className=\"editable-row-operations\">\n            {\n              editable ?\n                <span>\n                  <a onClick={() => this.editDone(index, 'save')}>Save</a>\n                  <Popconfirm title=\"Sure to cancel?\" onConfirm={() => this.editDone(index, 'cancel')}>\n                    <a>Cancel</a>\n                  </Popconfirm>\n                </span>\n                :\n                <span>\n                  <a onClick={() => this.edit(index)}>Edit</a>\n                </span>\n            }\n          </div>\n        );\n      },\n    }];\n    this.state = {\n      data: [{\n        key: '0',\n        name: {\n          editable: false,\n          value: 'Edward King 0',\n        },\n        age: {\n          editable: false,\n          value: '32',\n        },\n        address: {\n          value: 'London, Park Lane no. 0',\n        },\n      }],\n    };\n  }\n  renderColumns(data, index, key, text) {\n    const { editable, status } = data[index][key];\n    if (typeof editable === 'undefined') {\n      return text;\n    }\n    return (<EditableCell\n      editable={editable}\n      value={text}\n      onChange={value => this.handleChange(key, index, value)}\n      status={status}\n    />);\n  }\n  handleChange(key, index, value) {\n    const { data } = this.state;\n    data[index][key].value = value;\n    this.setState({ data });\n  }\n  edit(index) {\n    const { data } = this.state;\n    Object.keys(data[index]).forEach((item) => {\n      if (data[index][item] && typeof data[index][item].editable !== 'undefined') {\n        data[index][item].editable = true;\n      }\n    });\n    this.setState({ data });\n  }\n  editDone(index, type) {\n    const { data } = this.state;\n    Object.keys(data[index]).forEach((item) => {\n      if (data[index][item] && typeof data[index][item].editable !== 'undefined') {\n        data[index][item].editable = false;\n        data[index][item].status = type;\n      }\n    });\n    this.setState({ data }, () => {\n      Object.keys(data[index]).forEach((item) => {\n        if (data[index][item] && typeof data[index][item].editable !== 'undefined') {\n          delete data[index][item].status;\n        }\n      });\n    });\n  }\n  render() {\n    const { data } = this.state;\n    const dataSource = data.map((item) => {\n      const obj = {};\n      Object.keys(item).forEach((key) => {\n        obj[key] = key === 'key' ? item[key] : item[key].value;\n      });\n      return obj;\n    });\n    const columns = this.columns;\n    return <Table bordered dataSource={dataSource} columns={columns} />;\n  }\n}\n\nReactDOM.render(<EditableTable />, mountNode);\n````\n\n````css\n.editable-row-text {\n  padding: 5px;\n}\n\n.editable-row-operations a {\n  margin-right: 8px;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Table, Input, Popconfirm } from 'antd';\n\nclass EditableCell extends React.Component {\n  state = {\n    value: this.props.value,\n    editable: this.props.editable || false,\n  }\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.editable !== this.state.editable) {\n      this.setState({ editable: nextProps.editable });\n      if (nextProps.editable) {\n        this.cacheValue = this.state.value;\n      }\n    }\n    if (nextProps.status && nextProps.status !== this.props.status) {\n      if (nextProps.status === 'save') {\n        this.props.onChange(this.state.value);\n      } else if (nextProps.status === 'cancel') {\n        this.setState({ value: this.cacheValue });\n        this.props.onChange(this.cacheValue);\n      }\n    }\n  }\n  shouldComponentUpdate(nextProps, nextState) {\n    return nextProps.editable !== this.state.editable ||\n           nextState.value !== this.state.value;\n  }\n  handleChange(e) {\n    const value = e.target.value;\n    this.setState({ value });\n  }\n  render() {\n    const { value, editable } = this.state;\n    return (\n      <div>\n        {\n          editable ?\n            <div>\n              <Input\n                value={value}\n                onChange={e => this.handleChange(e)}\n              />\n            </div>\n            :\n            <div className=\"editable-row-text\">\n              {value.toString() || ' '}\n            </div>\n        }\n      </div>\n    );\n  }\n}\n\nclass EditableTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.columns = [{\n      title: 'name',\n      dataIndex: 'name',\n      width: '25%',\n      render: (text, record, index) => this.renderColumns(this.state.data, index, 'name', text),\n    }, {\n      title: 'age',\n      dataIndex: 'age',\n      width: '15%',\n      render: (text, record, index) => this.renderColumns(this.state.data, index, 'age', text),\n    }, {\n      title: 'address',\n      dataIndex: 'address',\n      width: '40%',\n      render: (text, record, index) => this.renderColumns(this.state.data, index, 'address', text),\n    }, {\n      title: 'operation',\n      dataIndex: 'operation',\n      render: (text, record, index) => {\n        const { editable } = this.state.data[index].name;\n        return (\n          <div className=\"editable-row-operations\">\n            {\n              editable ?\n                <span>\n                  <a onClick={() => this.editDone(index, 'save')}>Save</a>\n                  <Popconfirm title=\"Sure to cancel?\" onConfirm={() => this.editDone(index, 'cancel')}>\n                    <a>Cancel</a>\n                  </Popconfirm>\n                </span>\n                :\n                <span>\n                  <a onClick={() => this.edit(index)}>Edit</a>\n                </span>\n            }\n          </div>\n        );\n      },\n    }];\n    this.state = {\n      data: [{\n        key: '0',\n        name: {\n          editable: false,\n          value: 'Edward King 0',\n        },\n        age: {\n          editable: false,\n          value: '32',\n        },\n        address: {\n          value: 'London, Park Lane no. 0',\n        },\n      }],\n    };\n  }\n  renderColumns(data, index, key, text) {\n    const { editable, status } = data[index][key];\n    if (typeof editable === 'undefined') {\n      return text;\n    }\n    return (<EditableCell\n      editable={editable}\n      value={text}\n      onChange={value => this.handleChange(key, index, value)}\n      status={status}\n    />);\n  }\n  handleChange(key, index, value) {\n    const { data } = this.state;\n    data[index][key].value = value;\n    this.setState({ data });\n  }\n  edit(index) {\n    const { data } = this.state;\n    Object.keys(data[index]).forEach((item) => {\n      if (data[index][item] && typeof data[index][item].editable !== 'undefined') {\n        data[index][item].editable = true;\n      }\n    });\n    this.setState({ data });\n  }\n  editDone(index, type) {\n    const { data } = this.state;\n    Object.keys(data[index]).forEach((item) => {\n      if (data[index][item] && typeof data[index][item].editable !== 'undefined') {\n        data[index][item].editable = false;\n        data[index][item].status = type;\n      }\n    });\n    this.setState({ data }, () => {\n      Object.keys(data[index]).forEach((item) => {\n        if (data[index][item] && typeof data[index][item].editable !== 'undefined') {\n          delete data[index][item].status;\n        }\n      });\n    });\n  }\n  render() {\n    const { data } = this.state;\n    const dataSource = data.map((item) => {\n      const obj = {};\n      Object.keys(item).forEach((key) => {\n        obj[key] = key === 'key' ? item[key] : item[key].value;\n      });\n      return obj;\n    });\n    const columns = this.columns;\n    return <Table bordered dataSource={dataSource} columns={columns} />;\n  }\n}\n\nexport default function DemoComponent_table_edit_row() {\nreturn(<EditableTable />);\n};\n\nexport const demo = <DemoComponent_table_edit_row key=\"DemoComponent_table_edit_row\" />;\n"],"cssCodes":[".editable-row-text {\n  padding: 5px;\n}\n\n.editable-row-operations a {\n  margin-right: 8px;\n}\n"]},{"name":"expand_children","content":"---\norder: 16\ntitle:\n  en-US: Tree data\n  zh-CN: 树形数据展示\n---\n\n## zh-CN\n\n表格支持树形数据的展示，可以通过设置 `indentSize` 以控制每一层的缩进宽度。\n\n> 注：暂不支持父子数据递归关联选择。\n\n## en-US\n\nDisplay tree structure data in Table, control the indent width by setting `indentSize`.\n\n> Note, no support for recursive selection of tree structure data table yet.\n\n````jsx\nimport { Table } from 'antd';\n\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n  key: 'name',\n  width: '40%',\n}, {\n  title: 'Age',\n  dataIndex: 'age',\n  key: 'age',\n  width: '30%',\n}, {\n  title: 'Address',\n  dataIndex: 'address',\n  key: 'address',\n}];\n\nconst data = [{\n  key: 1,\n  name: 'John Brown sr.',\n  age: 60,\n  address: 'New York No. 1 Lake Park',\n  children: [{\n    key: 11,\n    name: 'John Brown',\n    age: 42,\n    address: 'New York No. 2 Lake Park',\n  }, {\n    key: 12,\n    name: 'John Brown jr.',\n    age: 30,\n    address: 'New York No. 3 Lake Park',\n    children: [{\n      key: 121,\n      name: 'Jimmy Brown',\n      age: 16,\n      address: 'New York No. 3 Lake Park',\n    }],\n  }, {\n    key: 13,\n    name: 'Jim Green sr.',\n    age: 72,\n    address: 'London No. 1 Lake Park',\n    children: [{\n      key: 131,\n      name: 'Jim Green',\n      age: 42,\n      address: 'London No. 2 Lake Park',\n      children: [{\n        key: 1311,\n        name: 'Jim Green jr.',\n        age: 25,\n        address: 'London No. 3 Lake Park',\n      }, {\n        key: 1312,\n        name: 'Jimmy Green sr.',\n        age: 18,\n        address: 'London No. 4 Lake Park',\n      }],\n    }],\n  }],\n}, {\n  key: 2,\n  name: 'Joe Black',\n  age: 32,\n  address: 'Sidney No. 1 Lake Park',\n}];\n\n// rowSelection objects indicates the need for row selection\nconst rowSelection = {\n  onChange: (selectedRowKeys, selectedRows) => {\n    console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows);\n  },\n  onSelect: (record, selected, selectedRows) => {\n    console.log(record, selected, selectedRows);\n  },\n  onSelectAll: (selected, selectedRows, changeRows) => {\n    console.log(selected, selectedRows, changeRows);\n  },\n};\n\nReactDOM.render(\n  <Table columns={columns} rowSelection={rowSelection} dataSource={data} />\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Table } from 'antd';\n\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n  key: 'name',\n  width: '40%',\n}, {\n  title: 'Age',\n  dataIndex: 'age',\n  key: 'age',\n  width: '30%',\n}, {\n  title: 'Address',\n  dataIndex: 'address',\n  key: 'address',\n}];\n\nconst data = [{\n  key: 1,\n  name: 'John Brown sr.',\n  age: 60,\n  address: 'New York No. 1 Lake Park',\n  children: [{\n    key: 11,\n    name: 'John Brown',\n    age: 42,\n    address: 'New York No. 2 Lake Park',\n  }, {\n    key: 12,\n    name: 'John Brown jr.',\n    age: 30,\n    address: 'New York No. 3 Lake Park',\n    children: [{\n      key: 121,\n      name: 'Jimmy Brown',\n      age: 16,\n      address: 'New York No. 3 Lake Park',\n    }],\n  }, {\n    key: 13,\n    name: 'Jim Green sr.',\n    age: 72,\n    address: 'London No. 1 Lake Park',\n    children: [{\n      key: 131,\n      name: 'Jim Green',\n      age: 42,\n      address: 'London No. 2 Lake Park',\n      children: [{\n        key: 1311,\n        name: 'Jim Green jr.',\n        age: 25,\n        address: 'London No. 3 Lake Park',\n      }, {\n        key: 1312,\n        name: 'Jimmy Green sr.',\n        age: 18,\n        address: 'London No. 4 Lake Park',\n      }],\n    }],\n  }],\n}, {\n  key: 2,\n  name: 'Joe Black',\n  age: 32,\n  address: 'Sidney No. 1 Lake Park',\n}];\n\n// rowSelection objects indicates the need for row selection\nconst rowSelection = {\n  onChange: (selectedRowKeys, selectedRows) => {\n    console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows);\n  },\n  onSelect: (record, selected, selectedRows) => {\n    console.log(record, selected, selectedRows);\n  },\n  onSelectAll: (selected, selectedRows, changeRows) => {\n    console.log(selected, selectedRows, changeRows);\n  },\n};\n\nexport default function DemoComponent_table_expand_children() {\nreturn(\n  <Table columns={columns} rowSelection={rowSelection} dataSource={data} />\n);\n};\n\nexport const demo = <DemoComponent_table_expand_children key=\"DemoComponent_table_expand_children\" />;\n"],"cssCodes":[]},{"name":"expand","content":"---\norder: 13\ntitle:\n  en-US: Expandable Row\n  zh-CN: 可展开\n---\n\n## zh-CN\n\n当表格内容较多不能一次性完全展示时。\n\n## en-US\n\nWhen there's too much information to show and the table can't display all at once.\n\n````jsx\nimport { Table } from 'antd';\n\nconst columns = [\n  { title: 'Name', dataIndex: 'name', key: 'name' },\n  { title: 'Age', dataIndex: 'age', key: 'age' },\n  { title: 'Address', dataIndex: 'address', key: 'address' },\n  { title: 'Action', dataIndex: '', key: 'x', render: () => <a href=\"#\">Delete</a> },\n];\n\nconst data = [\n  { key: 1, name: 'John Brown', age: 32, address: 'New York No. 1 Lake Park', description: 'My name is John Brown, I am 32 years old, living in New York No. 1 Lake Park.' },\n  { key: 2, name: 'Jim Green', age: 42, address: 'London No. 1 Lake Park', description: 'My name is Jim Green, I am 42 years old, living in London No. 1 Lake Park.' },\n  { key: 3, name: 'Joe Black', age: 32, address: 'Sidney No. 1 Lake Park', description: 'My name is Joe Black, I am 32 years old, living in Sidney No. 1 Lake Park.' },\n];\n\nReactDOM.render(\n  <Table\n    columns={columns}\n    expandedRowRender={record => <p>{record.description}</p>}\n    dataSource={data}\n  />\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Table } from 'antd';\n\nconst columns = [\n  { title: 'Name', dataIndex: 'name', key: 'name' },\n  { title: 'Age', dataIndex: 'age', key: 'age' },\n  { title: 'Address', dataIndex: 'address', key: 'address' },\n  { title: 'Action', dataIndex: '', key: 'x', render: () => <a href=\"#\">Delete</a> },\n];\n\nconst data = [\n  { key: 1, name: 'John Brown', age: 32, address: 'New York No. 1 Lake Park', description: 'My name is John Brown, I am 32 years old, living in New York No. 1 Lake Park.' },\n  { key: 2, name: 'Jim Green', age: 42, address: 'London No. 1 Lake Park', description: 'My name is Jim Green, I am 42 years old, living in London No. 1 Lake Park.' },\n  { key: 3, name: 'Joe Black', age: 32, address: 'Sidney No. 1 Lake Park', description: 'My name is Joe Black, I am 32 years old, living in Sidney No. 1 Lake Park.' },\n];\n\nexport default function DemoComponent_table_expand() {\nreturn(\n  <Table\n    columns={columns}\n    expandedRowRender={record => <p>{record.description}</p>}\n    dataSource={data}\n  />\n);\n};\n\nexport const demo = <DemoComponent_table_expand key=\"DemoComponent_table_expand\" />;\n"],"cssCodes":[]},{"name":"fixed_columns_header","content":"---\norder: 19\ntitle:\n  en-US: Fixed Columns and Header\n  zh-CN: 固定头和列\n---\n\n## zh-CN\n\n适合同时展示有大量数据和数据列。\n\n> 若列头与内容不对齐，请指定列的宽度 `width`。\n\n> 建议指定 `scroll.x` 为大于表格宽度的固定值或百分比。注意，且非固定列宽度之和不要超过 `scroll.x`。\n\n## en-US\n\nA Solution for displaying large amounts of data with long columns.\n\n> Specify the width of columns if header and cell do not align properly.\n\n> A fixed value which is greater than table width for `scroll.x` is recommended. The sum of unfixed columns should not greater than `scroll.x`.\n\n````jsx\nimport { Table } from 'antd';\n\nconst columns = [\n  { title: 'Full Name', width: 100, dataIndex: 'name', key: 'name', fixed: 'left' },\n  { title: 'Age', width: 100, dataIndex: 'age', key: 'age', fixed: 'left' },\n  { title: 'Column 1', dataIndex: 'address', key: '1', width: 150 },\n  { title: 'Column 2', dataIndex: 'address', key: '2', width: 150 },\n  { title: 'Column 3', dataIndex: 'address', key: '3', width: 150 },\n  { title: 'Column 4', dataIndex: 'address', key: '4', width: 150 },\n  { title: 'Column 5', dataIndex: 'address', key: '5', width: 150 },\n  { title: 'Column 6', dataIndex: 'address', key: '6', width: 150 },\n  { title: 'Column 7', dataIndex: 'address', key: '7', width: 150 },\n  { title: 'Column 8', dataIndex: 'address', key: '8' },\n  {\n    title: 'Action',\n    key: 'operation',\n    fixed: 'right',\n    width: 100,\n    render: () => <a href=\"#\">action</a>,\n  },\n];\n\nconst data = [];\nfor (let i = 0; i < 100; i++) {\n  data.push({\n    key: i,\n    name: `Edrward ${i}`,\n    age: 32,\n    address: `London Park no. ${i}`,\n  });\n}\n\nReactDOM.render(<Table columns={columns} dataSource={data} scroll={{ x: 1500, y: 300 }} />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Table } from 'antd';\n\nconst columns = [\n  { title: 'Full Name', width: 100, dataIndex: 'name', key: 'name', fixed: 'left' },\n  { title: 'Age', width: 100, dataIndex: 'age', key: 'age', fixed: 'left' },\n  { title: 'Column 1', dataIndex: 'address', key: '1', width: 150 },\n  { title: 'Column 2', dataIndex: 'address', key: '2', width: 150 },\n  { title: 'Column 3', dataIndex: 'address', key: '3', width: 150 },\n  { title: 'Column 4', dataIndex: 'address', key: '4', width: 150 },\n  { title: 'Column 5', dataIndex: 'address', key: '5', width: 150 },\n  { title: 'Column 6', dataIndex: 'address', key: '6', width: 150 },\n  { title: 'Column 7', dataIndex: 'address', key: '7', width: 150 },\n  { title: 'Column 8', dataIndex: 'address', key: '8' },\n  {\n    title: 'Action',\n    key: 'operation',\n    fixed: 'right',\n    width: 100,\n    render: () => <a href=\"#\">action</a>,\n  },\n];\n\nconst data = [];\nfor (let i = 0; i < 100; i++) {\n  data.push({\n    key: i,\n    name: `Edrward ${i}`,\n    age: 32,\n    address: `London Park no. ${i}`,\n  });\n}\n\nexport default function DemoComponent_table_fixed_columns_header() {\nreturn(<Table columns={columns} dataSource={data} scroll={{ x: 1500, y: 300 }} />);\n};\n\nexport const demo = <DemoComponent_table_fixed_columns_header key=\"DemoComponent_table_fixed_columns_header\" />;\n"],"cssCodes":[]},{"name":"fixed_columns","content":"---\norder: 18\ntitle:\n  en-US: Fixed Columns\n  zh-CN: 固定列\n---\n\n## zh-CN\n\n对于列数很多的数据，可以固定前后的列，横向滚动查看其它数据，需要和 `scroll.x` 配合使用。\n\n> 若列头与内容不对齐，请指定列的宽度 `width`。\n\n> 建议指定 `scroll.x` 为大于表格宽度的固定值或百分比。注意，且非固定列宽度之和不要超过 `scroll.x`。\n\n## en-US\n\nTo fix some columns and scroll inside other columns, and you must set `scoll.x` meanwhile.\n\n> Specify the width of columns if header and cell do not align properly.\n\n> A fixed value which is greater than table width for `scroll.x` is recommended. The sum of unfixed columns should not greater than `scroll.x`.\n\n````jsx\nimport { Table } from 'antd';\n\nconst columns = [\n  { title: 'Full Name', width: 100, dataIndex: 'name', key: 'name', fixed: 'left' },\n  { title: 'Age', width: 100, dataIndex: 'age', key: 'age', fixed: 'left' },\n  { title: 'Column 1', dataIndex: 'address', key: '1' },\n  { title: 'Column 2', dataIndex: 'address', key: '2' },\n  { title: 'Column 3', dataIndex: 'address', key: '3' },\n  { title: 'Column 4', dataIndex: 'address', key: '4' },\n  { title: 'Column 5', dataIndex: 'address', key: '5' },\n  { title: 'Column 6', dataIndex: 'address', key: '6' },\n  { title: 'Column 7', dataIndex: 'address', key: '7' },\n  { title: 'Column 8', dataIndex: 'address', key: '8' },\n  {\n    title: 'Action',\n    key: 'operation',\n    fixed: 'right',\n    width: 100,\n    render: () => <a href=\"#\">action</a>,\n  },\n];\n\nconst data = [{\n  key: '1',\n  name: 'John Brown',\n  age: 32,\n  address: 'New York Park',\n}, {\n  key: '2',\n  name: 'Jim Green',\n  age: 40,\n  address: 'London Park',\n}];\n\nReactDOM.render(<Table columns={columns} dataSource={data} scroll={{ x: 1300 }} />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Table } from 'antd';\n\nconst columns = [\n  { title: 'Full Name', width: 100, dataIndex: 'name', key: 'name', fixed: 'left' },\n  { title: 'Age', width: 100, dataIndex: 'age', key: 'age', fixed: 'left' },\n  { title: 'Column 1', dataIndex: 'address', key: '1' },\n  { title: 'Column 2', dataIndex: 'address', key: '2' },\n  { title: 'Column 3', dataIndex: 'address', key: '3' },\n  { title: 'Column 4', dataIndex: 'address', key: '4' },\n  { title: 'Column 5', dataIndex: 'address', key: '5' },\n  { title: 'Column 6', dataIndex: 'address', key: '6' },\n  { title: 'Column 7', dataIndex: 'address', key: '7' },\n  { title: 'Column 8', dataIndex: 'address', key: '8' },\n  {\n    title: 'Action',\n    key: 'operation',\n    fixed: 'right',\n    width: 100,\n    render: () => <a href=\"#\">action</a>,\n  },\n];\n\nconst data = [{\n  key: '1',\n  name: 'John Brown',\n  age: 32,\n  address: 'New York Park',\n}, {\n  key: '2',\n  name: 'Jim Green',\n  age: 40,\n  address: 'London Park',\n}];\n\nexport default function DemoComponent_table_fixed_columns() {\nreturn(<Table columns={columns} dataSource={data} scroll={{ x: 1300 }} />);\n};\n\nexport const demo = <DemoComponent_table_fixed_columns key=\"DemoComponent_table_fixed_columns\" />;\n"],"cssCodes":[]},{"name":"fixed_header","content":"---\norder: 17\ntitle:\n  en-US: Fixed Header\n  zh-CN: 固定表头\n---\n\n## zh-CN\n\n方便一页内展示大量数据。\n\n需要指定 column 的 `width` 属性，否则列头和内容可能不对齐。\n\n## en-US\n\nDisplay large amounts of data in scrollable view.\n\n> Specify the width of each column if header and cell do not align properly.\n\n````jsx\nimport { Table } from 'antd';\n\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n  width: 150,\n}, {\n  title: 'Age',\n  dataIndex: 'age',\n  width: 150,\n}, {\n  title: 'Address',\n  dataIndex: 'address',\n}];\n\nconst data = [];\nfor (let i = 0; i < 100; i++) {\n  data.push({\n    key: i,\n    name: `Edward King ${i}`,\n    age: 32,\n    address: `London, Park Lane no. ${i}`,\n  });\n}\n\nReactDOM.render(\n  <Table columns={columns} dataSource={data} pagination={{ pageSize: 50 }} scroll={{ y: 240 }} />\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Table } from 'antd';\n\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n  width: 150,\n}, {\n  title: 'Age',\n  dataIndex: 'age',\n  width: 150,\n}, {\n  title: 'Address',\n  dataIndex: 'address',\n}];\n\nconst data = [];\nfor (let i = 0; i < 100; i++) {\n  data.push({\n    key: i,\n    name: `Edward King ${i}`,\n    age: 32,\n    address: `London, Park Lane no. ${i}`,\n  });\n}\n\nexport default function DemoComponent_table_fixed_header() {\nreturn(\n  <Table columns={columns} dataSource={data} pagination={{ pageSize: 50 }} scroll={{ y: 240 }} />\n);\n};\n\nexport const demo = <DemoComponent_table_fixed_header key=\"DemoComponent_table_fixed_header\" />;\n"],"cssCodes":[]},{"name":"grouping_columns","content":"---\norder: 21\ntitle:\n  en-US: Grouping table head\n  zh-CN: 表头分组\n---\n\n## zh-CN\n\n`columns[n]` 可以内嵌 `children`，以渲染分组表头。\n\n## en-US\n\nGroup table head with `columns[n].children`.\n\n```jsx\nimport { Table } from 'antd';\n\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n  key: 'name',\n  width: 100,\n  fixed: 'left',\n  filters: [{\n    text: 'Joe',\n    value: 'Joe',\n  }, {\n    text: 'John',\n    value: 'John',\n  }],\n  onFilter: (value, record) => record.name.indexOf(value) === 0,\n}, {\n  title: 'Other',\n  children: [{\n    title: 'Age',\n    dataIndex: 'age',\n    key: 'age',\n    width: 200,\n    sorter: (a, b) => a.age - b.age,\n  }, {\n    title: 'Address',\n    children: [{\n      title: 'Street',\n      dataIndex: 'street',\n      key: 'street',\n      width: 200,\n    }, {\n      title: 'Block',\n      children: [{\n        title: 'Building',\n        dataIndex: 'building',\n        key: 'building',\n        width: 100,\n      }, {\n        title: 'Door No.',\n        dataIndex: 'number',\n        key: 'number',\n        width: 100,\n      }],\n    }],\n  }],\n}, {\n  title: 'Company',\n  children: [{\n    title: 'Company Address',\n    dataIndex: 'companyAddress',\n    key: 'companyAddress',\n  }, {\n    title: 'Company Name',\n    dataIndex: 'companyName',\n    key: 'companyName',\n  }],\n}, {\n  title: 'Gender',\n  dataIndex: 'gender',\n  key: 'gender',\n  width: 60,\n  fixed: 'right',\n}];\n\nconst data = [];\nfor (let i = 0; i < 100; i++) {\n  data.push({\n    key: i,\n    name: 'John Brown',\n    age: i + 1,\n    street: 'Lake Park',\n    building: 'C',\n    number: 2035,\n    companyAddress: 'Lake Street 42',\n    companyName: 'SoftLake Co',\n    gender: 'M',\n  });\n}\n\nReactDOM.render(\n  <Table\n    columns={columns}\n    dataSource={data}\n    bordered\n    size=\"middle\"\n    scroll={{ x: '130%', y: 240 }}\n  />\n, mountNode);\n```\n","jsCodes":[],"cssCodes":[]},{"name":"head","content":"---\norder: 7\ntitle:\n  en-US: Filter and sorter\n  zh-CN: 筛选和排序\n---\n\n## zh-CN\n\n对某一列数据进行筛选，使用列的 `filters` 属性来指定需要筛选菜单的列，`onFilter` 用于筛选当前数据，`filterMultiple` 用于指定多选和单选。\n\n对某一列数据进行排序，通过指定列的 `sorter` 函数即可启动排序按钮。`sorter: function(a, b) { ... }`， a、b 为比较的两个列数据。\n\n## en-US\n\nUse `filters` to generate filter menu in columns, `onFilter` to determine filtered result, and `filterMultiple` to indicate whether it's multiple or single selection.\n\nUse `sorter` to make a column sortable. `sorter` can be a function `function(a, b) { ... }` for sorting data locally.\n\n````jsx\nimport { Table } from 'antd';\n\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n  filters: [{\n    text: 'Joe',\n    value: 'Joe',\n  }, {\n    text: 'Jim',\n    value: 'Jim',\n  }, {\n    text: 'Submenu',\n    value: 'Submenu',\n    children: [{\n      text: 'Green',\n      value: 'Green',\n    }, {\n      text: 'Black',\n      value: 'Black',\n    }],\n  }],\n  // specify the condition of filtering result\n  // here is that finding the name started with `value`\n  onFilter: (value, record) => record.name.indexOf(value) === 0,\n  sorter: (a, b) => a.name.length - b.name.length,\n}, {\n  title: 'Age',\n  dataIndex: 'age',\n  sorter: (a, b) => a.age - b.age,\n}, {\n  title: 'Address',\n  dataIndex: 'address',\n  filters: [{\n    text: 'London',\n    value: 'London',\n  }, {\n    text: 'New York',\n    value: 'New York',\n  }],\n  filterMultiple: false,\n  onFilter: (value, record) => record.address.indexOf(value) === 0,\n  sorter: (a, b) => a.address.length - b.address.length,\n}];\n\nconst data = [{\n  key: '1',\n  name: 'John Brown',\n  age: 32,\n  address: 'New York No. 1 Lake Park',\n}, {\n  key: '2',\n  name: 'Jim Green',\n  age: 42,\n  address: 'London No. 1 Lake Park',\n}, {\n  key: '3',\n  name: 'Joe Black',\n  age: 32,\n  address: 'Sidney No. 1 Lake Park',\n}, {\n  key: '4',\n  name: 'Jim Red',\n  age: 32,\n  address: 'London No. 2 Lake Park',\n}];\n\nfunction onChange(pagination, filters, sorter) {\n  console.log('params', pagination, filters, sorter);\n}\n\nReactDOM.render(<Table columns={columns} dataSource={data} onChange={onChange} />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Table } from 'antd';\n\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n  filters: [{\n    text: 'Joe',\n    value: 'Joe',\n  }, {\n    text: 'Jim',\n    value: 'Jim',\n  }, {\n    text: 'Submenu',\n    value: 'Submenu',\n    children: [{\n      text: 'Green',\n      value: 'Green',\n    }, {\n      text: 'Black',\n      value: 'Black',\n    }],\n  }],\n  // specify the condition of filtering result\n  // here is that finding the name started with `value`\n  onFilter: (value, record) => record.name.indexOf(value) === 0,\n  sorter: (a, b) => a.name.length - b.name.length,\n}, {\n  title: 'Age',\n  dataIndex: 'age',\n  sorter: (a, b) => a.age - b.age,\n}, {\n  title: 'Address',\n  dataIndex: 'address',\n  filters: [{\n    text: 'London',\n    value: 'London',\n  }, {\n    text: 'New York',\n    value: 'New York',\n  }],\n  filterMultiple: false,\n  onFilter: (value, record) => record.address.indexOf(value) === 0,\n  sorter: (a, b) => a.address.length - b.address.length,\n}];\n\nconst data = [{\n  key: '1',\n  name: 'John Brown',\n  age: 32,\n  address: 'New York No. 1 Lake Park',\n}, {\n  key: '2',\n  name: 'Jim Green',\n  age: 42,\n  address: 'London No. 1 Lake Park',\n}, {\n  key: '3',\n  name: 'Joe Black',\n  age: 32,\n  address: 'Sidney No. 1 Lake Park',\n}, {\n  key: '4',\n  name: 'Jim Red',\n  age: 32,\n  address: 'London No. 2 Lake Park',\n}];\n\nfunction onChange(pagination, filters, sorter) {\n  console.log('params', pagination, filters, sorter);\n}\n\nexport default function DemoComponent_table_head() {\nreturn(<Table columns={columns} dataSource={data} onChange={onChange} />);\n};\n\nexport const demo = <DemoComponent_table_head key=\"DemoComponent_table_head\" />;\n"],"cssCodes":[]},{"name":"jsx","content":"---\norder: 1\ntitle:\n  en-US: JSX style API\n  zh-CN: JSX 风格的 API\n---\n\n## zh-CN\n\n使用 JSX 风格的 API（2.5.0 以后引入）\n\n> 这个只是一个描述 `columns` 的语法糖，所以你不能用其他组件去包裹 `Column` 和 `ColumnGroup`。\n\n## en-US\n\nUsing JSX style API (introduced in 2.5.0)\n\n> Since this is just a syntax sugar for the prop `columns`, so that you can't compose `Column` and `ColumnGroup` with other Components.\n\n````jsx\nimport { Table, Icon } from 'antd';\n\nconst { Column, ColumnGroup } = Table;\n\nconst data = [{\n  key: '1',\n  firstName: 'John',\n  lastName: 'Brown',\n  age: 32,\n  address: 'New York No. 1 Lake Park',\n}, {\n  key: '2',\n  firstName: 'Jim',\n  lastName: 'Green',\n  age: 42,\n  address: 'London No. 1 Lake Park',\n}, {\n  key: '3',\n  firstName: 'Joe',\n  lastName: 'Black',\n  age: 32,\n  address: 'Sidney No. 1 Lake Park',\n}];\n\nReactDOM.render(\n  <Table dataSource={data}>\n    <ColumnGroup title=\"Name\">\n      <Column\n        title=\"First Name\"\n        dataIndex=\"firstName\"\n        key=\"firstName\"\n      />\n      <Column\n        title=\"Last Name\"\n        dataIndex=\"lastName\"\n        key=\"lastName\"\n      />\n    </ColumnGroup>\n    <Column\n      title=\"Age\"\n      dataIndex=\"age\"\n      key=\"age\"\n    />\n    <Column\n      title=\"Address\"\n      dataIndex=\"address\"\n      key=\"address\"\n    />\n    <Column\n      title=\"Action\"\n      key=\"action\"\n      render={(text, record) => (\n        <span>\n          <a href=\"#\">Action 一 {record.name}</a>\n          <span className=\"ant-divider\" />\n          <a href=\"#\">Delete</a>\n          <span className=\"ant-divider\" />\n          <a href=\"#\" className=\"ant-dropdown-link\">\n            More actions <Icon type=\"down\" />\n          </a>\n        </span>\n      )}\n    />\n  </Table>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Table, Icon } from 'antd';\n\nconst { Column, ColumnGroup } = Table;\n\nconst data = [{\n  key: '1',\n  firstName: 'John',\n  lastName: 'Brown',\n  age: 32,\n  address: 'New York No. 1 Lake Park',\n}, {\n  key: '2',\n  firstName: 'Jim',\n  lastName: 'Green',\n  age: 42,\n  address: 'London No. 1 Lake Park',\n}, {\n  key: '3',\n  firstName: 'Joe',\n  lastName: 'Black',\n  age: 32,\n  address: 'Sidney No. 1 Lake Park',\n}];\n\nexport default function DemoComponent_table_jsx() {\nreturn(\n  <Table dataSource={data}>\n    <ColumnGroup title=\"Name\">\n      <Column\n        title=\"First Name\"\n        dataIndex=\"firstName\"\n        key=\"firstName\"\n      />\n      <Column\n        title=\"Last Name\"\n        dataIndex=\"lastName\"\n        key=\"lastName\"\n      />\n    </ColumnGroup>\n    <Column\n      title=\"Age\"\n      dataIndex=\"age\"\n      key=\"age\"\n    />\n    <Column\n      title=\"Address\"\n      dataIndex=\"address\"\n      key=\"address\"\n    />\n    <Column\n      title=\"Action\"\n      key=\"action\"\n      render={(text, record) => (\n        <span>\n          <a href=\"#\">Action 一 {record.name}</a>\n          <span className=\"ant-divider\" />\n          <a href=\"#\">Delete</a>\n          <span className=\"ant-divider\" />\n          <a href=\"#\" className=\"ant-dropdown-link\">\n            More actions <Icon type=\"down\" />\n          </a>\n        </span>\n      )}\n    />\n  </Table>\n);\n};\n\nexport const demo = <DemoComponent_table_jsx key=\"DemoComponent_table_jsx\" />;\n"],"cssCodes":[]},{"name":"nested_table","content":"---\norder: 24\ntitle:\n  en-US: Nested tables\n  zh-CN: 嵌套子表格\n---\n\n## zh-CN\n\n展示每行数据更详细的信息。\n\n## en-US\n\nShowing more detailed info of every row.\n\n````jsx\n\nimport { Table, Badge, Menu, Dropdown, Icon } from 'antd';\n\nconst menu = (\n  <Menu>\n    <Menu.Item>\n      Action 1\n    </Menu.Item>\n    <Menu.Item>\n      Action 2\n    </Menu.Item>\n  </Menu>\n);\n\nfunction NestedTable() {\n  const expandedRowRender = () => {\n    const columns = [\n      { title: 'Date', dataIndex: 'date', key: 'date' },\n      { title: 'Name', dataIndex: 'name', key: 'name' },\n      { title: 'Status', key: 'state', render: () => <span><Badge status=\"success\" />Finished</span> },\n      { title: 'Upgrade Status', dataIndex: 'upgradeNum', key: 'upgradeNum' },\n      {\n        title: 'Action',\n        dataIndex: 'operation',\n        key: 'operation',\n        render: () => (\n          <span className={'table-operation'}>\n            <a href=\"#\">Pause</a>\n            <a href=\"#\">Stop</a>\n            <Dropdown overlay={menu}>\n              <a href=\"#\">\n                More <Icon type=\"down\" />\n              </a>\n            </Dropdown>\n          </span>\n        ),\n      },\n    ];\n\n    const data = [];\n    for (let i = 0; i < 3; ++i) {\n      data.push({\n        key: i,\n        date: '2014-12-24 23:12:00',\n        name: 'This is production name',\n        upgradeNum: 'Upgraded: 56',\n      });\n    }\n    return (\n      <Table\n        columns={columns}\n        dataSource={data}\n        pagination={false}\n      />\n    );\n  };\n\n  const columns = [\n    { title: 'Name', dataIndex: 'name', key: 'name' },\n    { title: 'Platform', dataIndex: 'platform', key: 'platform' },\n    { title: 'Version', dataIndex: 'version', key: 'version' },\n    { title: 'Upgraded', dataIndex: 'upgradeNum', key: 'upgradeNum' },\n    { title: 'Creator', dataIndex: 'creator', key: 'creator' },\n    { title: 'Date', dataIndex: 'createdAt', key: 'createdAt' },\n    { title: 'Action', key: 'operation', render: () => <a href=\"#\">Publish</a> },\n  ];\n\n  const data = [];\n  for (let i = 0; i < 3; ++i) {\n    data.push({\n      key: i,\n      name: 'Screem',\n      platform: 'iOS',\n      version: '10.3.4.5654',\n      upgradeNum: 500,\n      creator: 'Jack',\n      createdAt: '2014-12-24 23:12:00',\n    });\n  }\n\n  return (\n    <Table\n      className=\"components-table-demo-nested\"\n      columns={columns}\n      expandedRowRender={expandedRowRender}\n      dataSource={data}\n    />\n  );\n}\n\nReactDOM.render(<NestedTable />, mountNode);\n````\n\n````css\n.components-table-demo-nested .ant-table-expanded-row > td:last-child {\n  padding: 0 48px 0 8px;\n}\n\n.components-table-demo-nested .ant-table-expanded-row > td:last-child .ant-table-thead th {\n  border-bottom: 1px solid #e9e9e9;\n}\n\n.components-table-demo-nested .ant-table-expanded-row > td:last-child .ant-table-thead th:first-child {\n  padding-left: 0;\n}\n\n.components-table-demo-nested .ant-table-expanded-row > td:last-child .ant-table-row td:first-child {\n  padding-left: 0;\n}\n\n.components-table-demo-nested .ant-table-expanded-row .ant-table-row:last-child td {\n  border: none;\n}\n\n.components-table-demo-nested .ant-table-expanded-row .ant-table-thead > tr > th {\n  background: none;\n}\n\n.components-table-demo-nested .table-operation a:not(:last-child) {\n  margin-right: 24px;\n}\n````\n","jsCodes":["import React from 'react';\n\nimport { Table, Badge, Menu, Dropdown, Icon } from 'antd';\n\nconst menu = (\n  <Menu>\n    <Menu.Item>\n      Action 1\n    </Menu.Item>\n    <Menu.Item>\n      Action 2\n    </Menu.Item>\n  </Menu>\n);\n\nfunction NestedTable() {\n  const expandedRowRender = () => {\n    const columns = [\n      { title: 'Date', dataIndex: 'date', key: 'date' },\n      { title: 'Name', dataIndex: 'name', key: 'name' },\n      { title: 'Status', key: 'state', render: () => <span><Badge status=\"success\" />Finished</span> },\n      { title: 'Upgrade Status', dataIndex: 'upgradeNum', key: 'upgradeNum' },\n      {\n        title: 'Action',\n        dataIndex: 'operation',\n        key: 'operation',\n        render: () => (\n          <span className={'table-operation'}>\n            <a href=\"#\">Pause</a>\n            <a href=\"#\">Stop</a>\n            <Dropdown overlay={menu}>\n              <a href=\"#\">\n                More <Icon type=\"down\" />\n              </a>\n            </Dropdown>\n          </span>\n        ),\n      },\n    ];\n\n    const data = [];\n    for (let i = 0; i < 3; ++i) {\n      data.push({\n        key: i,\n        date: '2014-12-24 23:12:00',\n        name: 'This is production name',\n        upgradeNum: 'Upgraded: 56',\n      });\n    }\n    return (\n      <Table\n        columns={columns}\n        dataSource={data}\n        pagination={false}\n      />\n    );\n  };\n\n  const columns = [\n    { title: 'Name', dataIndex: 'name', key: 'name' },\n    { title: 'Platform', dataIndex: 'platform', key: 'platform' },\n    { title: 'Version', dataIndex: 'version', key: 'version' },\n    { title: 'Upgraded', dataIndex: 'upgradeNum', key: 'upgradeNum' },\n    { title: 'Creator', dataIndex: 'creator', key: 'creator' },\n    { title: 'Date', dataIndex: 'createdAt', key: 'createdAt' },\n    { title: 'Action', key: 'operation', render: () => <a href=\"#\">Publish</a> },\n  ];\n\n  const data = [];\n  for (let i = 0; i < 3; ++i) {\n    data.push({\n      key: i,\n      name: 'Screem',\n      platform: 'iOS',\n      version: '10.3.4.5654',\n      upgradeNum: 500,\n      creator: 'Jack',\n      createdAt: '2014-12-24 23:12:00',\n    });\n  }\n\n  return (\n    <Table\n      className=\"components-table-demo-nested\"\n      columns={columns}\n      expandedRowRender={expandedRowRender}\n      dataSource={data}\n    />\n  );\n}\n\nexport default function DemoComponent_table_nested_table() {\nreturn(<NestedTable />);\n};\n\nexport const demo = <DemoComponent_table_nested_table key=\"DemoComponent_table_nested_table\" />;\n"],"cssCodes":[".components-table-demo-nested .ant-table-expanded-row > td:last-child {\n  padding: 0 48px 0 8px;\n}\n\n.components-table-demo-nested .ant-table-expanded-row > td:last-child .ant-table-thead th {\n  border-bottom: 1px solid #e9e9e9;\n}\n\n.components-table-demo-nested .ant-table-expanded-row > td:last-child .ant-table-thead th:first-child {\n  padding-left: 0;\n}\n\n.components-table-demo-nested .ant-table-expanded-row > td:last-child .ant-table-row td:first-child {\n  padding-left: 0;\n}\n\n.components-table-demo-nested .ant-table-expanded-row .ant-table-row:last-child td {\n  border: none;\n}\n\n.components-table-demo-nested .ant-table-expanded-row .ant-table-thead > tr > th {\n  background: none;\n}\n\n.components-table-demo-nested .table-operation a:not(:last-child) {\n  margin-right: 24px;\n}\n"]},{"name":"reset_filter","content":"---\norder: 7\ntitle:\n  en-US: Reset filters and sorters\n  zh-CN: 可控的筛选和排序\n---\n\n## zh-CN\n\n使用受控属性对筛选和排序状态进行控制。\n\n> 1. columns 中定义了 filteredValue 和 sortOrder 属性即视为受控模式。\n> 2. 只支持同时对一列进行排序，请保证只有一列的 sortOrder 属性是生效的。\n> 3. 务必指定 `column.key`。\n\n## en-US\n\nControl filters and sorters by `filteredValue` and `sortOrder`.\n\n> 1. Defining `filteredValue` or `sortOrder` means that it is in the controlled mode.\n> 2. Make sure `sortOrder` is assigned for only one column.\n> 3. `column.key` is required.\n\n````jsx\nimport { Table, Button } from 'antd';\n\nconst data = [{\n  key: '1',\n  name: 'John Brown',\n  age: 32,\n  address: 'New York No. 1 Lake Park',\n}, {\n  key: '2',\n  name: 'Jim Green',\n  age: 42,\n  address: 'London No. 1 Lake Park',\n}, {\n  key: '3',\n  name: 'Joe Black',\n  age: 32,\n  address: 'Sidney No. 1 Lake Park',\n}, {\n  key: '4',\n  name: 'Jim Red',\n  age: 32,\n  address: 'London No. 2 Lake Park',\n}];\n\nclass App extends React.Component {\n  state = {\n    filteredInfo: null,\n    sortedInfo: null,\n  };\n  handleChange = (pagination, filters, sorter) => {\n    console.log('Various parameters', pagination, filters, sorter);\n    this.setState({\n      filteredInfo: filters,\n      sortedInfo: sorter,\n    });\n  }\n  clearFilters = () => {\n    this.setState({ filteredInfo: null });\n  }\n  clearAll = () => {\n    this.setState({\n      filteredInfo: null,\n      sortedInfo: null,\n    });\n  }\n  setAgeSort = () => {\n    this.setState({\n      sortedInfo: {\n        order: 'descend',\n        columnKey: 'age',\n      },\n    });\n  }\n  render() {\n    let { sortedInfo, filteredInfo } = this.state;\n    sortedInfo = sortedInfo || {};\n    filteredInfo = filteredInfo || {};\n    const columns = [{\n      title: 'Name',\n      dataIndex: 'name',\n      key: 'name',\n      filters: [\n        { text: 'Joe', value: 'Joe' },\n        { text: 'Jim', value: 'Jim' },\n      ],\n      filteredValue: filteredInfo.name || null,\n      onFilter: (value, record) => record.name.includes(value),\n      sorter: (a, b) => a.name.length - b.name.length,\n      sortOrder: sortedInfo.columnKey === 'name' && sortedInfo.order,\n    }, {\n      title: 'Age',\n      dataIndex: 'age',\n      key: 'age',\n      sorter: (a, b) => a.age - b.age,\n      sortOrder: sortedInfo.columnKey === 'age' && sortedInfo.order,\n    }, {\n      title: 'Address',\n      dataIndex: 'address',\n      key: 'address',\n      filters: [\n        { text: 'London', value: 'London' },\n        { text: 'New York', value: 'New York' },\n      ],\n      filteredValue: filteredInfo.address || null,\n      onFilter: (value, record) => record.address.includes(value),\n      sorter: (a, b) => a.address.length - b.address.length,\n      sortOrder: sortedInfo.columnKey === 'address' && sortedInfo.order,\n    }];\n    return (\n      <div>\n        <div className=\"table-operations\">\n          <Button onClick={this.setAgeSort}>Sort age</Button>\n          <Button onClick={this.clearFilters}>Clear filters</Button>\n          <Button onClick={this.clearAll}>Clear filters and sorters</Button>\n        </div>\n        <Table columns={columns} dataSource={data} onChange={this.handleChange} />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n````\n\n````css\n.table-operations {\n  margin-bottom: 16px;\n}\n\n.table-operations > button {\n  margin-right: 8px;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Table, Button } from 'antd';\n\nconst data = [{\n  key: '1',\n  name: 'John Brown',\n  age: 32,\n  address: 'New York No. 1 Lake Park',\n}, {\n  key: '2',\n  name: 'Jim Green',\n  age: 42,\n  address: 'London No. 1 Lake Park',\n}, {\n  key: '3',\n  name: 'Joe Black',\n  age: 32,\n  address: 'Sidney No. 1 Lake Park',\n}, {\n  key: '4',\n  name: 'Jim Red',\n  age: 32,\n  address: 'London No. 2 Lake Park',\n}];\n\nclass App extends React.Component {\n  state = {\n    filteredInfo: null,\n    sortedInfo: null,\n  };\n  handleChange = (pagination, filters, sorter) => {\n    console.log('Various parameters', pagination, filters, sorter);\n    this.setState({\n      filteredInfo: filters,\n      sortedInfo: sorter,\n    });\n  }\n  clearFilters = () => {\n    this.setState({ filteredInfo: null });\n  }\n  clearAll = () => {\n    this.setState({\n      filteredInfo: null,\n      sortedInfo: null,\n    });\n  }\n  setAgeSort = () => {\n    this.setState({\n      sortedInfo: {\n        order: 'descend',\n        columnKey: 'age',\n      },\n    });\n  }\n  render() {\n    let { sortedInfo, filteredInfo } = this.state;\n    sortedInfo = sortedInfo || {};\n    filteredInfo = filteredInfo || {};\n    const columns = [{\n      title: 'Name',\n      dataIndex: 'name',\n      key: 'name',\n      filters: [\n        { text: 'Joe', value: 'Joe' },\n        { text: 'Jim', value: 'Jim' },\n      ],\n      filteredValue: filteredInfo.name || null,\n      onFilter: (value, record) => record.name.includes(value),\n      sorter: (a, b) => a.name.length - b.name.length,\n      sortOrder: sortedInfo.columnKey === 'name' && sortedInfo.order,\n    }, {\n      title: 'Age',\n      dataIndex: 'age',\n      key: 'age',\n      sorter: (a, b) => a.age - b.age,\n      sortOrder: sortedInfo.columnKey === 'age' && sortedInfo.order,\n    }, {\n      title: 'Address',\n      dataIndex: 'address',\n      key: 'address',\n      filters: [\n        { text: 'London', value: 'London' },\n        { text: 'New York', value: 'New York' },\n      ],\n      filteredValue: filteredInfo.address || null,\n      onFilter: (value, record) => record.address.includes(value),\n      sorter: (a, b) => a.address.length - b.address.length,\n      sortOrder: sortedInfo.columnKey === 'address' && sortedInfo.order,\n    }];\n    return (\n      <div>\n        <div className=\"table-operations\">\n          <Button onClick={this.setAgeSort}>Sort age</Button>\n          <Button onClick={this.clearFilters}>Clear filters</Button>\n          <Button onClick={this.clearAll}>Clear filters and sorters</Button>\n        </div>\n        <Table columns={columns} dataSource={data} onChange={this.handleChange} />\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_table_reset_filter() {\nreturn(<App />);\n};\n\nexport const demo = <DemoComponent_table_reset_filter key=\"DemoComponent_table_reset_filter\" />;\n"],"cssCodes":[".table-operations {\n  margin-bottom: 16px;\n}\n\n.table-operations > button {\n  margin-right: 8px;\n}\n"]},{"name":"row_selection_and_operation","content":"---\norder: 3\ntitle:\n  en-US: Selection and operation\n  zh-CN: 选择和操作\n---\n\n## zh-CN\n\n选择后进行操作，完成后清空选择，通过 `rowSelection.selectedRowKeys` 来控制选中项。\n\n## en-US\n\nTo perform operations and clear selections after selecting some rows, use `rowSelection.selectedRowKeys` to control selected rows.\n\n\n````jsx\nimport { Table, Button } from 'antd';\n\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n}, {\n  title: 'Age',\n  dataIndex: 'age',\n}, {\n  title: 'Address',\n  dataIndex: 'address',\n}];\n\nconst data = [];\nfor (let i = 0; i < 46; i++) {\n  data.push({\n    key: i,\n    name: `Edward King ${i}`,\n    age: 32,\n    address: `London, Park Lane no. ${i}`,\n  });\n}\n\nclass App extends React.Component {\n  state = {\n    selectedRowKeys: [],  // Check here to configure the default column\n    loading: false,\n  };\n  start = () => {\n    this.setState({ loading: true });\n    // ajax request after empty completing\n    setTimeout(() => {\n      this.setState({\n        selectedRowKeys: [],\n        loading: false,\n      });\n    }, 1000);\n  }\n  onSelectChange = (selectedRowKeys) => {\n    console.log('selectedRowKeys changed: ', selectedRowKeys);\n    this.setState({ selectedRowKeys });\n  }\n  render() {\n    const { loading, selectedRowKeys } = this.state;\n    const rowSelection = {\n      selectedRowKeys,\n      onChange: this.onSelectChange,\n    };\n    const hasSelected = selectedRowKeys.length > 0;\n    return (\n      <div>\n        <div style={{ marginBottom: 16 }}>\n          <Button\n            type=\"primary\"\n            onClick={this.start}\n            disabled={!hasSelected}\n            loading={loading}\n          >\n            Reload\n          </Button>\n          <span style={{ marginLeft: 8 }}>\n            {hasSelected ? `Selected ${selectedRowKeys.length} items` : ''}\n          </span>\n        </div>\n        <Table rowSelection={rowSelection} columns={columns} dataSource={data} />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Table, Button } from 'antd';\n\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n}, {\n  title: 'Age',\n  dataIndex: 'age',\n}, {\n  title: 'Address',\n  dataIndex: 'address',\n}];\n\nconst data = [];\nfor (let i = 0; i < 46; i++) {\n  data.push({\n    key: i,\n    name: `Edward King ${i}`,\n    age: 32,\n    address: `London, Park Lane no. ${i}`,\n  });\n}\n\nclass App extends React.Component {\n  state = {\n    selectedRowKeys: [],  // Check here to configure the default column\n    loading: false,\n  };\n  start = () => {\n    this.setState({ loading: true });\n    // ajax request after empty completing\n    setTimeout(() => {\n      this.setState({\n        selectedRowKeys: [],\n        loading: false,\n      });\n    }, 1000);\n  }\n  onSelectChange = (selectedRowKeys) => {\n    console.log('selectedRowKeys changed: ', selectedRowKeys);\n    this.setState({ selectedRowKeys });\n  }\n  render() {\n    const { loading, selectedRowKeys } = this.state;\n    const rowSelection = {\n      selectedRowKeys,\n      onChange: this.onSelectChange,\n    };\n    const hasSelected = selectedRowKeys.length > 0;\n    return (\n      <div>\n        <div style={{ marginBottom: 16 }}>\n          <Button\n            type=\"primary\"\n            onClick={this.start}\n            disabled={!hasSelected}\n            loading={loading}\n          >\n            Reload\n          </Button>\n          <span style={{ marginLeft: 8 }}>\n            {hasSelected ? `Selected ${selectedRowKeys.length} items` : ''}\n          </span>\n        </div>\n        <Table rowSelection={rowSelection} columns={columns} dataSource={data} />\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_table_row_selection_and_operation() {\nreturn(<App />);\n};\n\nexport const demo = <DemoComponent_table_row_selection_and_operation key=\"DemoComponent_table_row_selection_and_operation\" />;\n"],"cssCodes":[]},{"name":"row_selection_custom","content":"---\norder: 4\ntitle:\n  en-US: Custom selection\n  zh-CN: 自定义选择项\n---\n\n## zh-CN\n\n通过 `rowSelection.selections` 自定义选择项，默认不显示下拉选项，设为 `true` 时显示默认选择项。\n\n## en-US\n\nUse `rowSelection.selections` custom selections, default no select dropdown, show default selections via setting to `true`.\n\n\n````jsx\nimport { Table } from 'antd';\n\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n}, {\n  title: 'Age',\n  dataIndex: 'age',\n}, {\n  title: 'Address',\n  dataIndex: 'address',\n}];\n\nconst data = [];\nfor (let i = 0; i < 46; i++) {\n  data.push({\n    key: i,\n    name: `Edward King ${i}`,\n    age: 32,\n    address: `London, Park Lane no. ${i}`,\n  });\n}\n\nclass App extends React.Component {\n  state = {\n    selectedRowKeys: [],  // Check here to configure the default column\n  };\n  onSelectChange = (selectedRowKeys) => {\n    console.log('selectedRowKeys changed: ', selectedRowKeys);\n    this.setState({ selectedRowKeys });\n  }\n  render() {\n    const { selectedRowKeys } = this.state;\n    const rowSelection = {\n      selectedRowKeys,\n      onChange: this.onSelectChange,\n      selections: [{\n        key: 'all-data',\n        text: 'Select All Data',\n        onSelect: () => {\n          this.setState({\n            selectedRowKeys: [...Array(46).keys()],  // 0...45\n          });\n        },\n      }, {\n        key: 'odd',\n        text: 'Select Odd Row',\n        onSelect: (changableRowKeys) => {\n          let newSelectedRowKeys = [];\n          newSelectedRowKeys = changableRowKeys.filter((key, index) => {\n            if (index % 2 !== 0) {\n              return false;\n            }\n            return true;\n          });\n          this.setState({ selectedRowKeys: newSelectedRowKeys });\n        },\n      }, {\n        key: 'even',\n        text: 'Select Even Row',\n        onSelect: (changableRowKeys) => {\n          let newSelectedRowKeys = [];\n          newSelectedRowKeys = changableRowKeys.filter((key, index) => {\n            if (index % 2 !== 0) {\n              return true;\n            }\n            return false;\n          });\n          this.setState({ selectedRowKeys: newSelectedRowKeys });\n        },\n      }],\n      onSelection: this.onSelection,\n    };\n    return (\n      <Table rowSelection={rowSelection} columns={columns} dataSource={data} />\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Table } from 'antd';\n\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n}, {\n  title: 'Age',\n  dataIndex: 'age',\n}, {\n  title: 'Address',\n  dataIndex: 'address',\n}];\n\nconst data = [];\nfor (let i = 0; i < 46; i++) {\n  data.push({\n    key: i,\n    name: `Edward King ${i}`,\n    age: 32,\n    address: `London, Park Lane no. ${i}`,\n  });\n}\n\nclass App extends React.Component {\n  state = {\n    selectedRowKeys: [],  // Check here to configure the default column\n  };\n  onSelectChange = (selectedRowKeys) => {\n    console.log('selectedRowKeys changed: ', selectedRowKeys);\n    this.setState({ selectedRowKeys });\n  }\n  render() {\n    const { selectedRowKeys } = this.state;\n    const rowSelection = {\n      selectedRowKeys,\n      onChange: this.onSelectChange,\n      selections: [{\n        key: 'all-data',\n        text: 'Select All Data',\n        onSelect: () => {\n          this.setState({\n            selectedRowKeys: [...Array(46).keys()],  // 0...45\n          });\n        },\n      }, {\n        key: 'odd',\n        text: 'Select Odd Row',\n        onSelect: (changableRowKeys) => {\n          let newSelectedRowKeys = [];\n          newSelectedRowKeys = changableRowKeys.filter((key, index) => {\n            if (index % 2 !== 0) {\n              return false;\n            }\n            return true;\n          });\n          this.setState({ selectedRowKeys: newSelectedRowKeys });\n        },\n      }, {\n        key: 'even',\n        text: 'Select Even Row',\n        onSelect: (changableRowKeys) => {\n          let newSelectedRowKeys = [];\n          newSelectedRowKeys = changableRowKeys.filter((key, index) => {\n            if (index % 2 !== 0) {\n              return true;\n            }\n            return false;\n          });\n          this.setState({ selectedRowKeys: newSelectedRowKeys });\n        },\n      }],\n      onSelection: this.onSelection,\n    };\n    return (\n      <Table rowSelection={rowSelection} columns={columns} dataSource={data} />\n    );\n  }\n}\n\nexport default function DemoComponent_table_row_selection_custom() {\nreturn(<App />);\n};\n\nexport const demo = <DemoComponent_table_row_selection_custom key=\"DemoComponent_table_row_selection_custom\" />;\n"],"cssCodes":[]},{"name":"row_selection","content":"---\norder: 2\ntitle:\n  en-US: selection\n  zh-CN: 可选择\n---\n\n## zh-CN\n\n第一列是联动的选择框。\n\n## en-US\n\nRows can be selectable by making first column as a selectable column.\n\n````jsx\nimport { Table } from 'antd';\n\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n  render: text => <a href=\"#\">{text}</a>,\n}, {\n  title: 'Age',\n  dataIndex: 'age',\n}, {\n  title: 'Address',\n  dataIndex: 'address',\n}];\nconst data = [{\n  key: '1',\n  name: 'John Brown',\n  age: 32,\n  address: 'New York No. 1 Lake Park',\n}, {\n  key: '2',\n  name: 'Jim Green',\n  age: 42,\n  address: 'London No. 1 Lake Park',\n}, {\n  key: '3',\n  name: 'Joe Black',\n  age: 32,\n  address: 'Sidney No. 1 Lake Park',\n}, {\n  key: '4',\n  name: 'Disabled User',\n  age: 99,\n  address: 'Sidney No. 1 Lake Park',\n}];\n\n// rowSelection object indicates the need for row selection\nconst rowSelection = {\n  onChange: (selectedRowKeys, selectedRows) => {\n    console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows);\n  },\n  getCheckboxProps: record => ({\n    disabled: record.name === 'Disabled User',    // Column configuration not to be checked\n  }),\n};\n\nReactDOM.render(\n  <Table rowSelection={rowSelection} columns={columns} dataSource={data} />\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Table } from 'antd';\n\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n  render: text => <a href=\"#\">{text}</a>,\n}, {\n  title: 'Age',\n  dataIndex: 'age',\n}, {\n  title: 'Address',\n  dataIndex: 'address',\n}];\nconst data = [{\n  key: '1',\n  name: 'John Brown',\n  age: 32,\n  address: 'New York No. 1 Lake Park',\n}, {\n  key: '2',\n  name: 'Jim Green',\n  age: 42,\n  address: 'London No. 1 Lake Park',\n}, {\n  key: '3',\n  name: 'Joe Black',\n  age: 32,\n  address: 'Sidney No. 1 Lake Park',\n}, {\n  key: '4',\n  name: 'Disabled User',\n  age: 99,\n  address: 'Sidney No. 1 Lake Park',\n}];\n\n// rowSelection object indicates the need for row selection\nconst rowSelection = {\n  onChange: (selectedRowKeys, selectedRows) => {\n    console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows);\n  },\n  getCheckboxProps: record => ({\n    disabled: record.name === 'Disabled User',    // Column configuration not to be checked\n  }),\n};\n\nexport default function DemoComponent_table_row_selection() {\nreturn(\n  <Table rowSelection={rowSelection} columns={columns} dataSource={data} />\n);\n};\n\nexport const demo = <DemoComponent_table_row_selection key=\"DemoComponent_table_row_selection\" />;\n"],"cssCodes":[]},{"name":"size","content":"---\norder: 10\ntitle:\n  en-US: size\n  zh-CN: 紧凑型\n---\n\n## zh-CN\n\n两种紧凑型的列表，小型列表只用于对话框内。\n\n## en-US\n\nTwo compacted table size: `middle` and `small`, `small` size is used in Modal only.\n\n````jsx\nimport { Table } from 'antd';\n\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n}, {\n  title: 'Age',\n  dataIndex: 'age',\n}, {\n  title: 'Address',\n  dataIndex: 'address',\n}];\nconst data = [{\n  key: '1',\n  name: 'John Brown',\n  age: 32,\n  address: 'New York No. 1 Lake Park',\n}, {\n  key: '2',\n  name: 'Jim Green',\n  age: 42,\n  address: 'London No. 1 Lake Park',\n}, {\n  key: '3',\n  name: 'Joe Black',\n  age: 32,\n  address: 'Sidney No. 1 Lake Park',\n}];\n\nReactDOM.render(\n  <div>\n    <h4>Middle size table</h4>\n    <Table columns={columns} dataSource={data} size=\"middle\" />\n    <h4>Small size table</h4>\n    <Table columns={columns} dataSource={data} size=\"small\" />\n  </div>\n, mountNode);\n````\n\n<style>#components-table-demo-size h4 { margin-bottom: 16px; }</style>\n","jsCodes":["import React from 'react';\nimport { Table } from 'antd';\n\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n}, {\n  title: 'Age',\n  dataIndex: 'age',\n}, {\n  title: 'Address',\n  dataIndex: 'address',\n}];\nconst data = [{\n  key: '1',\n  name: 'John Brown',\n  age: 32,\n  address: 'New York No. 1 Lake Park',\n}, {\n  key: '2',\n  name: 'Jim Green',\n  age: 42,\n  address: 'London No. 1 Lake Park',\n}, {\n  key: '3',\n  name: 'Joe Black',\n  age: 32,\n  address: 'Sidney No. 1 Lake Park',\n}];\n\nexport default function DemoComponent_table_size() {\nreturn(\n  <div>\n    <h4>Middle size table</h4>\n    <Table columns={columns} dataSource={data} size=\"middle\" />\n    <h4>Small size table</h4>\n    <Table columns={columns} dataSource={data} size=\"small\" />\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_table_size key=\"DemoComponent_table_size\" />;\n"],"cssCodes":[]}]},{"name":"tabs","demos":[{"name":"basic","content":"---\norder: 0\ntitle:\n  zh-CN: 基本\n  en-US: Basic\n---\n\n## zh-CN\n\n默认选中第一项。\n\n## en-US\n\nDefault activate first tab.\n\n````jsx\nimport { Tabs } from 'antd';\nconst TabPane = Tabs.TabPane;\n\nfunction callback(key) {\n  console.log(key);\n}\n\nReactDOM.render(\n  <Tabs defaultActiveKey=\"1\" onChange={callback}>\n    <TabPane tab=\"Tab 1\" key=\"1\">Content of Tab Pane 1</TabPane>\n    <TabPane tab=\"Tab 2\" key=\"2\">Content of Tab Pane 2</TabPane>\n    <TabPane tab=\"Tab 3\" key=\"3\">Content of Tab Pane 3</TabPane>\n  </Tabs>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Tabs } from 'antd';\nconst TabPane = Tabs.TabPane;\n\nfunction callback(key) {\n  console.log(key);\n}\n\nexport default function DemoComponent_tabs_basic() {\nreturn(\n  <Tabs defaultActiveKey=\"1\" onChange={callback}>\n    <TabPane tab=\"Tab 1\" key=\"1\">Content of Tab Pane 1</TabPane>\n    <TabPane tab=\"Tab 2\" key=\"2\">Content of Tab Pane 2</TabPane>\n    <TabPane tab=\"Tab 3\" key=\"3\">Content of Tab Pane 3</TabPane>\n  </Tabs>\n);\n};\n\nexport const demo = <DemoComponent_tabs_basic key=\"DemoComponent_tabs_basic\" />;\n"],"cssCodes":[]},{"name":"card_top","content":"---\norder: 10\ntitle:\n  zh-CN: 卡片式页签容器\n  en-US: Container of card type Tab\n---\n\n## zh-CN\n\n用于容器顶部，需要一点额外的样式覆盖。\n\n## en-US\n\nShould be used at the top of container, needs to override styles.\n\n````jsx\nimport { Tabs } from 'antd';\nconst TabPane = Tabs.TabPane;\n\nReactDOM.render(\n  <div className=\"card-container\">\n    <Tabs type=\"card\">\n      <TabPane tab=\"Tab Title 1\" key=\"1\">\n        <p>Content of Tab Pane 1</p>\n        <p>Content of Tab Pane 1</p>\n        <p>Content of Tab Pane 1</p>\n      </TabPane>\n      <TabPane tab=\"Tab Title 2\" key=\"2\">\n        <p>Content of Tab Pane 2</p>\n        <p>Content of Tab Pane 2</p>\n        <p>Content of Tab Pane 2</p>\n      </TabPane>\n      <TabPane tab=\"Tab Title 3\" key=\"3\">\n        <p>Content of Tab Pane 3</p>\n        <p>Content of Tab Pane 3</p>\n        <p>Content of Tab Pane 3</p>\n      </TabPane>\n    </Tabs>\n  </div>\n, mountNode);\n````\n\n````css\n.card-container > .ant-tabs-card > .ant-tabs-content {\n  height: 120px;\n  margin-top: -16px;\n}\n\n.card-container > .ant-tabs-card > .ant-tabs-content > .ant-tabs-tabpane {\n  background: #fff;\n  padding: 16px;\n}\n\n.card-container > .ant-tabs-card > .ant-tabs-bar {\n  border-color: #fff;\n}\n\n.card-container > .ant-tabs-card > .ant-tabs-bar .ant-tabs-tab {\n  border-color: transparent;\n  background: transparent;\n}\n\n.card-container > .ant-tabs-card > .ant-tabs-bar .ant-tabs-tab-active {\n  border-color: #fff;\n  background: #fff;\n}\n````\n\n<style>\n#components-tabs-demo-card-top .code-box-demo {\n  background: #F5F5F5;\n  overflow: hidden;\n  padding: 24px;\n}\n</style>\n","jsCodes":["import React from 'react';\nimport { Tabs } from 'antd';\nconst TabPane = Tabs.TabPane;\n\nexport default function DemoComponent_tabs_card_top() {\nreturn(\n  <div className=\"card-container\">\n    <Tabs type=\"card\">\n      <TabPane tab=\"Tab Title 1\" key=\"1\">\n        <p>Content of Tab Pane 1</p>\n        <p>Content of Tab Pane 1</p>\n        <p>Content of Tab Pane 1</p>\n      </TabPane>\n      <TabPane tab=\"Tab Title 2\" key=\"2\">\n        <p>Content of Tab Pane 2</p>\n        <p>Content of Tab Pane 2</p>\n        <p>Content of Tab Pane 2</p>\n      </TabPane>\n      <TabPane tab=\"Tab Title 3\" key=\"3\">\n        <p>Content of Tab Pane 3</p>\n        <p>Content of Tab Pane 3</p>\n        <p>Content of Tab Pane 3</p>\n      </TabPane>\n    </Tabs>\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_tabs_card_top key=\"DemoComponent_tabs_card_top\" />;\n"],"cssCodes":[".card-container > .ant-tabs-card > .ant-tabs-content {\n  height: 120px;\n  margin-top: -16px;\n}\n\n.card-container > .ant-tabs-card > .ant-tabs-content > .ant-tabs-tabpane {\n  background: #fff;\n  padding: 16px;\n}\n\n.card-container > .ant-tabs-card > .ant-tabs-bar {\n  border-color: #fff;\n}\n\n.card-container > .ant-tabs-card > .ant-tabs-bar .ant-tabs-tab {\n  border-color: transparent;\n  background: transparent;\n}\n\n.card-container > .ant-tabs-card > .ant-tabs-bar .ant-tabs-tab-active {\n  border-color: #fff;\n  background: #fff;\n}\n"]},{"name":"card","content":"---\norder: 8\ntitle:\n  zh-CN: 卡片式页签\n  en-US: Card type tab\n---\n\n## zh-CN\n\n另一种样式的页签，不提供对应的垂直样式。\n\n## en-US\n\nAnother type Tabs, which doesn't support vertical mode.\n\n\n````jsx\nimport { Tabs } from 'antd';\nconst TabPane = Tabs.TabPane;\n\nfunction callback(key) {\n  console.log(key);\n}\n\nReactDOM.render(\n  <Tabs onChange={callback} type=\"card\">\n    <TabPane tab=\"Tab 1\" key=\"1\">Content of Tab Pane 1</TabPane>\n    <TabPane tab=\"Tab 2\" key=\"2\">Content of Tab Pane 2</TabPane>\n    <TabPane tab=\"Tab 3\" key=\"3\">Content of Tab Pane 3</TabPane>\n  </Tabs>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Tabs } from 'antd';\nconst TabPane = Tabs.TabPane;\n\nfunction callback(key) {\n  console.log(key);\n}\n\nexport default function DemoComponent_tabs_card() {\nreturn(\n  <Tabs onChange={callback} type=\"card\">\n    <TabPane tab=\"Tab 1\" key=\"1\">Content of Tab Pane 1</TabPane>\n    <TabPane tab=\"Tab 2\" key=\"2\">Content of Tab Pane 2</TabPane>\n    <TabPane tab=\"Tab 3\" key=\"3\">Content of Tab Pane 3</TabPane>\n  </Tabs>\n);\n};\n\nexport const demo = <DemoComponent_tabs_card key=\"DemoComponent_tabs_card\" />;\n"],"cssCodes":[]},{"name":"custom_add_trigger","content":"---\norder: 11\ntitle:\n  zh-CN: 自定义新增页签触发器\n  en-US: Customized trigger of new tab\n---\n## zh-CN\n\n隐藏默认的页签增加图标，给自定义触发器绑定事件。\n\n## en-US\n\nHide default plus icon, and bind event for customized trigger.\n\n\n````jsx\nimport { Tabs, Button } from 'antd';\nconst TabPane = Tabs.TabPane;\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.newTabIndex = 0;\n    const panes = [\n      { title: 'Tab 1', content: 'Content of Tab Pane 1', key: '1' },\n      { title: 'Tab 2', content: 'Content of Tab Pane 2', key: '2' },\n    ];\n    this.state = {\n      activeKey: panes[0].key,\n      panes,\n    };\n  }\n\n  onChange = (activeKey) => {\n    this.setState({ activeKey });\n  }\n  onEdit = (targetKey, action) => {\n    this[action](targetKey);\n  }\n  add = () => {\n    const panes = this.state.panes;\n    const activeKey = `newTab${this.newTabIndex++}`;\n    panes.push({ title: 'New Tab', content: 'New Tab Pane', key: activeKey });\n    this.setState({ panes, activeKey });\n  }\n  remove = (targetKey) => {\n    let activeKey = this.state.activeKey;\n    let lastIndex;\n    this.state.panes.forEach((pane, i) => {\n      if (pane.key === targetKey) {\n        lastIndex = i - 1;\n      }\n    });\n    const panes = this.state.panes.filter(pane => pane.key !== targetKey);\n    if (lastIndex >= 0 && activeKey === targetKey) {\n      activeKey = panes[lastIndex].key;\n    }\n    this.setState({ panes, activeKey });\n  }\n  render() {\n    return (\n      <div>\n        <div style={{ marginBottom: 16 }}>\n          <Button onClick={this.add}>ADD</Button>\n        </div>\n        <Tabs\n          hideAdd\n          onChange={this.onChange}\n          activeKey={this.state.activeKey}\n          type=\"editable-card\"\n          onEdit={this.onEdit}\n        >\n          {this.state.panes.map(pane => <TabPane tab={pane.title} key={pane.key}>{pane.content}</TabPane>)}\n        </Tabs>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Tabs, Button } from 'antd';\nconst TabPane = Tabs.TabPane;\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.newTabIndex = 0;\n    const panes = [\n      { title: 'Tab 1', content: 'Content of Tab Pane 1', key: '1' },\n      { title: 'Tab 2', content: 'Content of Tab Pane 2', key: '2' },\n    ];\n    this.state = {\n      activeKey: panes[0].key,\n      panes,\n    };\n  }\n\n  onChange = (activeKey) => {\n    this.setState({ activeKey });\n  }\n  onEdit = (targetKey, action) => {\n    this[action](targetKey);\n  }\n  add = () => {\n    const panes = this.state.panes;\n    const activeKey = `newTab${this.newTabIndex++}`;\n    panes.push({ title: 'New Tab', content: 'New Tab Pane', key: activeKey });\n    this.setState({ panes, activeKey });\n  }\n  remove = (targetKey) => {\n    let activeKey = this.state.activeKey;\n    let lastIndex;\n    this.state.panes.forEach((pane, i) => {\n      if (pane.key === targetKey) {\n        lastIndex = i - 1;\n      }\n    });\n    const panes = this.state.panes.filter(pane => pane.key !== targetKey);\n    if (lastIndex >= 0 && activeKey === targetKey) {\n      activeKey = panes[lastIndex].key;\n    }\n    this.setState({ panes, activeKey });\n  }\n  render() {\n    return (\n      <div>\n        <div style={{ marginBottom: 16 }}>\n          <Button onClick={this.add}>ADD</Button>\n        </div>\n        <Tabs\n          hideAdd\n          onChange={this.onChange}\n          activeKey={this.state.activeKey}\n          type=\"editable-card\"\n          onEdit={this.onEdit}\n        >\n          {this.state.panes.map(pane => <TabPane tab={pane.title} key={pane.key}>{pane.content}</TabPane>)}\n        </Tabs>\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_tabs_custom_add_trigger() {\nreturn(<Demo />);\n};\n\nexport const demo = <DemoComponent_tabs_custom_add_trigger key=\"DemoComponent_tabs_custom_add_trigger\" />;\n"],"cssCodes":[]},{"name":"disabled","content":"---\norder: 1\ntitle:\n  zh-CN: 禁用\n  en-US: Disabled\n---\n\n## zh-CN\n\n禁用某一项。\n\n## en-US\n\nDisabled a tab.\n\n````jsx\nimport { Tabs } from 'antd';\nconst TabPane = Tabs.TabPane;\n\nReactDOM.render(\n  <Tabs defaultActiveKey=\"1\">\n    <TabPane tab=\"Tab 1\" key=\"1\">Tab 1</TabPane>\n    <TabPane tab=\"Tab 2\" disabled key=\"2\">Tab 2</TabPane>\n    <TabPane tab=\"Tab 3\" key=\"3\">Tab 3</TabPane>\n  </Tabs>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Tabs } from 'antd';\nconst TabPane = Tabs.TabPane;\n\nexport default function DemoComponent_tabs_disabled() {\nreturn(\n  <Tabs defaultActiveKey=\"1\">\n    <TabPane tab=\"Tab 1\" key=\"1\">Tab 1</TabPane>\n    <TabPane tab=\"Tab 2\" disabled key=\"2\">Tab 2</TabPane>\n    <TabPane tab=\"Tab 3\" key=\"3\">Tab 3</TabPane>\n  </Tabs>\n);\n};\n\nexport const demo = <DemoComponent_tabs_disabled key=\"DemoComponent_tabs_disabled\" />;\n"],"cssCodes":[]},{"name":"editable_card","content":"---\norder: 9\ntitle:\n  zh-CN: 新增和关闭页签\n  en-US: Add & close tab\n---\n\n## zh-CN\n\n只有卡片样式的页签支持新增和关闭选项。\n使用 `closable={false}` 禁止关闭。\n\n## en-US\n\nOnly card type Tabs support adding & closable.\n+Use `closable={false}` to disable close.\n\n````jsx\nimport { Tabs } from 'antd';\nconst TabPane = Tabs.TabPane;\n\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.newTabIndex = 0;\n    const panes = [\n      { title: 'Tab 1', content: 'Content of Tab 1', key: '1', closable: false },\n      { title: 'Tab 2', content: 'Content of Tab 2', key: '2' },\n    ];\n    this.state = {\n      activeKey: panes[0].key,\n      panes,\n    };\n  }\n\n  onChange = (activeKey) => {\n    this.setState({ activeKey });\n  }\n  onEdit = (targetKey, action) => {\n    this[action](targetKey);\n  }\n  add = () => {\n    const panes = this.state.panes;\n    const activeKey = `newTab${this.newTabIndex++}`;\n    panes.push({ title: 'New Tab', content: 'Content of new Tab', key: activeKey });\n    this.setState({ panes, activeKey });\n  }\n  remove = (targetKey) => {\n    let activeKey = this.state.activeKey;\n    let lastIndex;\n    this.state.panes.forEach((pane, i) => {\n      if (pane.key === targetKey) {\n        lastIndex = i - 1;\n      }\n    });\n    const panes = this.state.panes.filter(pane => pane.key !== targetKey);\n    if (lastIndex >= 0 && activeKey === targetKey) {\n      activeKey = panes[lastIndex].key;\n    }\n    this.setState({ panes, activeKey });\n  }\n  render() {\n    return (\n      <Tabs\n        onChange={this.onChange}\n        activeKey={this.state.activeKey}\n        type=\"editable-card\"\n        onEdit={this.onEdit}\n      >\n        {this.state.panes.map(pane => <TabPane tab={pane.title} key={pane.key} closable={pane.closable}>{pane.content}</TabPane>)}\n      </Tabs>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Tabs } from 'antd';\nconst TabPane = Tabs.TabPane;\n\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.newTabIndex = 0;\n    const panes = [\n      { title: 'Tab 1', content: 'Content of Tab 1', key: '1', closable: false },\n      { title: 'Tab 2', content: 'Content of Tab 2', key: '2' },\n    ];\n    this.state = {\n      activeKey: panes[0].key,\n      panes,\n    };\n  }\n\n  onChange = (activeKey) => {\n    this.setState({ activeKey });\n  }\n  onEdit = (targetKey, action) => {\n    this[action](targetKey);\n  }\n  add = () => {\n    const panes = this.state.panes;\n    const activeKey = `newTab${this.newTabIndex++}`;\n    panes.push({ title: 'New Tab', content: 'Content of new Tab', key: activeKey });\n    this.setState({ panes, activeKey });\n  }\n  remove = (targetKey) => {\n    let activeKey = this.state.activeKey;\n    let lastIndex;\n    this.state.panes.forEach((pane, i) => {\n      if (pane.key === targetKey) {\n        lastIndex = i - 1;\n      }\n    });\n    const panes = this.state.panes.filter(pane => pane.key !== targetKey);\n    if (lastIndex >= 0 && activeKey === targetKey) {\n      activeKey = panes[lastIndex].key;\n    }\n    this.setState({ panes, activeKey });\n  }\n  render() {\n    return (\n      <Tabs\n        onChange={this.onChange}\n        activeKey={this.state.activeKey}\n        type=\"editable-card\"\n        onEdit={this.onEdit}\n      >\n        {this.state.panes.map(pane => <TabPane tab={pane.title} key={pane.key} closable={pane.closable}>{pane.content}</TabPane>)}\n      </Tabs>\n    );\n  }\n}\n\nexport default function DemoComponent_tabs_editable_card() {\nreturn(<Demo />);\n};\n\nexport const demo = <DemoComponent_tabs_editable_card key=\"DemoComponent_tabs_editable_card\" />;\n"],"cssCodes":[]},{"name":"extra","content":"---\norder: 4\ntitle:\n  zh-CN: 附加内容\n  en-US: Extra content\n---\n\n## zh-CN\n\n可以在页签右边添加附加操作。\n\n## en-US\n\nYou can add extra actions to the right of Tabs.\n\n\n````jsx\nimport { Tabs, Button } from 'antd';\nconst TabPane = Tabs.TabPane;\n\nconst operations = <Button>Extra Action</Button>;\n\nReactDOM.render(\n  <Tabs tabBarExtraContent={operations}>\n    <TabPane tab=\"Tab 1\" key=\"1\">Content of tab 1</TabPane>\n    <TabPane tab=\"Tab 2\" key=\"2\">Content of tab 2</TabPane>\n    <TabPane tab=\"Tab 3\" key=\"3\">Content of tab 3</TabPane>\n  </Tabs>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Tabs, Button } from 'antd';\nconst TabPane = Tabs.TabPane;\n\nconst operations = <Button>Extra Action</Button>;\n\nexport default function DemoComponent_tabs_extra() {\nreturn(\n  <Tabs tabBarExtraContent={operations}>\n    <TabPane tab=\"Tab 1\" key=\"1\">Content of tab 1</TabPane>\n    <TabPane tab=\"Tab 2\" key=\"2\">Content of tab 2</TabPane>\n    <TabPane tab=\"Tab 3\" key=\"3\">Content of tab 3</TabPane>\n  </Tabs>\n);\n};\n\nexport const demo = <DemoComponent_tabs_extra key=\"DemoComponent_tabs_extra\" />;\n"],"cssCodes":[]},{"name":"icon","content":"---\norder: 2\ntitle:\n  zh-CN: 图标\n  en-US: Icon\n---\n\n## zh-CN\n\n有图标的标签。\n\n## en-US\n\nThe Tab with Icon.\n\n\n````jsx\nimport { Tabs, Icon } from 'antd';\nconst TabPane = Tabs.TabPane;\n\nReactDOM.render(\n  <Tabs defaultActiveKey=\"2\">\n    <TabPane tab={<span><Icon type=\"apple\" />Tab 1</span>} key=\"1\">\n      Tab 1\n    </TabPane>\n    <TabPane tab={<span><Icon type=\"android\" />Tab 2</span>} key=\"2\">\n      Tab 2\n    </TabPane>\n  </Tabs>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Tabs, Icon } from 'antd';\nconst TabPane = Tabs.TabPane;\n\nexport default function DemoComponent_tabs_icon() {\nreturn(\n  <Tabs defaultActiveKey=\"2\">\n    <TabPane tab={<span><Icon type=\"apple\" />Tab 1</span>} key=\"1\">\n      Tab 1\n    </TabPane>\n    <TabPane tab={<span><Icon type=\"android\" />Tab 2</span>} key=\"2\">\n      Tab 2\n    </TabPane>\n  </Tabs>\n);\n};\n\nexport const demo = <DemoComponent_tabs_icon key=\"DemoComponent_tabs_icon\" />;\n"],"cssCodes":[]},{"name":"position","content":"---\norder: 6\ntitle:\n  zh-CN: 位置\n  en-US: Position\n---\n\n## zh-CN\n\n有四个位置，`tabPosition=\"left|right|top|bottom\"`。\n\n## en-US\n\nTab's position: left, right, top or bottom.\n\n````jsx\nimport { Tabs, Select } from 'antd';\nconst TabPane = Tabs.TabPane;\nconst Option = Select.Option;\n\n\nclass Demo extends React.Component {\n  state = {\n    tabPosition: 'top',\n  }\n  changeTabPosition = (tabPosition) => {\n    this.setState({ tabPosition });\n  }\n  render() {\n    return (\n      <div>\n        <div style={{ marginBottom: 16 }}>\n          Tab position：\n          <Select\n            value={this.state.tabPosition}\n            onChange={this.changeTabPosition}\n            dropdownMatchSelectWidth={false}\n          >\n            <Option value=\"top\">top</Option>\n            <Option value=\"bottom\">bottom</Option>\n            <Option value=\"left\">left</Option>\n            <Option value=\"right\">right</Option>\n          </Select>\n        </div>\n        <Tabs tabPosition={this.state.tabPosition}>\n          <TabPane tab=\"Tab 1\" key=\"1\">Content of Tab 1</TabPane>\n          <TabPane tab=\"Tab 2\" key=\"2\">Content of Tab 2</TabPane>\n          <TabPane tab=\"Tab 3\" key=\"3\">Content of Tab 3</TabPane>\n        </Tabs>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Tabs, Select } from 'antd';\nconst TabPane = Tabs.TabPane;\nconst Option = Select.Option;\n\n\nclass Demo extends React.Component {\n  state = {\n    tabPosition: 'top',\n  }\n  changeTabPosition = (tabPosition) => {\n    this.setState({ tabPosition });\n  }\n  render() {\n    return (\n      <div>\n        <div style={{ marginBottom: 16 }}>\n          Tab position：\n          <Select\n            value={this.state.tabPosition}\n            onChange={this.changeTabPosition}\n            dropdownMatchSelectWidth={false}\n          >\n            <Option value=\"top\">top</Option>\n            <Option value=\"bottom\">bottom</Option>\n            <Option value=\"left\">left</Option>\n            <Option value=\"right\">right</Option>\n          </Select>\n        </div>\n        <Tabs tabPosition={this.state.tabPosition}>\n          <TabPane tab=\"Tab 1\" key=\"1\">Content of Tab 1</TabPane>\n          <TabPane tab=\"Tab 2\" key=\"2\">Content of Tab 2</TabPane>\n          <TabPane tab=\"Tab 3\" key=\"3\">Content of Tab 3</TabPane>\n        </Tabs>\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_tabs_position() {\nreturn(<Demo />);\n};\n\nexport const demo = <DemoComponent_tabs_position key=\"DemoComponent_tabs_position\" />;\n"],"cssCodes":[]},{"name":"size","content":"---\norder: 5\ntitle:\n  zh-CN: 迷你型\n  en-US: Mini tab\n---\n\n## zh-CN\n\n用在弹出框等较狭窄的容器内。\n\n## en-US\n\nSmall size can be used in Modal.\n\n````jsx\nimport { Tabs } from 'antd';\nconst TabPane = Tabs.TabPane;\n\nReactDOM.render(\n  <Tabs defaultActiveKey=\"2\" size=\"small\">\n    <TabPane tab=\"Tab 1\" key=\"1\">Content of tab 1</TabPane>\n    <TabPane tab=\"Tab 2\" key=\"2\">Content of tab 2</TabPane>\n    <TabPane tab=\"Tab 3\" key=\"3\">Content of tab 3</TabPane>\n  </Tabs>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Tabs } from 'antd';\nconst TabPane = Tabs.TabPane;\n\nexport default function DemoComponent_tabs_size() {\nreturn(\n  <Tabs defaultActiveKey=\"2\" size=\"small\">\n    <TabPane tab=\"Tab 1\" key=\"1\">Content of tab 1</TabPane>\n    <TabPane tab=\"Tab 2\" key=\"2\">Content of tab 2</TabPane>\n    <TabPane tab=\"Tab 3\" key=\"3\">Content of tab 3</TabPane>\n  </Tabs>\n);\n};\n\nexport const demo = <DemoComponent_tabs_size key=\"DemoComponent_tabs_size\" />;\n"],"cssCodes":[]},{"name":"slide","content":"---\norder: 3\ntitle:\n  zh-CN: 滑动\n  en-US: Slide\n---\n\n## zh-CN\n\n可以左右、上下滑动，容纳更多标签。\n\n## en-US\n\nTab can be slide to left or right(up or down), which is used for a lot of tabs.\n\n````jsx\nimport { Tabs, Radio } from 'antd';\nconst TabPane = Tabs.TabPane;\n\nclass SlidingTabsDemo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mode: 'top',\n    };\n  }\n  handleModeChange = (e) => {\n    const mode = e.target.value;\n    this.setState({ mode });\n  }\n  render() {\n    const { mode } = this.state;\n    return (\n      <div>\n        <Radio.Group onChange={this.handleModeChange} value={mode} style={{ marginBottom: 8 }}>\n          <Radio.Button value=\"top\">Horizontal</Radio.Button>\n          <Radio.Button value=\"left\">Vertical</Radio.Button>\n        </Radio.Group>\n        <Tabs\n          defaultActiveKey=\"1\"\n          tabPosition={mode}\n          style={{ height: 220 }}\n        >\n          <TabPane tab=\"Tab 1\" key=\"1\">Content of tab 1</TabPane>\n          <TabPane tab=\"Tab 2\" key=\"2\">Content of tab 2</TabPane>\n          <TabPane tab=\"Tab 3\" key=\"3\">Content of tab 3</TabPane>\n          <TabPane tab=\"Tab 4\" key=\"4\">Content of tab 4</TabPane>\n          <TabPane tab=\"Tab 5\" key=\"5\">Content of tab 5</TabPane>\n          <TabPane tab=\"Tab 6\" key=\"6\">Content of tab 6</TabPane>\n          <TabPane tab=\"Tab 7\" key=\"7\">Content of tab 7</TabPane>\n          <TabPane tab=\"Tab 8\" key=\"8\">Content of tab 8</TabPane>\n          <TabPane tab=\"Tab 9\" key=\"9\">Content of tab 9</TabPane>\n          <TabPane tab=\"Tab 10\" key=\"10\">Content of tab 10</TabPane>\n          <TabPane tab=\"Tab 11\" key=\"11\">Content of tab 11</TabPane>\n        </Tabs>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<SlidingTabsDemo />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Tabs, Radio } from 'antd';\nconst TabPane = Tabs.TabPane;\n\nclass SlidingTabsDemo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mode: 'top',\n    };\n  }\n  handleModeChange = (e) => {\n    const mode = e.target.value;\n    this.setState({ mode });\n  }\n  render() {\n    const { mode } = this.state;\n    return (\n      <div>\n        <Radio.Group onChange={this.handleModeChange} value={mode} style={{ marginBottom: 8 }}>\n          <Radio.Button value=\"top\">Horizontal</Radio.Button>\n          <Radio.Button value=\"left\">Vertical</Radio.Button>\n        </Radio.Group>\n        <Tabs\n          defaultActiveKey=\"1\"\n          tabPosition={mode}\n          style={{ height: 220 }}\n        >\n          <TabPane tab=\"Tab 1\" key=\"1\">Content of tab 1</TabPane>\n          <TabPane tab=\"Tab 2\" key=\"2\">Content of tab 2</TabPane>\n          <TabPane tab=\"Tab 3\" key=\"3\">Content of tab 3</TabPane>\n          <TabPane tab=\"Tab 4\" key=\"4\">Content of tab 4</TabPane>\n          <TabPane tab=\"Tab 5\" key=\"5\">Content of tab 5</TabPane>\n          <TabPane tab=\"Tab 6\" key=\"6\">Content of tab 6</TabPane>\n          <TabPane tab=\"Tab 7\" key=\"7\">Content of tab 7</TabPane>\n          <TabPane tab=\"Tab 8\" key=\"8\">Content of tab 8</TabPane>\n          <TabPane tab=\"Tab 9\" key=\"9\">Content of tab 9</TabPane>\n          <TabPane tab=\"Tab 10\" key=\"10\">Content of tab 10</TabPane>\n          <TabPane tab=\"Tab 11\" key=\"11\">Content of tab 11</TabPane>\n        </Tabs>\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_tabs_slide() {\nreturn(<SlidingTabsDemo />);\n};\n\nexport const demo = <DemoComponent_tabs_slide key=\"DemoComponent_tabs_slide\" />;\n"],"cssCodes":[]}]},{"name":"tag","demos":[{"name":"basic","content":"---\norder: 0\ntitle:\n  zh-CN: 基本\n  en-US: Basic\n---\n\n## zh-CN\n\n基本标签的用法，可以通过添加 `closable` 变为可关闭标签。可关闭标签具有 `onClose` `afterClose` 两个事件。\n\n## en-US\n\nUsage of basic Tag, and it could be closable by set `closable` property. Closable Tag supports `onClose` `afterClose` events.\n\n````jsx\nimport { Tag } from 'antd';\n\nfunction log(e) {\n  console.log(e);\n}\n\nfunction preventDefault(e) {\n  e.preventDefault();\n  console.log('Clicked! But prevent default.');\n}\n\nReactDOM.render(\n  <div>\n    <Tag>Tag 1</Tag>\n    <Tag><a href=\"https://github.com/ant-design/ant-design/issues/1862\">Link</a></Tag>\n    <Tag closable onClose={log}>Tag 2</Tag>\n    <Tag closable onClose={preventDefault}>Prevent Default</Tag>\n  </div>,\n  mountNode\n);\n````\n","jsCodes":["import React from 'react';\nimport { Tag } from 'antd';\n\nfunction log(e) {\n  console.log(e);\n}\n\nfunction preventDefault(e) {\n  e.preventDefault();\n  console.log('Clicked! But prevent default.');\n}\n\nexport default function DemoComponent_tag_basic() {\nreturn(\n  <div>\n    <Tag>Tag 1</Tag>\n    <Tag><a href=\"https://github.com/ant-design/ant-design/issues/1862\">Link</a></Tag>\n    <Tag closable onClose={log}>Tag 2</Tag>\n    <Tag closable onClose={preventDefault}>Prevent Default</Tag>\n  </div>);\n};\n\nexport const demo = <DemoComponent_tag_basic key=\"DemoComponent_tag_basic\" />;\n"],"cssCodes":[]},{"name":"checkable","content":"---\norder: 3\ntitle:\n  zh-CN: 可选择\n  en-US: Checkable\n---\n\n## zh-CN\n\n可通过 `CheckableTag` 实现类似 Checkbox 的效果，点击切换选中效果。\n\n> 该组件为完全受控组件，不支持非受控用法。\n\n## en-US\n\n`CheckableTag` works like Checkbox, click it to toggle checked state.\n\n> it is an absolute controlled component and has no uncontrolled mode.\n\n````jsx\nimport { Tag } from 'antd';\nconst { CheckableTag } = Tag;\n\nclass MyTag extends React.Component {\n  state = { checked: true };\n  handleChange = (checked) => {\n    this.setState({ checked });\n  }\n  render() {\n    return <CheckableTag {...this.props} checked={this.state.checked} onChange={this.handleChange} />;\n  }\n}\n\nReactDOM.render(\n  <div>\n    <MyTag>Tag1</MyTag>\n    <MyTag>Tag2</MyTag>\n    <MyTag>Tag3</MyTag>\n  </div>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Tag } from 'antd';\nconst { CheckableTag } = Tag;\n\nclass MyTag extends React.Component {\n  state = { checked: true };\n  handleChange = (checked) => {\n    this.setState({ checked });\n  }\n  render() {\n    return <CheckableTag {...this.props} checked={this.state.checked} onChange={this.handleChange} />;\n  }\n}\n\nexport default function DemoComponent_tag_checkable() {\nreturn(\n  <div>\n    <MyTag>Tag1</MyTag>\n    <MyTag>Tag2</MyTag>\n    <MyTag>Tag3</MyTag>\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_tag_checkable key=\"DemoComponent_tag_checkable\" />;\n"],"cssCodes":[]},{"name":"colorful","content":"---\norder: 1\ntitle:\n  zh-CN: 多彩标签\n  en-US: Colorful Tag\n---\n\n## zh-CN\n\n我们添加了多种预设色彩的标签样式，用作不同场景使用。如果预设值不能满足你的需求，可以设置为具体的色值。\n\n> 预设色彩在 `antd@2.7.0` 之后支持。\n\n## en-US\n\nAfter `antd@2.7.0`, We preset a series of colorful tag style for different situation usage.\nAnd you can always set it to a hex color string for custom color.\n\n> Preset colors are supported after `antd@2.7.0`.\n\n````jsx\nimport { Tag } from 'antd';\n\nReactDOM.render(\n  <div>\n    <h4 style={{ marginBottom: 16 }}>Presets:</h4>\n    <div>\n      <Tag color=\"pink\">pink</Tag>\n      <Tag color=\"red\">red</Tag>\n      <Tag color=\"orange\">orange</Tag>\n      <Tag color=\"green\">green</Tag>\n      <Tag color=\"cyan\">cyan</Tag>\n      <Tag color=\"blue\">blue</Tag>\n      <Tag color=\"purple\">purple</Tag>\n    </div>\n    <h4 style={{ margin: '16px 0' }}>Custom:</h4>\n    <div>\n      <Tag color=\"#f50\">#f50</Tag>\n      <Tag color=\"#2db7f5\">#2db7f5</Tag>\n      <Tag color=\"#87d068\">#87d068</Tag>\n      <Tag color=\"#108ee9\">#108ee9</Tag>\n    </div>\n  </div>\n, mountNode);\n````\n\n````css\n.ant-tag {\n  margin-bottom: 8px;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Tag } from 'antd';\n\nexport default function DemoComponent_tag_colorful() {\nreturn(\n  <div>\n    <h4 style={{ marginBottom: 16 }}>Presets:</h4>\n    <div>\n      <Tag color=\"pink\">pink</Tag>\n      <Tag color=\"red\">red</Tag>\n      <Tag color=\"orange\">orange</Tag>\n      <Tag color=\"green\">green</Tag>\n      <Tag color=\"cyan\">cyan</Tag>\n      <Tag color=\"blue\">blue</Tag>\n      <Tag color=\"purple\">purple</Tag>\n    </div>\n    <h4 style={{ margin: '16px 0' }}>Custom:</h4>\n    <div>\n      <Tag color=\"#f50\">#f50</Tag>\n      <Tag color=\"#2db7f5\">#2db7f5</Tag>\n      <Tag color=\"#87d068\">#87d068</Tag>\n      <Tag color=\"#108ee9\">#108ee9</Tag>\n    </div>\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_tag_colorful key=\"DemoComponent_tag_colorful\" />;\n"],"cssCodes":[".ant-tag {\n  margin-bottom: 8px;\n}\n"]},{"name":"control","content":"---\norder: 2\ntitle:\n  zh-CN: 动态添加和删除\n  en-US: Add & Remove Dynamically\n---\n\n## zh-CN\n\n用数组生成一组标签，可以动态添加和删除，通过监听删除动画结束的事件 `afterClose` 实现。\n\n## en-US\n\nGenerating a set of Tags by array, you can add and remove dynamically.\nIt's based on `afterClose` event, which will be triggered while the close animation end.\n\n````jsx\nimport { Tag, Input, Tooltip, Button } from 'antd';\n\nclass EditableTagGroup extends React.Component {\n  state = {\n    tags: ['Unremovable', 'Tag 2', 'Tag 3'],\n    inputVisible: false,\n    inputValue: '',\n  };\n\n  handleClose = (removedTag) => {\n    const tags = this.state.tags.filter(tag => tag !== removedTag);\n    console.log(tags);\n    this.setState({ tags });\n  }\n\n  showInput = () => {\n    this.setState({ inputVisible: true }, () => this.input.focus());\n  }\n\n  handleInputChange = (e) => {\n    this.setState({ inputValue: e.target.value });\n  }\n\n  handleInputConfirm = () => {\n    const state = this.state;\n    const inputValue = state.inputValue;\n    let tags = state.tags;\n    if (inputValue && tags.indexOf(inputValue) === -1) {\n      tags = [...tags, inputValue];\n    }\n    console.log(tags);\n    this.setState({\n      tags,\n      inputVisible: false,\n      inputValue: '',\n    });\n  }\n\n  saveInputRef = input => this.input = input\n\n  render() {\n    const { tags, inputVisible, inputValue } = this.state;\n    return (\n      <div>\n        {tags.map((tag, index) => {\n          const isLongTag = tag.length > 20;\n          const tagElem = (\n            <Tag key={tag} closable={index !== 0} afterClose={() => this.handleClose(tag)}>\n              {isLongTag ? `${tag.slice(0, 20)}...` : tag}\n            </Tag>\n          );\n          return isLongTag ? <Tooltip title={tag}>{tagElem}</Tooltip> : tagElem;\n        })}\n        {inputVisible && (\n          <Input\n            ref={this.saveInputRef}\n            type=\"text\"\n            size=\"small\"\n            style={{ width: 78 }}\n            value={inputValue}\n            onChange={this.handleInputChange}\n            onBlur={this.handleInputConfirm}\n            onPressEnter={this.handleInputConfirm}\n          />\n        )}\n        {!inputVisible && <Button size=\"small\" type=\"dashed\" onClick={this.showInput}>+ New Tag</Button>}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<EditableTagGroup />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Tag, Input, Tooltip, Button } from 'antd';\n\nclass EditableTagGroup extends React.Component {\n  state = {\n    tags: ['Unremovable', 'Tag 2', 'Tag 3'],\n    inputVisible: false,\n    inputValue: '',\n  };\n\n  handleClose = (removedTag) => {\n    const tags = this.state.tags.filter(tag => tag !== removedTag);\n    console.log(tags);\n    this.setState({ tags });\n  }\n\n  showInput = () => {\n    this.setState({ inputVisible: true }, () => this.input.focus());\n  }\n\n  handleInputChange = (e) => {\n    this.setState({ inputValue: e.target.value });\n  }\n\n  handleInputConfirm = () => {\n    const state = this.state;\n    const inputValue = state.inputValue;\n    let tags = state.tags;\n    if (inputValue && tags.indexOf(inputValue) === -1) {\n      tags = [...tags, inputValue];\n    }\n    console.log(tags);\n    this.setState({\n      tags,\n      inputVisible: false,\n      inputValue: '',\n    });\n  }\n\n  saveInputRef = input => this.input = input\n\n  render() {\n    const { tags, inputVisible, inputValue } = this.state;\n    return (\n      <div>\n        {tags.map((tag, index) => {\n          const isLongTag = tag.length > 20;\n          const tagElem = (\n            <Tag key={tag} closable={index !== 0} afterClose={() => this.handleClose(tag)}>\n              {isLongTag ? `${tag.slice(0, 20)}...` : tag}\n            </Tag>\n          );\n          return isLongTag ? <Tooltip title={tag}>{tagElem}</Tooltip> : tagElem;\n        })}\n        {inputVisible && (\n          <Input\n            ref={this.saveInputRef}\n            type=\"text\"\n            size=\"small\"\n            style={{ width: 78 }}\n            value={inputValue}\n            onChange={this.handleInputChange}\n            onBlur={this.handleInputConfirm}\n            onPressEnter={this.handleInputConfirm}\n          />\n        )}\n        {!inputVisible && <Button size=\"small\" type=\"dashed\" onClick={this.showInput}>+ New Tag</Button>}\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_tag_control() {\nreturn(<EditableTagGroup />);\n};\n\nexport const demo = <DemoComponent_tag_control key=\"DemoComponent_tag_control\" />;\n"],"cssCodes":[]},{"name":"hot_tags","content":"---\norder: 4\ntitle:\n  zh-CN: 热门标签\n  en-US: Hot Tags\n---\n\n## zh-CN\n\n选择你感兴趣的话题。\n\n## en-US\n\nSelect your favourite topics.\n\n````jsx\nimport { Tag } from 'antd';\nconst CheckableTag = Tag.CheckableTag;\n\nconst tagsFromServer = ['Movie', 'Books', 'Music'];\n\nclass HotTags extends React.Component {\n  state = {\n    selectedTags: [],\n  };\n\n  handleChange(tag, checked) {\n    const { selectedTags } = this.state;\n    const nextSelectedTags = checked ?\n            [...selectedTags, tag] :\n            selectedTags.filter(t => t !== tag);\n    console.log('You are interested in: ', nextSelectedTags);\n    this.setState({ selectedTags: nextSelectedTags });\n  }\n\n  render() {\n    const { selectedTags } = this.state;\n    return (\n      <div>\n        <strong>Hots: </strong>\n        {tagsFromServer.map(tag => (\n          <CheckableTag\n            key={tag}\n            checked={selectedTags.indexOf(tag) > -1}\n            onChange={checked => this.handleChange(tag, checked)}\n          >\n            {tag}\n          </CheckableTag>\n        ))}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<HotTags />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Tag } from 'antd';\nconst CheckableTag = Tag.CheckableTag;\n\nconst tagsFromServer = ['Movie', 'Books', 'Music'];\n\nclass HotTags extends React.Component {\n  state = {\n    selectedTags: [],\n  };\n\n  handleChange(tag, checked) {\n    const { selectedTags } = this.state;\n    const nextSelectedTags = checked ?\n            [...selectedTags, tag] :\n            selectedTags.filter(t => t !== tag);\n    console.log('You are interested in: ', nextSelectedTags);\n    this.setState({ selectedTags: nextSelectedTags });\n  }\n\n  render() {\n    const { selectedTags } = this.state;\n    return (\n      <div>\n        <strong>Hots: </strong>\n        {tagsFromServer.map(tag => (\n          <CheckableTag\n            key={tag}\n            checked={selectedTags.indexOf(tag) > -1}\n            onChange={checked => this.handleChange(tag, checked)}\n          >\n            {tag}\n          </CheckableTag>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_tag_hot_tags() {\nreturn(<HotTags />);\n};\n\nexport const demo = <DemoComponent_tag_hot_tags key=\"DemoComponent_tag_hot_tags\" />;\n"],"cssCodes":[]}]},{"name":"time_picker","demos":[{"name":"12hours","content":"---\norder: 7\ntitle:\n  zh-CN: 12 小时制\n  en-US: 12 hours\n---\n\n## zh-CN\n\n12 小时制的时间选择器，默认的 format 为 `h:mm:ss a`。\n\n## en-US\n\nTimePicker of 12 hours format, with default format `h:mm:ss a`.\n\n````jsx\nimport { TimePicker } from 'antd';\n\nfunction onChange(time, timeString) {\n  console.log(time, timeString);\n}\n\nReactDOM.render(\n  <div>\n    <TimePicker use12Hours onChange={onChange} />\n    <TimePicker use12Hours format=\"h:mm:ss A\" onChange={onChange} />\n    <TimePicker use12Hours format=\"h:mm a\" onChange={onChange} />\n  </div>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { TimePicker } from 'antd';\n\nfunction onChange(time, timeString) {\n  console.log(time, timeString);\n}\n\nexport default function DemoComponent_time_picker_12hours() {\nreturn(\n  <div>\n    <TimePicker use12Hours onChange={onChange} />\n    <TimePicker use12Hours format=\"h:mm:ss A\" onChange={onChange} />\n    <TimePicker use12Hours format=\"h:mm a\" onChange={onChange} />\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_time_picker_12hours key=\"DemoComponent_time_picker_12hours\" />;\n"],"cssCodes":[]},{"name":"addon","content":"---\norder: 6\ntitle:\n  zh-CN: 附加内容\n  en-US: Addon\n---\n\n## zh-CN\n\n在 TimePicker 选择框底部显示自定义的内容。\n\n## en-US\n\nRender addon contents to timepicker panel's bottom.\n\n````jsx\nimport { TimePicker, Button } from 'antd';\n\nclass TimePickerAddonDemo extends React.Component {\n  state = { open: false };\n\n  handleOpenChange = (open) => {\n    this.setState({ open });\n  }\n\n  handleClose = () => this.setState({ open: false })\n\n  render() {\n    return (\n      <TimePicker\n        open={this.state.open}\n        onOpenChange={this.handleOpenChange}\n        addon={() => (\n          <Button size=\"small\" type=\"primary\" onClick={this.handleClose}>\n            Ok\n          </Button>\n        )}\n      />\n    );\n  }\n}\n\nReactDOM.render(<TimePickerAddonDemo />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { TimePicker, Button } from 'antd';\n\nclass TimePickerAddonDemo extends React.Component {\n  state = { open: false };\n\n  handleOpenChange = (open) => {\n    this.setState({ open });\n  }\n\n  handleClose = () => this.setState({ open: false })\n\n  render() {\n    return (\n      <TimePicker\n        open={this.state.open}\n        onOpenChange={this.handleOpenChange}\n        addon={() => (\n          <Button size=\"small\" type=\"primary\" onClick={this.handleClose}>\n            Ok\n          </Button>\n        )}\n      />\n    );\n  }\n}\n\nexport default function DemoComponent_time_picker_addon() {\nreturn(<TimePickerAddonDemo />);\n};\n\nexport const demo = <DemoComponent_time_picker_addon key=\"DemoComponent_time_picker_addon\" />;\n"],"cssCodes":[]},{"name":"basic","content":"---\norder: 0\ntitle:\n  zh-CN: 基本\n  en-US: Basic\n---\n\n## zh-CN\n\n点击 TimePicker，然后可以在浮层中选择或者输入某一时间。\n\n## en-US\n\nClick `TimePicker`, and then we could select or input a time in panel.\n\n````jsx\nimport { TimePicker } from 'antd';\nimport moment from 'moment';\n\nfunction onChange(time, timeString) {\n  console.log(time, timeString);\n}\n\nReactDOM.render(\n  <TimePicker onChange={onChange} defaultOpenValue={moment('00:00:00', 'HH:mm:ss')} />,\n  mountNode\n);\n````\n","jsCodes":["import React from 'react';\nimport { TimePicker } from 'antd';\nimport moment from 'moment';\n\nfunction onChange(time, timeString) {\n  console.log(time, timeString);\n}\n\nexport default function DemoComponent_time_picker_basic() {\nreturn(\n  <TimePicker onChange={onChange} defaultOpenValue={moment('00:00:00', 'HH:mm:ss')} />);\n};\n\nexport const demo = <DemoComponent_time_picker_basic key=\"DemoComponent_time_picker_basic\" />;\n"],"cssCodes":[]},{"name":"disable_options","content":"---\norder: 5\ntitle:\n  zh-CN: 禁止选项\n  en-US: Disabled Time\n---\n## zh-CN\n\n可以使用 `disabledHours` `disabledMinutes` `disabledSeconds` 组合禁止用户选择某个时间，配合 `hideDisabledOptions` 可以直接把不可选择的项隐藏。\n\n## en-US\n\nMake part of time unselectable by `disabledHours` `disabledMinutes` `disabledSeconds`, and we even can hide those unselectable options by `hideDisabledOptions`.\n\n````jsx\nimport { TimePicker } from 'antd';\n\nfunction range(start, end) {\n  const result = [];\n  for (let i = start; i < end; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\nfunction disabledHours() {\n  const hours = range(0, 60);\n  hours.splice(20, 4);\n  return hours;\n}\n\nfunction disabledMinutes(h) {\n  if (h === 20) {\n    return range(0, 31);\n  } else if (h === 23) {\n    return range(30, 60);\n  }\n  return [];\n}\n\nReactDOM.render(\n  <div>\n    <TimePicker\n      disabledHours={disabledHours}\n      disabledMinutes={disabledMinutes}\n      placeholder=\"Just Disabled\"\n    />\n    <TimePicker\n      disabledHours={disabledHours}\n      disabledMinutes={disabledMinutes}\n      hideDisabledOptions\n      placeholder=\"Hide Directly\"\n    />\n  </div>\n, mountNode);\n````\n\n<style>\n#components-time-picker-demo-disable-options .ant-time-picker {\n  width: 120px;\n}\n</style>\n","jsCodes":["import React from 'react';\nimport { TimePicker } from 'antd';\n\nfunction range(start, end) {\n  const result = [];\n  for (let i = start; i < end; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\nfunction disabledHours() {\n  const hours = range(0, 60);\n  hours.splice(20, 4);\n  return hours;\n}\n\nfunction disabledMinutes(h) {\n  if (h === 20) {\n    return range(0, 31);\n  } else if (h === 23) {\n    return range(30, 60);\n  }\n  return [];\n}\n\nexport default function DemoComponent_time_picker_disable_options() {\nreturn(\n  <div>\n    <TimePicker\n      disabledHours={disabledHours}\n      disabledMinutes={disabledMinutes}\n      placeholder=\"Just Disabled\"\n    />\n    <TimePicker\n      disabledHours={disabledHours}\n      disabledMinutes={disabledMinutes}\n      hideDisabledOptions\n      placeholder=\"Hide Directly\"\n    />\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_time_picker_disable_options key=\"DemoComponent_time_picker_disable_options\" />;\n"],"cssCodes":[]},{"name":"disabled","content":"---\norder: 3\ntitle:\n  zh-CN: 禁用\n  en-US: disabled\n---\n\n## zh-CN\n\n禁用时间选择。\n\n## en-US\n\nA disabled state of the `TimePicker`.\n\n\n````jsx\nimport { TimePicker } from 'antd';\nimport moment from 'moment';\n\nReactDOM.render(\n  <TimePicker defaultValue={moment('12:08:23', 'HH:mm:ss')} disabled />\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { TimePicker } from 'antd';\nimport moment from 'moment';\n\nexport default function DemoComponent_time_picker_disabled() {\nreturn(\n  <TimePicker defaultValue={moment('12:08:23', 'HH:mm:ss')} disabled />\n);\n};\n\nexport const demo = <DemoComponent_time_picker_disabled key=\"DemoComponent_time_picker_disabled\" />;\n"],"cssCodes":[]},{"name":"hide_column","content":"---\norder: 4\ntitle:\n  zh-CN: 选择时分\n  en-US: Hour and minute\n---\n\n## zh-CN\n\nTimePicker 浮层中的列会随着 `format` 变化，当略去 `format` 中的某部分时，浮层中对应的列也会消失。\n\n## en-US\n\nWhile part of `format` is omitted, the corresponding column in panel will disappear, too.\n\n````jsx\nimport { TimePicker } from 'antd';\nimport moment from 'moment';\n\nconst format = 'HH:mm';\n\nReactDOM.render(\n  <TimePicker defaultValue={moment('12:08', format)} format={format} />\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { TimePicker } from 'antd';\nimport moment from 'moment';\n\nconst format = 'HH:mm';\n\nexport default function DemoComponent_time_picker_hide_column() {\nreturn(\n  <TimePicker defaultValue={moment('12:08', format)} format={format} />\n);\n};\n\nexport const demo = <DemoComponent_time_picker_hide_column key=\"DemoComponent_time_picker_hide_column\" />;\n"],"cssCodes":[]},{"name":"size","content":"---\norder: 2\ntitle:\n  zh-CN: 三种大小\n  en-US: Three Sizes\n---\n\n## zh-CN\n\n三种大小的输入框，大的用在表单中，中的为默认。\n\n## en-US\n\nThe input box comes in three sizes. large is used in the form, while the medium size is the default.\n\n````jsx\nimport { TimePicker } from 'antd';\nimport moment from 'moment';\n\nReactDOM.render(\n  <div>\n    <TimePicker defaultValue={moment('12:08:23', 'HH:mm:ss')} size=\"large\" />\n    <TimePicker defaultValue={moment('12:08:23', 'HH:mm:ss')} />\n    <TimePicker defaultValue={moment('12:08:23', 'HH:mm:ss')} size=\"small\" />\n  </div>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { TimePicker } from 'antd';\nimport moment from 'moment';\n\nexport default function DemoComponent_time_picker_size() {\nreturn(\n  <div>\n    <TimePicker defaultValue={moment('12:08:23', 'HH:mm:ss')} size=\"large\" />\n    <TimePicker defaultValue={moment('12:08:23', 'HH:mm:ss')} />\n    <TimePicker defaultValue={moment('12:08:23', 'HH:mm:ss')} size=\"small\" />\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_time_picker_size key=\"DemoComponent_time_picker_size\" />;\n"],"cssCodes":[]},{"name":"value","content":"---\norder: 1\ntitle:\n  zh-CN: 受控组件\n  en-US: Under Control\n---\n\n## zh-CN\n\nvalue 和 onChange 需要配合使用。\n\n## en-US\n\n`value` and `onChange` should be used together,\n\n````jsx\nimport { TimePicker } from 'antd';\n\nclass Demo extends React.Component {\n  state = {\n    value: null,\n  };\n\n  onChange = (time) => {\n    console.log(time);\n    this.setState({ value: time });\n  }\n\n  render() {\n    return <TimePicker value={this.state.value} onChange={this.onChange} />;\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { TimePicker } from 'antd';\n\nclass Demo extends React.Component {\n  state = {\n    value: null,\n  };\n\n  onChange = (time) => {\n    console.log(time);\n    this.setState({ value: time });\n  }\n\n  render() {\n    return <TimePicker value={this.state.value} onChange={this.onChange} />;\n  }\n}\n\nexport default function DemoComponent_time_picker_value() {\nreturn(<Demo />);\n};\n\nexport const demo = <DemoComponent_time_picker_value key=\"DemoComponent_time_picker_value\" />;\n"],"cssCodes":[]}]},{"name":"timeline","demos":[{"name":"basic","content":"---\norder: 0\ntitle: \n  zh-CN: 基本用法\n  en-US: Basic\n---\n\n## zh-CN\n\n基本的时间轴。\n\n## en-US \n\nBasic timeline.\n\n````jsx\nimport { Timeline } from 'antd';\n\nReactDOM.render(\n  <Timeline>\n    <Timeline.Item>Create a services site 2015-09-01</Timeline.Item>\n    <Timeline.Item>Solve initial network problems 2015-09-01</Timeline.Item>\n    <Timeline.Item>Technical testing 2015-09-01</Timeline.Item>\n    <Timeline.Item>Network problems being solved 2015-09-01</Timeline.Item>\n  </Timeline>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Timeline } from 'antd';\n\nexport default function DemoComponent_timeline_basic() {\nreturn(\n  <Timeline>\n    <Timeline.Item>Create a services site 2015-09-01</Timeline.Item>\n    <Timeline.Item>Solve initial network problems 2015-09-01</Timeline.Item>\n    <Timeline.Item>Technical testing 2015-09-01</Timeline.Item>\n    <Timeline.Item>Network problems being solved 2015-09-01</Timeline.Item>\n  </Timeline>\n);\n};\n\nexport const demo = <DemoComponent_timeline_basic key=\"DemoComponent_timeline_basic\" />;\n"],"cssCodes":[]},{"name":"color","content":"---\norder: 1\ntitle: \n  zh-CN: 圆圈颜色\n  en-US: Color\n---\n\n## zh-CN\n\n圆圈颜色，绿色用于已完成、成功状态，红色表示告警或错误状态，蓝色可表示正在进行或其他默认状态。\n\n## en-US \n\nSet the color of circles. `green` means completed or success status, `red` means warning or error, and `blue` means ongoing or other default status.\n\n````jsx\nimport { Timeline } from 'antd';\n\nReactDOM.render(\n  <Timeline>\n    <Timeline.Item color=\"green\">Create a services site 2015-09-01</Timeline.Item>\n    <Timeline.Item color=\"green\">Create a services site 2015-09-01</Timeline.Item>\n    <Timeline.Item color=\"red\">\n      <p>Solve initial network problems 1</p>\n      <p>Solve initial network problems 2</p>\n      <p>Solve initial network problems 3 2015-09-01</p>\n    </Timeline.Item>\n    <Timeline.Item>\n      <p>Technical testing 1</p>\n      <p>Technical testing 2</p>\n      <p>Technical testing 3 2015-09-01</p>\n    </Timeline.Item>\n  </Timeline>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Timeline } from 'antd';\n\nexport default function DemoComponent_timeline_color() {\nreturn(\n  <Timeline>\n    <Timeline.Item color=\"green\">Create a services site 2015-09-01</Timeline.Item>\n    <Timeline.Item color=\"green\">Create a services site 2015-09-01</Timeline.Item>\n    <Timeline.Item color=\"red\">\n      <p>Solve initial network problems 1</p>\n      <p>Solve initial network problems 2</p>\n      <p>Solve initial network problems 3 2015-09-01</p>\n    </Timeline.Item>\n    <Timeline.Item>\n      <p>Technical testing 1</p>\n      <p>Technical testing 2</p>\n      <p>Technical testing 3 2015-09-01</p>\n    </Timeline.Item>\n  </Timeline>\n);\n};\n\nexport const demo = <DemoComponent_timeline_color key=\"DemoComponent_timeline_color\" />;\n"],"cssCodes":[]},{"name":"custom","content":"---\norder: 4\ntitle: \n  zh-CN: 自定义时间轴点\n  en-US: Custom\n---\n\n## zh-CN\n\n可以设置为图标或其他自定义元素。\n\n## en-US \n\nSet a node as an icon or other custom element.\n\n````jsx\nimport { Timeline, Icon } from 'antd';\n\nReactDOM.render(\n  <Timeline>\n    <Timeline.Item>Create a services site 2015-09-01</Timeline.Item>\n    <Timeline.Item>Solve initial network problems 2015-09-01</Timeline.Item>\n    <Timeline.Item dot={<Icon type=\"clock-circle-o\" style={{ fontSize: '16px' }} />} color=\"red\">Technical testing 2015-09-01</Timeline.Item>\n    <Timeline.Item>Network problems being solved 2015-09-01</Timeline.Item>\n  </Timeline>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Timeline, Icon } from 'antd';\n\nexport default function DemoComponent_timeline_custom() {\nreturn(\n  <Timeline>\n    <Timeline.Item>Create a services site 2015-09-01</Timeline.Item>\n    <Timeline.Item>Solve initial network problems 2015-09-01</Timeline.Item>\n    <Timeline.Item dot={<Icon type=\"clock-circle-o\" style={{ fontSize: '16px' }} />} color=\"red\">Technical testing 2015-09-01</Timeline.Item>\n    <Timeline.Item>Network problems being solved 2015-09-01</Timeline.Item>\n  </Timeline>\n);\n};\n\nexport const demo = <DemoComponent_timeline_custom key=\"DemoComponent_timeline_custom\" />;\n"],"cssCodes":[]},{"name":"pending","content":"---\norder: 2\ntitle: \n  zh-CN: 最后一个\n  en-US: Last node\n---\n\n## zh-CN\n\n在最后位置添加一个幽灵节点，表示时间轴未完成，还在记录过程中。可以指定 `pending={true}` 或者 `pending={一个 React 元素}`。\n\n## en-US\n\nWhen the timeline is incomplete and ongoing, put a ghost node at last. set `pending={true}` or `pending={a React Element}`。\n\n````jsx\nimport { Timeline } from 'antd';\n\nReactDOM.render(\n  <Timeline pending={<a href=\"#\">See more</a>}>\n    <Timeline.Item>Create a services site 2015-09-01</Timeline.Item>\n    <Timeline.Item>Solve initial network problems 2015-09-01</Timeline.Item>\n    <Timeline.Item>Technical testing 2015-09-01</Timeline.Item>\n  </Timeline>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Timeline } from 'antd';\n\nexport default function DemoComponent_timeline_pending() {\nreturn(\n  <Timeline pending={<a href=\"#\">See more</a>}>\n    <Timeline.Item>Create a services site 2015-09-01</Timeline.Item>\n    <Timeline.Item>Solve initial network problems 2015-09-01</Timeline.Item>\n    <Timeline.Item>Technical testing 2015-09-01</Timeline.Item>\n  </Timeline>\n);\n};\n\nexport const demo = <DemoComponent_timeline_pending key=\"DemoComponent_timeline_pending\" />;\n"],"cssCodes":[]}]},{"name":"tooltip","demos":[{"name":"arrow_point_at_center","content":"---\norder: 2\ntitle:\n  zh-CN: 箭头指向\n  en-US: Arrow pointing at the center\n---\n\n## zh-CN\n\n设置了 `arrowPointAtCenter` 后，箭头将指向目标元素的中心。\n\n## en-US\n\nBy specifying `arrowPointAtCenter` prop, the arrow will point to the center of the target element.\n\n````jsx\nimport { Tooltip, Button } from 'antd';\n\nReactDOM.render(\n  <div>\n    <Tooltip placement=\"topLeft\" title=\"Prompt Text\">\n      <Button>Align edge / 边缘对齐</Button>\n    </Tooltip>\n    <Tooltip placement=\"topLeft\" title=\"Prompt Text\" arrowPointAtCenter>\n      <Button>Arrow points to center / 箭头指向中心</Button>\n    </Tooltip>\n  </div>\n, mountNode);\n````\n\n<style>\n.code-box-demo .ant-btn {\n  margin-right: 1em;\n  margin-bottom: 1em;\n}\n</style>\n","jsCodes":["import React from 'react';\nimport { Tooltip, Button } from 'antd';\n\nexport default function DemoComponent_tooltip_arrow_point_at_center() {\nreturn(\n  <div>\n    <Tooltip placement=\"topLeft\" title=\"Prompt Text\">\n      <Button>Align edge / 边缘对齐</Button>\n    </Tooltip>\n    <Tooltip placement=\"topLeft\" title=\"Prompt Text\" arrowPointAtCenter>\n      <Button>Arrow points to center / 箭头指向中心</Button>\n    </Tooltip>\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_tooltip_arrow_point_at_center key=\"DemoComponent_tooltip_arrow_point_at_center\" />;\n"],"cssCodes":[]},{"name":"auto_adjust_overflow","content":"---\norder: 3\ntitle:\n  zh-CN: 自动调整位置\n  en-US: Adjust placement automatically\n---\n\n## zh-CN\n\n气泡框不可见时自动调整位置\n\n## en-US\n\nAdjust popup placement automatically when popup is invisible\n\n````jsx\nimport { Tooltip, Button } from 'antd';\n\nconst wrapStyles = {\n  overflow: 'hidden',\n  position: 'relative',\n  padding: '24px',\n  border: '1px solid #e9e9e9',\n};\n\nReactDOM.render(\n  <div style={wrapStyles}>\n    <Tooltip placement=\"left\" title=\"Prompt Text\" getPopupContainer={trigger => trigger.parentElement}>\n      <Button>Adjust automatically / 自动调整</Button>\n    </Tooltip>\n    <br />\n    <Tooltip placement=\"left\" title=\"Prompt Text\" getPopupContainer={trigger => trigger.parentElement} autoAdjustOverflow={false}>\n      <Button>Ingore / 不处理</Button>\n    </Tooltip>\n  </div>\n, mountNode);\n````\n\n<style>\n.code-box-demo .ant-btn {\n  margin-right: 1em;\n  margin-bottom: 1em;\n}\n</style>\n","jsCodes":["import React from 'react';\nimport { Tooltip, Button } from 'antd';\n\nconst wrapStyles = {\n  overflow: 'hidden',\n  position: 'relative',\n  padding: '24px',\n  border: '1px solid #e9e9e9',\n};\n\nexport default function DemoComponent_tooltip_auto_adjust_overflow() {\nreturn(\n  <div style={wrapStyles}>\n    <Tooltip placement=\"left\" title=\"Prompt Text\" getPopupContainer={trigger => trigger.parentElement}>\n      <Button>Adjust automatically / 自动调整</Button>\n    </Tooltip>\n    <br />\n    <Tooltip placement=\"left\" title=\"Prompt Text\" getPopupContainer={trigger => trigger.parentElement} autoAdjustOverflow={false}>\n      <Button>Ingore / 不处理</Button>\n    </Tooltip>\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_tooltip_auto_adjust_overflow key=\"DemoComponent_tooltip_auto_adjust_overflow\" />;\n"],"cssCodes":[]},{"name":"basic","content":"---\norder: 0\ntitle:\n  zh-CN: 基本\n  en-US: Basic\n---\n\n## zh-CN\n\n最简单的用法。\n\n## en-US\n\nThe simplest usage.\n\n````jsx\nimport { Tooltip } from 'antd';\n\nReactDOM.render(\n  <Tooltip title=\"prompt text\">\n    <span>Tooltip will show when mouse enter.</span>\n  </Tooltip>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Tooltip } from 'antd';\n\nexport default function DemoComponent_tooltip_basic() {\nreturn(\n  <Tooltip title=\"prompt text\">\n    <span>Tooltip will show when mouse enter.</span>\n  </Tooltip>\n);\n};\n\nexport const demo = <DemoComponent_tooltip_basic key=\"DemoComponent_tooltip_basic\" />;\n"],"cssCodes":[]},{"name":"placement","content":"---\norder: 1\ntitle: \n  zh-CN: 位置\n  en-US: Placement\n---\n\n## zh-CN\n\n位置有 12 个方向。\n\n## en-US \n\nThe ToolTip has 12 placements choice.\n\n````jsx\nimport { Tooltip } from 'antd';\nconst text = <span>prompt text</span>;\n\nReactDOM.render(\n  <div>\n    <div style={{ marginLeft: 60 }}>\n      <Tooltip placement=\"topLeft\" title={text}>\n        <a href=\"#\">TL</a>\n      </Tooltip>\n      <Tooltip placement=\"top\" title={text}>\n        <a href=\"#\">Top</a>\n      </Tooltip>\n      <Tooltip placement=\"topRight\" title={text}>\n        <a href=\"#\">TR</a>\n      </Tooltip>\n    </div>\n    <div style={{ width: 60, float: 'left' }}>\n      <Tooltip placement=\"leftTop\" title={text}>\n        <a href=\"#\">LT</a>\n      </Tooltip>\n      <Tooltip placement=\"left\" title={text}>\n        <a href=\"#\">Left</a>\n      </Tooltip>\n      <Tooltip placement=\"leftBottom\" title={text}>\n        <a href=\"#\">LB</a>\n      </Tooltip>\n    </div>\n    <div style={{ width: 60, marginLeft: 270 }}>\n      <Tooltip placement=\"rightTop\" title={text}>\n        <a href=\"#\">RT</a>\n      </Tooltip>\n      <Tooltip placement=\"right\" title={text}>\n        <a href=\"#\">Right</a>\n      </Tooltip>\n      <Tooltip placement=\"rightBottom\" title={text}>\n        <a href=\"#\">RB</a>\n      </Tooltip>\n    </div>\n    <div style={{ marginLeft: 60, clear: 'both' }}>\n      <Tooltip placement=\"bottomLeft\" title={text}>\n        <a href=\"#\">BL</a>\n      </Tooltip>\n      <Tooltip placement=\"bottom\" title={text}>\n        <a href=\"#\">Bottom</a>\n      </Tooltip>\n      <Tooltip placement=\"bottomRight\" title={text}>\n        <a href=\"#\">BR</a>\n      </Tooltip>\n    </div>\n  </div>\n, mountNode);\n````\n\n<style>\n#components-tooltip-demo-placement .code-box-demo a {\n  display: inline-block;\n  line-height: 32px;\n  height: 32px;\n  width: 60px;\n  font-size: 14px;\n  text-align: center;\n  background: #f5f5f5;\n  margin-right: 1em;\n  margin-bottom: 1em;\n  border-radius: 6px;\n}\n</style>\n","jsCodes":["import React from 'react';\nimport { Tooltip } from 'antd';\nconst text = <span>prompt text</span>;\n\nexport default function DemoComponent_tooltip_placement() {\nreturn(\n  <div>\n    <div style={{ marginLeft: 60 }}>\n      <Tooltip placement=\"topLeft\" title={text}>\n        <a href=\"#\">TL</a>\n      </Tooltip>\n      <Tooltip placement=\"top\" title={text}>\n        <a href=\"#\">Top</a>\n      </Tooltip>\n      <Tooltip placement=\"topRight\" title={text}>\n        <a href=\"#\">TR</a>\n      </Tooltip>\n    </div>\n    <div style={{ width: 60, float: 'left' }}>\n      <Tooltip placement=\"leftTop\" title={text}>\n        <a href=\"#\">LT</a>\n      </Tooltip>\n      <Tooltip placement=\"left\" title={text}>\n        <a href=\"#\">Left</a>\n      </Tooltip>\n      <Tooltip placement=\"leftBottom\" title={text}>\n        <a href=\"#\">LB</a>\n      </Tooltip>\n    </div>\n    <div style={{ width: 60, marginLeft: 270 }}>\n      <Tooltip placement=\"rightTop\" title={text}>\n        <a href=\"#\">RT</a>\n      </Tooltip>\n      <Tooltip placement=\"right\" title={text}>\n        <a href=\"#\">Right</a>\n      </Tooltip>\n      <Tooltip placement=\"rightBottom\" title={text}>\n        <a href=\"#\">RB</a>\n      </Tooltip>\n    </div>\n    <div style={{ marginLeft: 60, clear: 'both' }}>\n      <Tooltip placement=\"bottomLeft\" title={text}>\n        <a href=\"#\">BL</a>\n      </Tooltip>\n      <Tooltip placement=\"bottom\" title={text}>\n        <a href=\"#\">Bottom</a>\n      </Tooltip>\n      <Tooltip placement=\"bottomRight\" title={text}>\n        <a href=\"#\">BR</a>\n      </Tooltip>\n    </div>\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_tooltip_placement key=\"DemoComponent_tooltip_placement\" />;\n"],"cssCodes":[]}]},{"name":"transfer","demos":[{"name":"advanced","content":"---\norder: 2\ntitle:\n  zh-CN: 高级用法\n  en-US: Advanced\n---\n\n## zh-CN\n\n穿梭框高级用法，可配置操作文案，可定制宽高，可对底部进行自定义渲染。\n\n## en-US\n\nAdvanced Usage of Transfer.\n\nYou can customize the labels of the transfer buttons, the width and height of the columns, and what should be displayed in the footer.\n\n````jsx\nimport { Transfer, Button } from 'antd';\n\nclass App extends React.Component {\n  state = {\n    mockData: [],\n    targetKeys: [],\n  }\n  componentDidMount() {\n    this.getMock();\n  }\n  getMock = () => {\n    const targetKeys = [];\n    const mockData = [];\n    for (let i = 0; i < 20; i++) {\n      const data = {\n        key: i.toString(),\n        title: `content${i + 1}`,\n        description: `description of content${i + 1}`,\n        chosen: Math.random() * 2 > 1,\n      };\n      if (data.chosen) {\n        targetKeys.push(data.key);\n      }\n      mockData.push(data);\n    }\n    this.setState({ mockData, targetKeys });\n  }\n  handleChange = (targetKeys) => {\n    this.setState({ targetKeys });\n  }\n  renderFooter = () => {\n    return (\n      <Button\n        size=\"small\"\n        style={{ float: 'right', margin: 5 }}\n        onClick={this.getMock}\n      >\n        reload\n      </Button>\n    );\n  }\n  render() {\n    return (\n      <Transfer\n        dataSource={this.state.mockData}\n        showSearch\n        listStyle={{\n          width: 250,\n          height: 300,\n        }}\n        operations={['to right', 'to left']}\n        targetKeys={this.state.targetKeys}\n        onChange={this.handleChange}\n        render={item => `${item.title}-${item.description}`}\n        footer={this.renderFooter}\n      />\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Transfer, Button } from 'antd';\n\nclass App extends React.Component {\n  state = {\n    mockData: [],\n    targetKeys: [],\n  }\n  componentDidMount() {\n    this.getMock();\n  }\n  getMock = () => {\n    const targetKeys = [];\n    const mockData = [];\n    for (let i = 0; i < 20; i++) {\n      const data = {\n        key: i.toString(),\n        title: `content${i + 1}`,\n        description: `description of content${i + 1}`,\n        chosen: Math.random() * 2 > 1,\n      };\n      if (data.chosen) {\n        targetKeys.push(data.key);\n      }\n      mockData.push(data);\n    }\n    this.setState({ mockData, targetKeys });\n  }\n  handleChange = (targetKeys) => {\n    this.setState({ targetKeys });\n  }\n  renderFooter = () => {\n    return (\n      <Button\n        size=\"small\"\n        style={{ float: 'right', margin: 5 }}\n        onClick={this.getMock}\n      >\n        reload\n      </Button>\n    );\n  }\n  render() {\n    return (\n      <Transfer\n        dataSource={this.state.mockData}\n        showSearch\n        listStyle={{\n          width: 250,\n          height: 300,\n        }}\n        operations={['to right', 'to left']}\n        targetKeys={this.state.targetKeys}\n        onChange={this.handleChange}\n        render={item => `${item.title}-${item.description}`}\n        footer={this.renderFooter}\n      />\n    );\n  }\n}\n\nexport default function DemoComponent_transfer_advanced() {\nreturn(<App />);\n};\n\nexport const demo = <DemoComponent_transfer_advanced key=\"DemoComponent_transfer_advanced\" />;\n"],"cssCodes":[]},{"name":"basic","content":"---\norder: 0\ntitle:\n  zh-CN: 基本用法\n  en-US: Basic\n---\n\n## zh-CN\n\n最基本的用法，展示了 `dataSource`、`targetKeys`、每行的渲染函数 `render` 以及回调函数 `onChange` `onSelectChange` `onScroll` 的用法。\n\n## en-US\n\nThe most basic usage of `Transfer` involves providing the source data and target keys arrays, plus the rendering and some callback functions.\n\n````jsx\nimport { Transfer } from 'antd';\n\nconst mockData = [];\nfor (let i = 0; i < 20; i++) {\n  mockData.push({\n    key: i.toString(),\n    title: `content${i + 1}`,\n    description: `description of content${i + 1}`,\n    disabled: i % 3 < 1,\n  });\n}\n\nconst targetKeys = mockData\n        .filter(item => +item.key % 3 > 1)\n        .map(item => item.key);\n\nclass App extends React.Component {\n  state = {\n    targetKeys,\n    selectedKeys: [],\n  }\n\n  handleChange = (nextTargetKeys, direction, moveKeys) => {\n    this.setState({ targetKeys: nextTargetKeys });\n\n    console.log('targetKeys: ', targetKeys);\n    console.log('direction: ', direction);\n    console.log('moveKeys: ', moveKeys);\n  }\n\n  handleSelectChange = (sourceSelectedKeys, targetSelectedKeys) => {\n    this.setState({ selectedKeys: [...sourceSelectedKeys, ...targetSelectedKeys] });\n\n    console.log('sourceSelectedKeys: ', sourceSelectedKeys);\n    console.log('targetSelectedKeys: ', targetSelectedKeys);\n  }\n\n  handleScroll = (direction, e) => {\n    console.log('direction:', direction);\n    console.log('target:', e.target);\n  }\n\n  render() {\n    const state = this.state;\n    return (\n      <Transfer\n        dataSource={mockData}\n        titles={['Source', 'Target']}\n        targetKeys={state.targetKeys}\n        selectedKeys={state.selectedKeys}\n        onChange={this.handleChange}\n        onSelectChange={this.handleSelectChange}\n        onScroll={this.handleScroll}\n        render={item => item.title}\n      />\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Transfer } from 'antd';\n\nconst mockData = [];\nfor (let i = 0; i < 20; i++) {\n  mockData.push({\n    key: i.toString(),\n    title: `content${i + 1}`,\n    description: `description of content${i + 1}`,\n    disabled: i % 3 < 1,\n  });\n}\n\nconst targetKeys = mockData\n        .filter(item => +item.key % 3 > 1)\n        .map(item => item.key);\n\nclass App extends React.Component {\n  state = {\n    targetKeys,\n    selectedKeys: [],\n  }\n\n  handleChange = (nextTargetKeys, direction, moveKeys) => {\n    this.setState({ targetKeys: nextTargetKeys });\n\n    console.log('targetKeys: ', targetKeys);\n    console.log('direction: ', direction);\n    console.log('moveKeys: ', moveKeys);\n  }\n\n  handleSelectChange = (sourceSelectedKeys, targetSelectedKeys) => {\n    this.setState({ selectedKeys: [...sourceSelectedKeys, ...targetSelectedKeys] });\n\n    console.log('sourceSelectedKeys: ', sourceSelectedKeys);\n    console.log('targetSelectedKeys: ', targetSelectedKeys);\n  }\n\n  handleScroll = (direction, e) => {\n    console.log('direction:', direction);\n    console.log('target:', e.target);\n  }\n\n  render() {\n    const state = this.state;\n    return (\n      <Transfer\n        dataSource={mockData}\n        titles={['Source', 'Target']}\n        targetKeys={state.targetKeys}\n        selectedKeys={state.selectedKeys}\n        onChange={this.handleChange}\n        onSelectChange={this.handleSelectChange}\n        onScroll={this.handleScroll}\n        render={item => item.title}\n      />\n    );\n  }\n}\n\nexport default function DemoComponent_transfer_basic() {\nreturn(<App />);\n};\n\nexport const demo = <DemoComponent_transfer_basic key=\"DemoComponent_transfer_basic\" />;\n"],"cssCodes":[]},{"name":"custom_item","content":"---\norder: 3\ntitle:\n  zh-CN: 自定义渲染行数据\n  en-US: Custom datasource\n---\n\n## zh-CN\n\n自定义渲染每一个 Transfer Item，可用于渲染复杂数据。\n\n## en-US\n\nCustom each Transfer Item, and in this way you can render a complex datasource.\n\n````jsx\nimport { Transfer } from 'antd';\n\nclass App extends React.Component {\n  state = {\n    mockData: [],\n    targetKeys: [],\n  }\n  componentDidMount() {\n    this.getMock();\n  }\n  getMock = () => {\n    const targetKeys = [];\n    const mockData = [];\n    for (let i = 0; i < 20; i++) {\n      const data = {\n        key: i.toString(),\n        title: `content${i + 1}`,\n        description: `description of content${i + 1}`,\n        chosen: Math.random() * 2 > 1,\n      };\n      if (data.chosen) {\n        targetKeys.push(data.key);\n      }\n      mockData.push(data);\n    }\n    this.setState({ mockData, targetKeys });\n  }\n  handleChange = (targetKeys, direction, moveKeys) => {\n    console.log(targetKeys, direction, moveKeys);\n    this.setState({ targetKeys });\n  }\n  renderItem = (item) => {\n    const customLabel = (\n      <span className=\"custom-item\">\n        {item.title} - {item.description}\n      </span>\n    );\n\n    return {\n      label: customLabel,  // for displayed item\n      value: item.title,   // for title and filter matching\n    };\n  }\n  render() {\n    return (\n      <Transfer\n        dataSource={this.state.mockData}\n        listStyle={{\n          width: 300,\n          height: 300,\n        }}\n        targetKeys={this.state.targetKeys}\n        onChange={this.handleChange}\n        render={this.renderItem}\n      />\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Transfer } from 'antd';\n\nclass App extends React.Component {\n  state = {\n    mockData: [],\n    targetKeys: [],\n  }\n  componentDidMount() {\n    this.getMock();\n  }\n  getMock = () => {\n    const targetKeys = [];\n    const mockData = [];\n    for (let i = 0; i < 20; i++) {\n      const data = {\n        key: i.toString(),\n        title: `content${i + 1}`,\n        description: `description of content${i + 1}`,\n        chosen: Math.random() * 2 > 1,\n      };\n      if (data.chosen) {\n        targetKeys.push(data.key);\n      }\n      mockData.push(data);\n    }\n    this.setState({ mockData, targetKeys });\n  }\n  handleChange = (targetKeys, direction, moveKeys) => {\n    console.log(targetKeys, direction, moveKeys);\n    this.setState({ targetKeys });\n  }\n  renderItem = (item) => {\n    const customLabel = (\n      <span className=\"custom-item\">\n        {item.title} - {item.description}\n      </span>\n    );\n\n    return {\n      label: customLabel,  // for displayed item\n      value: item.title,   // for title and filter matching\n    };\n  }\n  render() {\n    return (\n      <Transfer\n        dataSource={this.state.mockData}\n        listStyle={{\n          width: 300,\n          height: 300,\n        }}\n        targetKeys={this.state.targetKeys}\n        onChange={this.handleChange}\n        render={this.renderItem}\n      />\n    );\n  }\n}\n\nexport default function DemoComponent_transfer_custom_item() {\nreturn(<App />);\n};\n\nexport const demo = <DemoComponent_transfer_custom_item key=\"DemoComponent_transfer_custom_item\" />;\n"],"cssCodes":[]},{"name":"large_data","content":"---\norder: 4\ndebug: true\ntitle:\n  zh-CN: 大数据性能测试\n  en-US: Performance Test\n---\n\n## zh-CN\n\n2000 条数据。\n\n## en-US\n\n2000 items.\n\n````jsx\nimport { Transfer } from 'antd';\n\nclass App extends React.Component {\n  state = {\n    mockData: [],\n    targetKeys: [],\n  }\n  componentDidMount() {\n    this.getMock();\n  }\n  getMock = () => {\n    const targetKeys = [];\n    const mockData = [];\n    for (let i = 0; i < 2000; i++) {\n      const data = {\n        key: i.toString(),\n        title: `content${i + 1}`,\n        description: `description of content${i + 1}`,\n        chosen: Math.random() * 2 > 1,\n      };\n      if (data.chosen) {\n        targetKeys.push(data.key);\n      }\n      mockData.push(data);\n    }\n    this.setState({ mockData, targetKeys });\n  }\n  handleChange = (targetKeys, direction, moveKeys) => {\n    console.log(targetKeys, direction, moveKeys);\n    this.setState({ targetKeys });\n  }\n  render() {\n    return (\n      <Transfer\n        dataSource={this.state.mockData}\n        targetKeys={this.state.targetKeys}\n        onChange={this.handleChange}\n        render={item => item.title}\n      />\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Transfer } from 'antd';\n\nclass App extends React.Component {\n  state = {\n    mockData: [],\n    targetKeys: [],\n  }\n  componentDidMount() {\n    this.getMock();\n  }\n  getMock = () => {\n    const targetKeys = [];\n    const mockData = [];\n    for (let i = 0; i < 2000; i++) {\n      const data = {\n        key: i.toString(),\n        title: `content${i + 1}`,\n        description: `description of content${i + 1}`,\n        chosen: Math.random() * 2 > 1,\n      };\n      if (data.chosen) {\n        targetKeys.push(data.key);\n      }\n      mockData.push(data);\n    }\n    this.setState({ mockData, targetKeys });\n  }\n  handleChange = (targetKeys, direction, moveKeys) => {\n    console.log(targetKeys, direction, moveKeys);\n    this.setState({ targetKeys });\n  }\n  render() {\n    return (\n      <Transfer\n        dataSource={this.state.mockData}\n        targetKeys={this.state.targetKeys}\n        onChange={this.handleChange}\n        render={item => item.title}\n      />\n    );\n  }\n}\n\nexport default function DemoComponent_transfer_large_data() {\nreturn(<App />);\n};\n\nexport const demo = <DemoComponent_transfer_large_data key=\"DemoComponent_transfer_large_data\" />;\n"],"cssCodes":[]},{"name":"search","content":"---\norder: 1\ntitle:\n  zh-CN: 带搜索框\n  en-US: Search\n---\n\n## zh-CN\n\n带搜索框的穿梭框，可以自定义搜索函数。\n\n## en-US\n\nTransfer with a search box.\n\n````jsx\nimport { Transfer } from 'antd';\n\nclass App extends React.Component {\n  state = {\n    mockData: [],\n    targetKeys: [],\n  }\n  componentDidMount() {\n    this.getMock();\n  }\n  getMock = () => {\n    const targetKeys = [];\n    const mockData = [];\n    for (let i = 0; i < 20; i++) {\n      const data = {\n        key: i.toString(),\n        title: `content${i + 1}`,\n        description: `description of content${i + 1}`,\n        chosen: Math.random() * 2 > 1,\n      };\n      if (data.chosen) {\n        targetKeys.push(data.key);\n      }\n      mockData.push(data);\n    }\n    this.setState({ mockData, targetKeys });\n  }\n  filterOption = (inputValue, option) => {\n    return option.description.indexOf(inputValue) > -1;\n  }\n  handleChange = (targetKeys) => {\n    this.setState({ targetKeys });\n  }\n  render() {\n    return (\n      <Transfer\n        dataSource={this.state.mockData}\n        showSearch\n        filterOption={this.filterOption}\n        targetKeys={this.state.targetKeys}\n        onChange={this.handleChange}\n        render={item => item.title}\n      />\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Transfer } from 'antd';\n\nclass App extends React.Component {\n  state = {\n    mockData: [],\n    targetKeys: [],\n  }\n  componentDidMount() {\n    this.getMock();\n  }\n  getMock = () => {\n    const targetKeys = [];\n    const mockData = [];\n    for (let i = 0; i < 20; i++) {\n      const data = {\n        key: i.toString(),\n        title: `content${i + 1}`,\n        description: `description of content${i + 1}`,\n        chosen: Math.random() * 2 > 1,\n      };\n      if (data.chosen) {\n        targetKeys.push(data.key);\n      }\n      mockData.push(data);\n    }\n    this.setState({ mockData, targetKeys });\n  }\n  filterOption = (inputValue, option) => {\n    return option.description.indexOf(inputValue) > -1;\n  }\n  handleChange = (targetKeys) => {\n    this.setState({ targetKeys });\n  }\n  render() {\n    return (\n      <Transfer\n        dataSource={this.state.mockData}\n        showSearch\n        filterOption={this.filterOption}\n        targetKeys={this.state.targetKeys}\n        onChange={this.handleChange}\n        render={item => item.title}\n      />\n    );\n  }\n}\n\nexport default function DemoComponent_transfer_search() {\nreturn(<App />);\n};\n\nexport const demo = <DemoComponent_transfer_search key=\"DemoComponent_transfer_search\" />;\n"],"cssCodes":[]}]},{"name":"tree","demos":[{"name":"basic_controlled","content":"---\norder: 1\ntitle:\n  zh-CN: 受控操作示例\n  en-US: basic controlled example\n---\n\n## zh-CN\n\n受控操作示例\n\n## en-US\n\nbasic controlled example\n\n````jsx\nimport { Tree } from 'antd';\nconst TreeNode = Tree.TreeNode;\n\nconst x = 3;\nconst y = 2;\nconst z = 1;\nconst gData = [];\n\nconst generateData = (_level, _preKey, _tns) => {\n  const preKey = _preKey || '0';\n  const tns = _tns || gData;\n\n  const children = [];\n  for (let i = 0; i < x; i++) {\n    const key = `${preKey}-${i}`;\n    tns.push({ title: key, key });\n    if (i < y) {\n      children.push(key);\n    }\n  }\n  if (_level < 0) {\n    return tns;\n  }\n  const level = _level - 1;\n  children.forEach((key, index) => {\n    tns[index].children = [];\n    return generateData(level, key, tns[index].children);\n  });\n};\ngenerateData(z);\n\nclass Demo extends React.Component {\n  state = {\n    expandedKeys: ['0-0-0', '0-0-1'],\n    autoExpandParent: true,\n    checkedKeys: ['0-0-0'],\n    selectedKeys: [],\n  }\n  onExpand = (expandedKeys) => {\n    console.log('onExpand', arguments);\n    // if not set autoExpandParent to false, if children expanded, parent can not collapse.\n    // or, you can remove all expanded children keys.\n    this.setState({\n      expandedKeys,\n      autoExpandParent: false,\n    });\n  }\n  onCheck = (checkedKeys) => {\n    this.setState({\n      checkedKeys,\n      selectedKeys: ['0-3', '0-4'],\n    });\n  }\n  onSelect = (selectedKeys, info) => {\n    console.log('onSelect', info);\n    this.setState({ selectedKeys });\n  }\n  render() {\n    const loop = data => data.map((item) => {\n      if (item.children) {\n        return (\n          <TreeNode key={item.key} title={item.key} disableCheckbox={item.key === '0-0-0'}>\n            {loop(item.children)}\n          </TreeNode>\n        );\n      }\n      return <TreeNode key={item.key} title={item.key} />;\n    });\n    return (\n      <Tree\n        checkable\n        onExpand={this.onExpand}\n        expandedKeys={this.state.expandedKeys}\n        autoExpandParent={this.state.autoExpandParent}\n        onCheck={this.onCheck}\n        checkedKeys={this.state.checkedKeys}\n        onSelect={this.onSelect}\n        selectedKeys={this.state.selectedKeys}\n      >\n        {loop(gData)}\n      </Tree>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Tree } from 'antd';\nconst TreeNode = Tree.TreeNode;\n\nconst x = 3;\nconst y = 2;\nconst z = 1;\nconst gData = [];\n\nconst generateData = (_level, _preKey, _tns) => {\n  const preKey = _preKey || '0';\n  const tns = _tns || gData;\n\n  const children = [];\n  for (let i = 0; i < x; i++) {\n    const key = `${preKey}-${i}`;\n    tns.push({ title: key, key });\n    if (i < y) {\n      children.push(key);\n    }\n  }\n  if (_level < 0) {\n    return tns;\n  }\n  const level = _level - 1;\n  children.forEach((key, index) => {\n    tns[index].children = [];\n    return generateData(level, key, tns[index].children);\n  });\n};\ngenerateData(z);\n\nclass Demo extends React.Component {\n  state = {\n    expandedKeys: ['0-0-0', '0-0-1'],\n    autoExpandParent: true,\n    checkedKeys: ['0-0-0'],\n    selectedKeys: [],\n  }\n  onExpand = (expandedKeys) => {\n    console.log('onExpand', arguments);\n    // if not set autoExpandParent to false, if children expanded, parent can not collapse.\n    // or, you can remove all expanded children keys.\n    this.setState({\n      expandedKeys,\n      autoExpandParent: false,\n    });\n  }\n  onCheck = (checkedKeys) => {\n    this.setState({\n      checkedKeys,\n      selectedKeys: ['0-3', '0-4'],\n    });\n  }\n  onSelect = (selectedKeys, info) => {\n    console.log('onSelect', info);\n    this.setState({ selectedKeys });\n  }\n  render() {\n    const loop = data => data.map((item) => {\n      if (item.children) {\n        return (\n          <TreeNode key={item.key} title={item.key} disableCheckbox={item.key === '0-0-0'}>\n            {loop(item.children)}\n          </TreeNode>\n        );\n      }\n      return <TreeNode key={item.key} title={item.key} />;\n    });\n    return (\n      <Tree\n        checkable\n        onExpand={this.onExpand}\n        expandedKeys={this.state.expandedKeys}\n        autoExpandParent={this.state.autoExpandParent}\n        onCheck={this.onCheck}\n        checkedKeys={this.state.checkedKeys}\n        onSelect={this.onSelect}\n        selectedKeys={this.state.selectedKeys}\n      >\n        {loop(gData)}\n      </Tree>\n    );\n  }\n}\n\nexport default function DemoComponent_tree_basic_controlled() {\nreturn(<Demo />);\n};\n\nexport const demo = <DemoComponent_tree_basic_controlled key=\"DemoComponent_tree_basic_controlled\" />;\n"],"cssCodes":[]},{"name":"basic","content":"---\norder: 0\ntitle:\n  zh-CN: 基本\n  en-US: basic\n---\n\n## zh-CN\n\n最简单的用法，展示可勾选，可选中，禁用，默认展开等功能。\n\n## en-US\n\nThe most basic usage, tell you how to use checkable, selectable, disabled, defaultExpandKeys, and etc.\n\n````jsx\nimport { Tree } from 'antd';\nconst TreeNode = Tree.TreeNode;\n\nclass Demo extends React.Component {\n  onSelect = (selectedKeys, info) => {\n    console.log('selected', selectedKeys, info);\n  }\n  onCheck = (checkedKeys, info) => {\n    console.log('onCheck', checkedKeys, info);\n  }\n  render() {\n    return (\n      <Tree\n        checkable\n        defaultExpandedKeys={['0-0-0', '0-0-1']}\n        defaultSelectedKeys={['0-0-0', '0-0-1']}\n        defaultCheckedKeys={['0-0-0', '0-0-1']}\n        onSelect={this.onSelect}\n        onCheck={this.onCheck}\n      >\n        <TreeNode title=\"parent 1\" key=\"0-0\">\n          <TreeNode title=\"parent 1-0\" key=\"0-0-0\" disabled>\n            <TreeNode title=\"leaf\" key=\"0-0-0-0\" disableCheckbox />\n            <TreeNode title=\"leaf\" key=\"0-0-0-1\" />\n          </TreeNode>\n          <TreeNode title=\"parent 1-1\" key=\"0-0-1\">\n            <TreeNode title={<span style={{ color: '#08c' }}>sss</span>} key=\"0-0-1-0\" />\n          </TreeNode>\n        </TreeNode>\n      </Tree>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Tree } from 'antd';\nconst TreeNode = Tree.TreeNode;\n\nclass Demo extends React.Component {\n  onSelect = (selectedKeys, info) => {\n    console.log('selected', selectedKeys, info);\n  }\n  onCheck = (checkedKeys, info) => {\n    console.log('onCheck', checkedKeys, info);\n  }\n  render() {\n    return (\n      <Tree\n        checkable\n        defaultExpandedKeys={['0-0-0', '0-0-1']}\n        defaultSelectedKeys={['0-0-0', '0-0-1']}\n        defaultCheckedKeys={['0-0-0', '0-0-1']}\n        onSelect={this.onSelect}\n        onCheck={this.onCheck}\n      >\n        <TreeNode title=\"parent 1\" key=\"0-0\">\n          <TreeNode title=\"parent 1-0\" key=\"0-0-0\" disabled>\n            <TreeNode title=\"leaf\" key=\"0-0-0-0\" disableCheckbox />\n            <TreeNode title=\"leaf\" key=\"0-0-0-1\" />\n          </TreeNode>\n          <TreeNode title=\"parent 1-1\" key=\"0-0-1\">\n            <TreeNode title={<span style={{ color: '#08c' }}>sss</span>} key=\"0-0-1-0\" />\n          </TreeNode>\n        </TreeNode>\n      </Tree>\n    );\n  }\n}\n\nexport default function DemoComponent_tree_basic() {\nreturn(<Demo />);\n};\n\nexport const demo = <DemoComponent_tree_basic key=\"DemoComponent_tree_basic\" />;\n"],"cssCodes":[]},{"name":"customized_icon","content":"---\norder: 6\ndebug: true\ntitle:\n  zh-CN: 自定义图标\n  en-US: Customize Icon\n---\n\n## zh-CN\n\n可以针对不同节点采用样式覆盖的方式定制图标。\n\n## en-US\n\nYou can customize icons for different nodes by styles override.\n\n````jsx\nimport { Tree } from 'antd';\nconst TreeNode = Tree.TreeNode;\n\nclass Demo extends React.Component {\n  onSelect = (selectedKeys, info) => {\n    console.log('selected', selectedKeys, info);\n  }\n  render() {\n    return (\n      <Tree\n        showIcon\n        showLine\n        defaultExpandedKeys={['0-0-0', '0-0-1']}\n        defaultSelectedKeys={['0-0-0', '0-0-1']}\n        onSelect={this.onSelect}\n      >\n        <TreeNode title=\"parent 1\" key=\"0-0\">\n          <TreeNode title=\"parent 1-0\" key=\"0-0-0\">\n            <TreeNode title=\"leaf\" key=\"0-0-0-0\" />\n            <TreeNode title=\"leaf\" key=\"0-0-0-1\" />\n          </TreeNode>\n          <TreeNode title=\"parent 1-1\" key=\"0-0-1\">\n            <TreeNode title=\"leaf\" key=\"0-0-1-0\" />\n          </TreeNode>\n          <TreeNode title=\"leaf\" key=\"0-0-2\" />\n        </TreeNode>\n      </Tree>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n````\n\n```css\n#components-tree-demo-customized-icon .ant-tree-iconEle {\n  position: absolute;\n  left: 0;\n  background: #fff;\n}\n#components-tree-demo-customized-icon .ant-tree-iconEle::after {\n  font-size: 12px;\n  zoom: 1;\n  display: inline-block;\n  font-family: 'anticon';\n  text-rendering: optimizeLegibility;\n  color: #999;\n  transition: transform .3s ease;\n  margin-top: 2px;\n  background: #fff;\n}\n#components-tree-demo-customized-icon .ant-tree-iconEle.ant-tree-icon__docu::after {\n  content: \"\\E664\";\n}\n#components-tree-demo-customized-icon .ant-tree-iconEle.ant-tree-icon__open::after {\n  content: \"\\E699\";\n}\n#components-tree-demo-customized-icon .ant-tree-iconEle.ant-tree-icon__close::after {\n  content: \"\\E662\";\n}\n#components-tree-demo-customized-icon .ant-tree-switcher {\n  position: relative;\n  z-index: 1;\n  background: transparent;\n}\n#components-tree-demo-customized-icon .ant-tree-switcher::after {\n  opacity: 0;\n}\n```\n","jsCodes":["import React from 'react';\nimport { Tree } from 'antd';\nconst TreeNode = Tree.TreeNode;\n\nclass Demo extends React.Component {\n  onSelect = (selectedKeys, info) => {\n    console.log('selected', selectedKeys, info);\n  }\n  render() {\n    return (\n      <Tree\n        showIcon\n        showLine\n        defaultExpandedKeys={['0-0-0', '0-0-1']}\n        defaultSelectedKeys={['0-0-0', '0-0-1']}\n        onSelect={this.onSelect}\n      >\n        <TreeNode title=\"parent 1\" key=\"0-0\">\n          <TreeNode title=\"parent 1-0\" key=\"0-0-0\">\n            <TreeNode title=\"leaf\" key=\"0-0-0-0\" />\n            <TreeNode title=\"leaf\" key=\"0-0-0-1\" />\n          </TreeNode>\n          <TreeNode title=\"parent 1-1\" key=\"0-0-1\">\n            <TreeNode title=\"leaf\" key=\"0-0-1-0\" />\n          </TreeNode>\n          <TreeNode title=\"leaf\" key=\"0-0-2\" />\n        </TreeNode>\n      </Tree>\n    );\n  }\n}\n\nexport default function DemoComponent_tree_customized_icon() {\nreturn(<Demo />);\n};\n\nexport const demo = <DemoComponent_tree_customized_icon key=\"DemoComponent_tree_customized_icon\" />;\n"],"cssCodes":[]},{"name":"draggable","content":"---\norder: 2\ntitle:\n  zh-CN: 拖动示例\n  en-US: draggable\n---\n\n## zh-CN\n\n将节点拖拽到其他节点内部或前后。\n\n## en-US\n\nDrag treeNode to insert after the other treeNode or insert into the other parent TreeNode.\n\n````jsx\nimport { Tree } from 'antd';\nconst TreeNode = Tree.TreeNode;\n\nconst x = 3;\nconst y = 2;\nconst z = 1;\nconst gData = [];\n\nconst generateData = (_level, _preKey, _tns) => {\n  const preKey = _preKey || '0';\n  const tns = _tns || gData;\n\n  const children = [];\n  for (let i = 0; i < x; i++) {\n    const key = `${preKey}-${i}`;\n    tns.push({ title: key, key });\n    if (i < y) {\n      children.push(key);\n    }\n  }\n  if (_level < 0) {\n    return tns;\n  }\n  const level = _level - 1;\n  children.forEach((key, index) => {\n    tns[index].children = [];\n    return generateData(level, key, tns[index].children);\n  });\n};\ngenerateData(z);\n\nclass Demo extends React.Component {\n  state = {\n    gData,\n    expandedKeys: ['0-0', '0-0-0', '0-0-0-0'],\n  }\n  onDragEnter = (info) => {\n    console.log(info);\n    // expandedKeys 需要受控时设置\n    // this.setState({\n    //   expandedKeys: info.expandedKeys,\n    // });\n  }\n  onDrop = (info) => {\n    console.log(info);\n    const dropKey = info.node.props.eventKey;\n    const dragKey = info.dragNode.props.eventKey;\n    const dropPos = info.node.props.pos.split('-');\n    const dropPosition = info.dropPosition - Number(dropPos[dropPos.length - 1]);\n    // const dragNodesKeys = info.dragNodesKeys;\n    const loop = (data, key, callback) => {\n      data.forEach((item, index, arr) => {\n        if (item.key === key) {\n          return callback(item, index, arr);\n        }\n        if (item.children) {\n          return loop(item.children, key, callback);\n        }\n      });\n    };\n    const data = [...this.state.gData];\n    let dragObj;\n    loop(data, dragKey, (item, index, arr) => {\n      arr.splice(index, 1);\n      dragObj = item;\n    });\n    if (info.dropToGap) {\n      let ar;\n      let i;\n      loop(data, dropKey, (item, index, arr) => {\n        ar = arr;\n        i = index;\n      });\n      if (dropPosition === -1) {\n        ar.splice(i, 0, dragObj);\n      } else {\n        ar.splice(i - 1, 0, dragObj);\n      }\n    } else {\n      loop(data, dropKey, (item) => {\n        item.children = item.children || [];\n        // where to insert 示例添加到尾部，可以是随意位置\n        item.children.push(dragObj);\n      });\n    }\n    this.setState({\n      gData: data,\n    });\n  }\n  render() {\n    const loop = data => data.map((item) => {\n      if (item.children && item.children.length) {\n        return <TreeNode key={item.key} title={item.key}>{loop(item.children)}</TreeNode>;\n      }\n      return <TreeNode key={item.key} title={item.key} />;\n    });\n    return (\n      <Tree\n        className=\"draggable-tree\"\n        defaultExpandedKeys={this.state.expandedKeys}\n        draggable\n        onDragEnter={this.onDragEnter}\n        onDrop={this.onDrop}\n      >\n        {loop(this.state.gData)}\n      </Tree>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n````\n\n````css\n/* You can add the following CSS to your project to make draggable area bigger */\n#components-tree-demo-draggable .draggable-tree .ant-tree-node-content-wrapper {\n  width: calc(100% - 18px);\n}\n````\n","jsCodes":["import React from 'react';\nimport { Tree } from 'antd';\nconst TreeNode = Tree.TreeNode;\n\nconst x = 3;\nconst y = 2;\nconst z = 1;\nconst gData = [];\n\nconst generateData = (_level, _preKey, _tns) => {\n  const preKey = _preKey || '0';\n  const tns = _tns || gData;\n\n  const children = [];\n  for (let i = 0; i < x; i++) {\n    const key = `${preKey}-${i}`;\n    tns.push({ title: key, key });\n    if (i < y) {\n      children.push(key);\n    }\n  }\n  if (_level < 0) {\n    return tns;\n  }\n  const level = _level - 1;\n  children.forEach((key, index) => {\n    tns[index].children = [];\n    return generateData(level, key, tns[index].children);\n  });\n};\ngenerateData(z);\n\nclass Demo extends React.Component {\n  state = {\n    gData,\n    expandedKeys: ['0-0', '0-0-0', '0-0-0-0'],\n  }\n  onDragEnter = (info) => {\n    console.log(info);\n    // expandedKeys 需要受控时设置\n    // this.setState({\n    //   expandedKeys: info.expandedKeys,\n    // });\n  }\n  onDrop = (info) => {\n    console.log(info);\n    const dropKey = info.node.props.eventKey;\n    const dragKey = info.dragNode.props.eventKey;\n    const dropPos = info.node.props.pos.split('-');\n    const dropPosition = info.dropPosition - Number(dropPos[dropPos.length - 1]);\n    // const dragNodesKeys = info.dragNodesKeys;\n    const loop = (data, key, callback) => {\n      data.forEach((item, index, arr) => {\n        if (item.key === key) {\n          return callback(item, index, arr);\n        }\n        if (item.children) {\n          return loop(item.children, key, callback);\n        }\n      });\n    };\n    const data = [...this.state.gData];\n    let dragObj;\n    loop(data, dragKey, (item, index, arr) => {\n      arr.splice(index, 1);\n      dragObj = item;\n    });\n    if (info.dropToGap) {\n      let ar;\n      let i;\n      loop(data, dropKey, (item, index, arr) => {\n        ar = arr;\n        i = index;\n      });\n      if (dropPosition === -1) {\n        ar.splice(i, 0, dragObj);\n      } else {\n        ar.splice(i - 1, 0, dragObj);\n      }\n    } else {\n      loop(data, dropKey, (item) => {\n        item.children = item.children || [];\n        // where to insert 示例添加到尾部，可以是随意位置\n        item.children.push(dragObj);\n      });\n    }\n    this.setState({\n      gData: data,\n    });\n  }\n  render() {\n    const loop = data => data.map((item) => {\n      if (item.children && item.children.length) {\n        return <TreeNode key={item.key} title={item.key}>{loop(item.children)}</TreeNode>;\n      }\n      return <TreeNode key={item.key} title={item.key} />;\n    });\n    return (\n      <Tree\n        className=\"draggable-tree\"\n        defaultExpandedKeys={this.state.expandedKeys}\n        draggable\n        onDragEnter={this.onDragEnter}\n        onDrop={this.onDrop}\n      >\n        {loop(this.state.gData)}\n      </Tree>\n    );\n  }\n}\n\nexport default function DemoComponent_tree_draggable() {\nreturn(<Demo />);\n};\n\nexport const demo = <DemoComponent_tree_draggable key=\"DemoComponent_tree_draggable\" />;\n"],"cssCodes":["/* You can add the following CSS to your project to make draggable area bigger */\n#components-tree-demo-draggable .draggable-tree .ant-tree-node-content-wrapper {\n  width: calc(100% - 18px);\n}\n"]},{"name":"dynamic","content":"---\norder: 3\ntitle:\n  zh-CN: 异步数据加载\n  en-US: load data asynchronously\n---\n\n## zh-CN\n\n点击展开节点，动态加载数据。\n\n## en-US\n\nTo load data asynchronously when click to expand a treeNode.\n\n````jsx\nimport { Tree } from 'antd';\nconst TreeNode = Tree.TreeNode;\n\nfunction generateTreeNodes(treeNode) {\n  const arr = [];\n  const key = treeNode.props.eventKey;\n  for (let i = 0; i < 3; i++) {\n    arr.push({ name: `leaf ${key}-${i}`, key: `${key}-${i}` });\n  }\n  return arr;\n}\n\nfunction setLeaf(treeData, curKey, level) {\n  const loopLeaf = (data, lev) => {\n    const l = lev - 1;\n    data.forEach((item) => {\n      if ((item.key.length > curKey.length) ? item.key.indexOf(curKey) !== 0 :\n        curKey.indexOf(item.key) !== 0) {\n        return;\n      }\n      if (item.children) {\n        loopLeaf(item.children, l);\n      } else if (l < 1) {\n        item.isLeaf = true;\n      }\n    });\n  };\n  loopLeaf(treeData, level + 1);\n}\n\nfunction getNewTreeData(treeData, curKey, child, level) {\n  const loop = (data) => {\n    if (level < 1 || curKey.length - 3 > level * 2) return;\n    data.forEach((item) => {\n      if (curKey.indexOf(item.key) === 0) {\n        if (item.children) {\n          loop(item.children);\n        } else {\n          item.children = child;\n        }\n      }\n    });\n  };\n  loop(treeData);\n  setLeaf(treeData, curKey, level);\n}\n\nclass Demo extends React.Component {\n  state = {\n    treeData: [],\n  }\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({\n        treeData: [\n          { name: 'pNode 01', key: '0-0' },\n          { name: 'pNode 02', key: '0-1' },\n          { name: 'pNode 03', key: '0-2', isLeaf: true },\n        ],\n      });\n    }, 100);\n  }\n  onSelect = (info) => {\n    console.log('selected', info);\n  }\n  onLoadData = (treeNode) => {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        const treeData = [...this.state.treeData];\n        getNewTreeData(treeData, treeNode.props.eventKey, generateTreeNodes(treeNode), 2);\n        this.setState({ treeData });\n        resolve();\n      }, 1000);\n    });\n  }\n  render() {\n    const loop = data => data.map((item) => {\n      if (item.children) {\n        return <TreeNode title={item.name} key={item.key}>{loop(item.children)}</TreeNode>;\n      }\n      return <TreeNode title={item.name} key={item.key} isLeaf={item.isLeaf} disabled={item.key === '0-0-0'} />;\n    });\n    const treeNodes = loop(this.state.treeData);\n    return (\n      <Tree onSelect={this.onSelect} loadData={this.onLoadData}>\n        {treeNodes}\n      </Tree>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Tree } from 'antd';\nconst TreeNode = Tree.TreeNode;\n\nfunction generateTreeNodes(treeNode) {\n  const arr = [];\n  const key = treeNode.props.eventKey;\n  for (let i = 0; i < 3; i++) {\n    arr.push({ name: `leaf ${key}-${i}`, key: `${key}-${i}` });\n  }\n  return arr;\n}\n\nfunction setLeaf(treeData, curKey, level) {\n  const loopLeaf = (data, lev) => {\n    const l = lev - 1;\n    data.forEach((item) => {\n      if ((item.key.length > curKey.length) ? item.key.indexOf(curKey) !== 0 :\n        curKey.indexOf(item.key) !== 0) {\n        return;\n      }\n      if (item.children) {\n        loopLeaf(item.children, l);\n      } else if (l < 1) {\n        item.isLeaf = true;\n      }\n    });\n  };\n  loopLeaf(treeData, level + 1);\n}\n\nfunction getNewTreeData(treeData, curKey, child, level) {\n  const loop = (data) => {\n    if (level < 1 || curKey.length - 3 > level * 2) return;\n    data.forEach((item) => {\n      if (curKey.indexOf(item.key) === 0) {\n        if (item.children) {\n          loop(item.children);\n        } else {\n          item.children = child;\n        }\n      }\n    });\n  };\n  loop(treeData);\n  setLeaf(treeData, curKey, level);\n}\n\nclass Demo extends React.Component {\n  state = {\n    treeData: [],\n  }\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({\n        treeData: [\n          { name: 'pNode 01', key: '0-0' },\n          { name: 'pNode 02', key: '0-1' },\n          { name: 'pNode 03', key: '0-2', isLeaf: true },\n        ],\n      });\n    }, 100);\n  }\n  onSelect = (info) => {\n    console.log('selected', info);\n  }\n  onLoadData = (treeNode) => {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        const treeData = [...this.state.treeData];\n        getNewTreeData(treeData, treeNode.props.eventKey, generateTreeNodes(treeNode), 2);\n        this.setState({ treeData });\n        resolve();\n      }, 1000);\n    });\n  }\n  render() {\n    const loop = data => data.map((item) => {\n      if (item.children) {\n        return <TreeNode title={item.name} key={item.key}>{loop(item.children)}</TreeNode>;\n      }\n      return <TreeNode title={item.name} key={item.key} isLeaf={item.isLeaf} disabled={item.key === '0-0-0'} />;\n    });\n    const treeNodes = loop(this.state.treeData);\n    return (\n      <Tree onSelect={this.onSelect} loadData={this.onLoadData}>\n        {treeNodes}\n      </Tree>\n    );\n  }\n}\n\nexport default function DemoComponent_tree_dynamic() {\nreturn(<Demo />);\n};\n\nexport const demo = <DemoComponent_tree_dynamic key=\"DemoComponent_tree_dynamic\" />;\n"],"cssCodes":[]},{"name":"line","content":"---\norder: 5\ntitle:\n  zh-CN: 连接线\n  en-US: Tree With Line\n---\n\n## zh-CN\n\n带连接线的树。\n\n## en-US\n\nTree With Line\n\n````jsx\nimport { Tree } from 'antd';\nconst TreeNode = Tree.TreeNode;\n\nclass Demo extends React.Component {\n  onSelect = (selectedKeys, info) => {\n    console.log('selected', selectedKeys, info);\n  }\n  render() {\n    return (\n      <Tree\n        showLine\n        defaultExpandedKeys={['0-0-0']}\n        onSelect={this.onSelect}\n      >\n        <TreeNode title=\"parent 1\" key=\"0-0\">\n          <TreeNode title=\"parent 1-0\" key=\"0-0-0\">\n            <TreeNode title=\"leaf\" key=\"0-0-0-0\" />\n            <TreeNode title=\"leaf\" key=\"0-0-0-1\" />\n            <TreeNode title=\"leaf\" key=\"0-0-0-2\" />\n          </TreeNode>\n          <TreeNode title=\"parent 1-1\" key=\"0-0-1\">\n            <TreeNode title=\"leaf\" key=\"0-0-1-0\" />\n          </TreeNode>\n          <TreeNode title=\"parent 1-2\" key=\"0-0-2\">\n            <TreeNode title=\"leaf\" key=\"0-0-2-0\" />\n            <TreeNode title=\"leaf\" key=\"0-0-2-1\" />\n          </TreeNode>\n        </TreeNode>\n      </Tree>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Tree } from 'antd';\nconst TreeNode = Tree.TreeNode;\n\nclass Demo extends React.Component {\n  onSelect = (selectedKeys, info) => {\n    console.log('selected', selectedKeys, info);\n  }\n  render() {\n    return (\n      <Tree\n        showLine\n        defaultExpandedKeys={['0-0-0']}\n        onSelect={this.onSelect}\n      >\n        <TreeNode title=\"parent 1\" key=\"0-0\">\n          <TreeNode title=\"parent 1-0\" key=\"0-0-0\">\n            <TreeNode title=\"leaf\" key=\"0-0-0-0\" />\n            <TreeNode title=\"leaf\" key=\"0-0-0-1\" />\n            <TreeNode title=\"leaf\" key=\"0-0-0-2\" />\n          </TreeNode>\n          <TreeNode title=\"parent 1-1\" key=\"0-0-1\">\n            <TreeNode title=\"leaf\" key=\"0-0-1-0\" />\n          </TreeNode>\n          <TreeNode title=\"parent 1-2\" key=\"0-0-2\">\n            <TreeNode title=\"leaf\" key=\"0-0-2-0\" />\n            <TreeNode title=\"leaf\" key=\"0-0-2-1\" />\n          </TreeNode>\n        </TreeNode>\n      </Tree>\n    );\n  }\n}\n\nexport default function DemoComponent_tree_line() {\nreturn(<Demo />);\n};\n\nexport const demo = <DemoComponent_tree_line key=\"DemoComponent_tree_line\" />;\n"],"cssCodes":[]},{"name":"search","content":"---\norder: 4\ntitle:\n  zh-CN: 可搜索\n  en-US: Searchable\n---\n\n## zh-CN\n\n可搜索的树。\n\n## en-US\n\nSearchable Tree.\n\n````jsx\nimport { Tree, Input } from 'antd';\n\nconst TreeNode = Tree.TreeNode;\nconst Search = Input.Search;\n\nconst x = 3;\nconst y = 2;\nconst z = 1;\nconst gData = [];\n\nconst generateData = (_level, _preKey, _tns) => {\n  const preKey = _preKey || '0';\n  const tns = _tns || gData;\n\n  const children = [];\n  for (let i = 0; i < x; i++) {\n    const key = `${preKey}-${i}`;\n    tns.push({ title: key, key });\n    if (i < y) {\n      children.push(key);\n    }\n  }\n  if (_level < 0) {\n    return tns;\n  }\n  const level = _level - 1;\n  children.forEach((key, index) => {\n    tns[index].children = [];\n    return generateData(level, key, tns[index].children);\n  });\n};\ngenerateData(z);\n\nconst dataList = [];\nconst generateList = (data) => {\n  for (let i = 0; i < data.length; i++) {\n    const node = data[i];\n    const key = node.key;\n    dataList.push({ key, title: key });\n    if (node.children) {\n      generateList(node.children, node.key);\n    }\n  }\n};\ngenerateList(gData);\n\nconst getParentKey = (key, tree) => {\n  let parentKey;\n  for (let i = 0; i < tree.length; i++) {\n    const node = tree[i];\n    if (node.children) {\n      if (node.children.some(item => item.key === key)) {\n        parentKey = node.key;\n      } else if (getParentKey(key, node.children)) {\n        parentKey = getParentKey(key, node.children);\n      }\n    }\n  }\n  return parentKey;\n};\n\nclass SearchTree extends React.Component {\n  state = {\n    expandedKeys: [],\n    searchValue: '',\n    autoExpandParent: true,\n  }\n  onExpand = (expandedKeys) => {\n    this.setState({\n      expandedKeys,\n      autoExpandParent: false,\n    });\n  }\n  onChange = (e) => {\n    const value = e.target.value;\n    const expandedKeys = dataList.map((item) => {\n      if (item.key.indexOf(value) > -1) {\n        return getParentKey(item.key, gData);\n      }\n      return null;\n    }).filter((item, i, self) => item && self.indexOf(item) === i);\n    this.setState({\n      expandedKeys,\n      searchValue: value,\n      autoExpandParent: true,\n    });\n  }\n  render() {\n    const { searchValue, expandedKeys, autoExpandParent } = this.state;\n    const loop = data => data.map((item) => {\n      const index = item.key.search(searchValue);\n      const beforeStr = item.key.substr(0, index);\n      const afterStr = item.key.substr(index + searchValue.length);\n      const title = index > -1 ? (\n        <span>\n          {beforeStr}\n          <span style={{ color: '#f50' }}>{searchValue}</span>\n          {afterStr}\n        </span>\n      ) : <span>{item.key}</span>;\n      if (item.children) {\n        return (\n          <TreeNode key={item.key} title={title}>\n            {loop(item.children)}\n          </TreeNode>\n        );\n      }\n      return <TreeNode key={item.key} title={title} />;\n    });\n    return (\n      <div>\n        <Search style={{ width: 300 }} placeholder=\"Search\" onChange={this.onChange} />\n        <Tree\n          onExpand={this.onExpand}\n          expandedKeys={expandedKeys}\n          autoExpandParent={autoExpandParent}\n        >\n          {loop(gData)}\n        </Tree>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<SearchTree />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Tree, Input } from 'antd';\n\nconst TreeNode = Tree.TreeNode;\nconst Search = Input.Search;\n\nconst x = 3;\nconst y = 2;\nconst z = 1;\nconst gData = [];\n\nconst generateData = (_level, _preKey, _tns) => {\n  const preKey = _preKey || '0';\n  const tns = _tns || gData;\n\n  const children = [];\n  for (let i = 0; i < x; i++) {\n    const key = `${preKey}-${i}`;\n    tns.push({ title: key, key });\n    if (i < y) {\n      children.push(key);\n    }\n  }\n  if (_level < 0) {\n    return tns;\n  }\n  const level = _level - 1;\n  children.forEach((key, index) => {\n    tns[index].children = [];\n    return generateData(level, key, tns[index].children);\n  });\n};\ngenerateData(z);\n\nconst dataList = [];\nconst generateList = (data) => {\n  for (let i = 0; i < data.length; i++) {\n    const node = data[i];\n    const key = node.key;\n    dataList.push({ key, title: key });\n    if (node.children) {\n      generateList(node.children, node.key);\n    }\n  }\n};\ngenerateList(gData);\n\nconst getParentKey = (key, tree) => {\n  let parentKey;\n  for (let i = 0; i < tree.length; i++) {\n    const node = tree[i];\n    if (node.children) {\n      if (node.children.some(item => item.key === key)) {\n        parentKey = node.key;\n      } else if (getParentKey(key, node.children)) {\n        parentKey = getParentKey(key, node.children);\n      }\n    }\n  }\n  return parentKey;\n};\n\nclass SearchTree extends React.Component {\n  state = {\n    expandedKeys: [],\n    searchValue: '',\n    autoExpandParent: true,\n  }\n  onExpand = (expandedKeys) => {\n    this.setState({\n      expandedKeys,\n      autoExpandParent: false,\n    });\n  }\n  onChange = (e) => {\n    const value = e.target.value;\n    const expandedKeys = dataList.map((item) => {\n      if (item.key.indexOf(value) > -1) {\n        return getParentKey(item.key, gData);\n      }\n      return null;\n    }).filter((item, i, self) => item && self.indexOf(item) === i);\n    this.setState({\n      expandedKeys,\n      searchValue: value,\n      autoExpandParent: true,\n    });\n  }\n  render() {\n    const { searchValue, expandedKeys, autoExpandParent } = this.state;\n    const loop = data => data.map((item) => {\n      const index = item.key.search(searchValue);\n      const beforeStr = item.key.substr(0, index);\n      const afterStr = item.key.substr(index + searchValue.length);\n      const title = index > -1 ? (\n        <span>\n          {beforeStr}\n          <span style={{ color: '#f50' }}>{searchValue}</span>\n          {afterStr}\n        </span>\n      ) : <span>{item.key}</span>;\n      if (item.children) {\n        return (\n          <TreeNode key={item.key} title={title}>\n            {loop(item.children)}\n          </TreeNode>\n        );\n      }\n      return <TreeNode key={item.key} title={title} />;\n    });\n    return (\n      <div>\n        <Search style={{ width: 300 }} placeholder=\"Search\" onChange={this.onChange} />\n        <Tree\n          onExpand={this.onExpand}\n          expandedKeys={expandedKeys}\n          autoExpandParent={autoExpandParent}\n        >\n          {loop(gData)}\n        </Tree>\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_tree_search() {\nreturn(<SearchTree />);\n};\n\nexport const demo = <DemoComponent_tree_search key=\"DemoComponent_tree_search\" />;\n"],"cssCodes":[]}]},{"name":"tree_select","demos":[{"name":"basic","content":"---\norder: 0\ntitle:\n  zh-CN: 基本\n  en-US: Basic\n---\n\n## zh-CN\n\n最简单的用法。\n\n## en-US\n\nThe most basic usage.\n\n````jsx\nimport { TreeSelect } from 'antd';\nconst TreeNode = TreeSelect.TreeNode;\n\nclass Demo extends React.Component {\n  state = {\n    value: undefined,\n  }\n  onChange = (value) => {\n    console.log(arguments);\n    this.setState({ value });\n  }\n  render() {\n    return (\n      <TreeSelect\n        showSearch\n        style={{ width: 300 }}\n        value={this.state.value}\n        dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n        placeholder=\"Please select\"\n        allowClear\n        treeDefaultExpandAll\n        onChange={this.onChange}\n      >\n        <TreeNode value=\"parent 1\" title=\"parent 1\" key=\"0-1\">\n          <TreeNode value=\"parent 1-0\" title=\"parent 1-0\" key=\"0-1-1\">\n            <TreeNode value=\"leaf1\" title=\"my leaf\" key=\"random\" />\n            <TreeNode value=\"leaf2\" title=\"your leaf\" key=\"random1\" />\n          </TreeNode>\n          <TreeNode value=\"parent 1-1\" title=\"parent 1-1\" key=\"random2\">\n            <TreeNode value=\"sss\" title={<b style={{ color: '#08c' }}>sss</b>} key=\"random3\" />\n          </TreeNode>\n        </TreeNode>\n      </TreeSelect>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { TreeSelect } from 'antd';\nconst TreeNode = TreeSelect.TreeNode;\n\nclass Demo extends React.Component {\n  state = {\n    value: undefined,\n  }\n  onChange = (value) => {\n    console.log(arguments);\n    this.setState({ value });\n  }\n  render() {\n    return (\n      <TreeSelect\n        showSearch\n        style={{ width: 300 }}\n        value={this.state.value}\n        dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n        placeholder=\"Please select\"\n        allowClear\n        treeDefaultExpandAll\n        onChange={this.onChange}\n      >\n        <TreeNode value=\"parent 1\" title=\"parent 1\" key=\"0-1\">\n          <TreeNode value=\"parent 1-0\" title=\"parent 1-0\" key=\"0-1-1\">\n            <TreeNode value=\"leaf1\" title=\"my leaf\" key=\"random\" />\n            <TreeNode value=\"leaf2\" title=\"your leaf\" key=\"random1\" />\n          </TreeNode>\n          <TreeNode value=\"parent 1-1\" title=\"parent 1-1\" key=\"random2\">\n            <TreeNode value=\"sss\" title={<b style={{ color: '#08c' }}>sss</b>} key=\"random3\" />\n          </TreeNode>\n        </TreeNode>\n      </TreeSelect>\n    );\n  }\n}\n\nexport default function DemoComponent_tree_select_basic() {\nreturn(<Demo />);\n};\n\nexport const demo = <DemoComponent_tree_select_basic key=\"DemoComponent_tree_select_basic\" />;\n"],"cssCodes":[]},{"name":"checkable","content":"---\norder: 2\ntitle:\n  zh-CN: 多选\n  en-US: Multiple\n---\n\n## zh-CN\n\n多选和勾选框功能。\n\n## en-US\n\nMultiple and checkable.\n\n````jsx\nimport { TreeSelect } from 'antd';\nconst SHOW_PARENT = TreeSelect.SHOW_PARENT;\n\nconst treeData = [{\n  label: 'Node1',\n  value: '0-0',\n  key: '0-0',\n  children: [{\n    label: 'Child Node1',\n    value: '0-0-0',\n    key: '0-0-0',\n  }],\n}, {\n  label: 'Node2',\n  value: '0-1',\n  key: '0-1',\n  children: [{\n    label: 'Child Node3',\n    value: '0-1-0',\n    key: '0-1-0',\n  }, {\n    label: 'Child Node4',\n    value: '0-1-1',\n    key: '0-1-1',\n  }, {\n    label: 'Child Node5',\n    value: '0-1-2',\n    key: '0-1-2',\n  }],\n}];\n\nclass Demo extends React.Component {\n  state = {\n    value: ['0-0-0'],\n  }\n  onChange = (value) => {\n    console.log('onChange ', value, arguments);\n    this.setState({ value });\n  }\n  render() {\n    const tProps = {\n      treeData,\n      value: this.state.value,\n      onChange: this.onChange,\n      multiple: true,\n      treeCheckable: true,\n      showCheckedStrategy: SHOW_PARENT,\n      searchPlaceholder: 'Please select',\n      style: {\n        width: 300,\n      },\n    };\n    return <TreeSelect {...tProps} />;\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { TreeSelect } from 'antd';\nconst SHOW_PARENT = TreeSelect.SHOW_PARENT;\n\nconst treeData = [{\n  label: 'Node1',\n  value: '0-0',\n  key: '0-0',\n  children: [{\n    label: 'Child Node1',\n    value: '0-0-0',\n    key: '0-0-0',\n  }],\n}, {\n  label: 'Node2',\n  value: '0-1',\n  key: '0-1',\n  children: [{\n    label: 'Child Node3',\n    value: '0-1-0',\n    key: '0-1-0',\n  }, {\n    label: 'Child Node4',\n    value: '0-1-1',\n    key: '0-1-1',\n  }, {\n    label: 'Child Node5',\n    value: '0-1-2',\n    key: '0-1-2',\n  }],\n}];\n\nclass Demo extends React.Component {\n  state = {\n    value: ['0-0-0'],\n  }\n  onChange = (value) => {\n    console.log('onChange ', value, arguments);\n    this.setState({ value });\n  }\n  render() {\n    const tProps = {\n      treeData,\n      value: this.state.value,\n      onChange: this.onChange,\n      multiple: true,\n      treeCheckable: true,\n      showCheckedStrategy: SHOW_PARENT,\n      searchPlaceholder: 'Please select',\n      style: {\n        width: 300,\n      },\n    };\n    return <TreeSelect {...tProps} />;\n  }\n}\n\nexport default function DemoComponent_tree_select_checkable() {\nreturn(<Demo />);\n};\n\nexport const demo = <DemoComponent_tree_select_checkable key=\"DemoComponent_tree_select_checkable\" />;\n"],"cssCodes":[]},{"name":"treeData","content":"---\norder: 1\ntitle:\n  zh-CN: 从数据直接生成\n  en-US: Generate form tree data\n---\n\n## zh-CN\n\n使用 `treeData` 把 JSON 数据直接生成树结构。\n\n## en-US\n\nThe tree structure can be populated using `treeData` property. This is a quick and easy way to provide the tree content.\n\n\n````jsx\nimport { TreeSelect } from 'antd';\n\nconst treeData = [{\n  label: 'Node1',\n  value: '0-0',\n  key: '0-0',\n  children: [{\n    label: 'Child Node1',\n    value: '0-0-1',\n    key: '0-0-1',\n  }, {\n    label: 'Child Node2',\n    value: '0-0-2',\n    key: '0-0-2',\n  }],\n}, {\n  label: 'Node2',\n  value: '0-1',\n  key: '0-1',\n}];\n\nclass Demo extends React.Component {\n  state = {\n    value: undefined,\n  }\n  onChange = (value) => {\n    console.log(arguments);\n    this.setState({ value });\n  }\n  render() {\n    return (\n      <TreeSelect\n        style={{ width: 300 }}\n        value={this.state.value}\n        dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n        treeData={treeData}\n        placeholder=\"Please select\"\n        treeDefaultExpandAll\n        onChange={this.onChange}\n      />\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { TreeSelect } from 'antd';\n\nconst treeData = [{\n  label: 'Node1',\n  value: '0-0',\n  key: '0-0',\n  children: [{\n    label: 'Child Node1',\n    value: '0-0-1',\n    key: '0-0-1',\n  }, {\n    label: 'Child Node2',\n    value: '0-0-2',\n    key: '0-0-2',\n  }],\n}, {\n  label: 'Node2',\n  value: '0-1',\n  key: '0-1',\n}];\n\nclass Demo extends React.Component {\n  state = {\n    value: undefined,\n  }\n  onChange = (value) => {\n    console.log(arguments);\n    this.setState({ value });\n  }\n  render() {\n    return (\n      <TreeSelect\n        style={{ width: 300 }}\n        value={this.state.value}\n        dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n        treeData={treeData}\n        placeholder=\"Please select\"\n        treeDefaultExpandAll\n        onChange={this.onChange}\n      />\n    );\n  }\n}\n\nexport default function DemoComponent_tree_select_treeData() {\nreturn(<Demo />);\n};\n\nexport const demo = <DemoComponent_tree_select_treeData key=\"DemoComponent_tree_select_treeData\" />;\n"],"cssCodes":[]}]},{"name":"upload","demos":[{"name":"avatar","content":"---\norder: 1\ntitle:\n  zh-CN: 用户头像\n  en-US: Avatar\n---\n\n## zh-CN\n\n点击上传用户头像，并使用 `beforeUpload` 限制用户上传的图片格式和大小。\n\n> `beforeUpload` 的返回值可以是一个 Promise 以支持也支持异步检查：[示例](http://react-component.github.io/upload/examples/beforeUpload.html)。\n\n## en-US\n\nClick to upload user's avatar, and validate size and format of picture with `beforeUpload`.\n\n> The return value of function `beforeUpload` can be a Promise to check asynchronously. [demo](http://react-component.github.io/upload/examples/beforeUpload.html)\n\n````jsx\nimport { Upload, Icon, message } from 'antd';\n\nfunction getBase64(img, callback) {\n  const reader = new FileReader();\n  reader.addEventListener('load', () => callback(reader.result));\n  reader.readAsDataURL(img);\n}\n\nfunction beforeUpload(file) {\n  const isJPG = file.type === 'image/jpeg';\n  if (!isJPG) {\n    message.error('You can only upload JPG file!');\n  }\n  const isLt2M = file.size / 1024 / 1024 < 2;\n  if (!isLt2M) {\n    message.error('Image must smaller than 2MB!');\n  }\n  return isJPG && isLt2M;\n}\n\nclass Avatar extends React.Component {\n  state = {};\n\n  handleChange = (info) => {\n    if (info.file.status === 'done') {\n      // Get this url from response in real world.\n      getBase64(info.file.originFileObj, imageUrl => this.setState({ imageUrl }));\n    }\n  }\n\n  render() {\n    const imageUrl = this.state.imageUrl;\n    return (\n      <Upload\n        className=\"avatar-uploader\"\n        name=\"avatar\"\n        showUploadList={false}\n        action=\"//jsonplaceholder.typicode.com/posts/\"\n        beforeUpload={beforeUpload}\n        onChange={this.handleChange}\n      >\n        {\n          imageUrl ?\n            <img src={imageUrl} alt=\"\" className=\"avatar\" /> :\n            <Icon type=\"plus\" className=\"avatar-uploader-trigger\" />\n        }\n      </Upload>\n    );\n  }\n}\n\nReactDOM.render(<Avatar />, mountNode);\n````\n\n````css\n.avatar-uploader,\n.avatar-uploader-trigger,\n.avatar {\n  width: 150px;\n  height: 150px;\n}\n.avatar-uploader {\n  display: block;\n  border: 1px dashed #d9d9d9;\n  border-radius: 6px;\n  cursor: pointer;\n}\n.avatar-uploader-trigger {\n  display: table-cell;\n  vertical-align: middle;\n  font-size: 28px;\n  color: #999;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Upload, Icon, message } from 'antd';\n\nfunction getBase64(img, callback) {\n  const reader = new FileReader();\n  reader.addEventListener('load', () => callback(reader.result));\n  reader.readAsDataURL(img);\n}\n\nfunction beforeUpload(file) {\n  const isJPG = file.type === 'image/jpeg';\n  if (!isJPG) {\n    message.error('You can only upload JPG file!');\n  }\n  const isLt2M = file.size / 1024 / 1024 < 2;\n  if (!isLt2M) {\n    message.error('Image must smaller than 2MB!');\n  }\n  return isJPG && isLt2M;\n}\n\nclass Avatar extends React.Component {\n  state = {};\n\n  handleChange = (info) => {\n    if (info.file.status === 'done') {\n      // Get this url from response in real world.\n      getBase64(info.file.originFileObj, imageUrl => this.setState({ imageUrl }));\n    }\n  }\n\n  render() {\n    const imageUrl = this.state.imageUrl;\n    return (\n      <Upload\n        className=\"avatar-uploader\"\n        name=\"avatar\"\n        showUploadList={false}\n        action=\"//jsonplaceholder.typicode.com/posts/\"\n        beforeUpload={beforeUpload}\n        onChange={this.handleChange}\n      >\n        {\n          imageUrl ?\n            <img src={imageUrl} alt=\"\" className=\"avatar\" /> :\n            <Icon type=\"plus\" className=\"avatar-uploader-trigger\" />\n        }\n      </Upload>\n    );\n  }\n}\n\nexport default function DemoComponent_upload_avatar() {\nreturn(<Avatar />);\n};\n\nexport const demo = <DemoComponent_upload_avatar key=\"DemoComponent_upload_avatar\" />;\n"],"cssCodes":[".avatar-uploader,\n.avatar-uploader-trigger,\n.avatar {\n  width: 150px;\n  height: 150px;\n}\n.avatar-uploader {\n  display: block;\n  border: 1px dashed #d9d9d9;\n  border-radius: 6px;\n  cursor: pointer;\n}\n.avatar-uploader-trigger {\n  display: table-cell;\n  vertical-align: middle;\n  font-size: 28px;\n  color: #999;\n}\n"]},{"name":"basic","content":"---\norder: 0\ntitle:\n  zh-CN: 点击上传\n  en-US: Upload by clicking\n---\n\n## zh-CN\n\n经典款式，用户点击按钮弹出文件选择框。\n\n## en-US\n\nClassic mode. File selection dialog pops up when upload button is clicked.\n\n````jsx\nimport { Upload, message, Button, Icon } from 'antd';\n\nconst props = {\n  name: 'file',\n  action: '//jsonplaceholder.typicode.com/posts/',\n  headers: {\n    authorization: 'authorization-text',\n  },\n  onChange(info) {\n    if (info.file.status !== 'uploading') {\n      console.log(info.file, info.fileList);\n    }\n    if (info.file.status === 'done') {\n      message.success(`${info.file.name} file uploaded successfully`);\n    } else if (info.file.status === 'error') {\n      message.error(`${info.file.name} file upload failed.`);\n    }\n  },\n};\n\nReactDOM.render(\n  <Upload {...props}>\n    <Button>\n      <Icon type=\"upload\" /> Click to Upload\n    </Button>\n  </Upload>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Upload, message, Button, Icon } from 'antd';\n\nconst props = {\n  name: 'file',\n  action: '//jsonplaceholder.typicode.com/posts/',\n  headers: {\n    authorization: 'authorization-text',\n  },\n  onChange(info) {\n    if (info.file.status !== 'uploading') {\n      console.log(info.file, info.fileList);\n    }\n    if (info.file.status === 'done') {\n      message.success(`${info.file.name} file uploaded successfully`);\n    } else if (info.file.status === 'error') {\n      message.error(`${info.file.name} file upload failed.`);\n    }\n  },\n};\n\nexport default function DemoComponent_upload_basic() {\nreturn(\n  <Upload {...props}>\n    <Button>\n      <Icon type=\"upload\" /> Click to Upload\n    </Button>\n  </Upload>\n);\n};\n\nexport const demo = <DemoComponent_upload_basic key=\"DemoComponent_upload_basic\" />;\n"],"cssCodes":[]},{"name":"defaultFileList","content":"---\norder: 2\ntitle:\n  zh-CN: 已上传的文件列表\n  en-US: Default Files\n---\n\n## zh-CN\n\n使用 `defaultFileList` 设置已上传的内容。\n\n## en-US\n\nUse `defaultFileList` for uploaded files when page init.\n\n````jsx\nimport { Upload, Button, Icon } from 'antd';\n\nconst props = {\n  action: '//jsonplaceholder.typicode.com/posts/',\n  onChange({ file, fileList }) {\n    if (file.status !== 'uploading') {\n      console.log(file, fileList);\n    }\n  },\n  defaultFileList: [{\n    uid: 1,\n    name: 'xxx.png',\n    status: 'done',\n    reponse: 'Server Error 500',  // custom error message to show\n    url: 'http://www.baidu.com/xxx.png',\n  }, {\n    uid: 2,\n    name: 'yyy.png',\n    status: 'done',\n    url: 'http://www.baidu.com/yyy.png',\n  }, {\n    uid: 3,\n    name: 'zzz.png',\n    status: 'error',\n    reponse: 'Server Error 500',  // custom error message to show\n    url: 'http://www.baidu.com/zzz.png',\n  }],\n};\n\nReactDOM.render(\n  <Upload {...props}>\n    <Button>\n      <Icon type=\"upload\" /> Upload\n    </Button>\n  </Upload>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Upload, Button, Icon } from 'antd';\n\nconst props = {\n  action: '//jsonplaceholder.typicode.com/posts/',\n  onChange({ file, fileList }) {\n    if (file.status !== 'uploading') {\n      console.log(file, fileList);\n    }\n  },\n  defaultFileList: [{\n    uid: 1,\n    name: 'xxx.png',\n    status: 'done',\n    reponse: 'Server Error 500',  // custom error message to show\n    url: 'http://www.baidu.com/xxx.png',\n  }, {\n    uid: 2,\n    name: 'yyy.png',\n    status: 'done',\n    url: 'http://www.baidu.com/yyy.png',\n  }, {\n    uid: 3,\n    name: 'zzz.png',\n    status: 'error',\n    reponse: 'Server Error 500',  // custom error message to show\n    url: 'http://www.baidu.com/zzz.png',\n  }],\n};\n\nexport default function DemoComponent_upload_defaultFileList() {\nreturn(\n  <Upload {...props}>\n    <Button>\n      <Icon type=\"upload\" /> Upload\n    </Button>\n  </Upload>\n);\n};\n\nexport const demo = <DemoComponent_upload_defaultFileList key=\"DemoComponent_upload_defaultFileList\" />;\n"],"cssCodes":[]},{"name":"drag","content":"---\norder: 5\ntitle:\n  zh-CN: 拖拽上传\n  en-US: Drag and Drop\n---\n\n## zh-CN\n\n把文件拖入指定区域，完成上传，同样支持点击上传。\n\n设置 `multiple` 后，在 `IE10+` 可以一次上传多个文件。\n\n## en-US\n\nYou can drag files to a specific area, to upload. Alternatively, you can also upload by selecting.\n\nWe can upload serveral files at once in modern browsers by giving the input the `multiple` attribute.\n\n````jsx\nimport { Upload, Icon, message } from 'antd';\nconst Dragger = Upload.Dragger;\n\nconst props = {\n  name: 'file',\n  multiple: true,\n  showUploadList: false,\n  action: '//jsonplaceholder.typicode.com/posts/',\n  onChange(info) {\n    const status = info.file.status;\n    if (status !== 'uploading') {\n      console.log(info.file, info.fileList);\n    }\n    if (status === 'done') {\n      message.success(`${info.file.name} file uploaded successfully.`);\n    } else if (status === 'error') {\n      message.error(`${info.file.name} file upload failed.`);\n    }\n  },\n};\n\nReactDOM.render(\n  <div style={{ marginTop: 16, height: 180 }}>\n    <Dragger {...props}>\n      <p className=\"ant-upload-drag-icon\">\n        <Icon type=\"inbox\" />\n      </p>\n      <p className=\"ant-upload-text\">Click or drag file to this area to upload</p>\n      <p className=\"ant-upload-hint\">Support for a single or bulk upload. Strictly prohibit from uploading company data or other band files</p>\n    </Dragger>\n  </div>\n, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Upload, Icon, message } from 'antd';\nconst Dragger = Upload.Dragger;\n\nconst props = {\n  name: 'file',\n  multiple: true,\n  showUploadList: false,\n  action: '//jsonplaceholder.typicode.com/posts/',\n  onChange(info) {\n    const status = info.file.status;\n    if (status !== 'uploading') {\n      console.log(info.file, info.fileList);\n    }\n    if (status === 'done') {\n      message.success(`${info.file.name} file uploaded successfully.`);\n    } else if (status === 'error') {\n      message.error(`${info.file.name} file upload failed.`);\n    }\n  },\n};\n\nexport default function DemoComponent_upload_drag() {\nreturn(\n  <div style={{ marginTop: 16, height: 180 }}>\n    <Dragger {...props}>\n      <p className=\"ant-upload-drag-icon\">\n        <Icon type=\"inbox\" />\n      </p>\n      <p className=\"ant-upload-text\">Click or drag file to this area to upload</p>\n      <p className=\"ant-upload-hint\">Support for a single or bulk upload. Strictly prohibit from uploading company data or other band files</p>\n    </Dragger>\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_upload_drag key=\"DemoComponent_upload_drag\" />;\n"],"cssCodes":[]},{"name":"fileList","content":"---\norder: 4\ntitle:\n  zh-CN: 完全控制的上传列表\n  en-US: Complete control over file list\n---\n\n## zh-CN\n\n使用 `fileList` 对列表进行完全控制，可以实现各种自定义功能，以下演示三种情况：\n\n1) 上传列表数量的限制。\n\n2) 读取远程路径并显示链接。\n\n3) 按照服务器返回信息筛选成功上传的文件。\n\n## en-US\n\nYou can gain full control over filelist by configuring `fileList`. You can accomplish all kinds of customed functions. The following shows three circumstances:\n\n1) limit the number of uploaded files.\n\n2) read from response and show file link.\n\n3) filter successfully uploaded files according to response from server.\n\n````jsx\nimport { Upload, Button, Icon } from 'antd';\n\nclass MyUpload extends React.Component {\n  state = {\n    fileList: [{\n      uid: -1,\n      name: 'xxx.png',\n      status: 'done',\n      url: 'http://www.baidu.com/xxx.png',\n    }],\n  }\n  handleChange = (info) => {\n    let fileList = info.fileList;\n\n    // 1. Limit the number of uploaded files\n    //    Only to show two recent uploaded files, and old ones will be replaced by the new\n    fileList = fileList.slice(-2);\n\n    // 2. read from response and show file link\n    fileList = fileList.map((file) => {\n      if (file.response) {\n        // Component will show file.url as link\n        file.url = file.response.url;\n      }\n      return file;\n    });\n\n    // 3. filter successfully uploaded files according to response from server\n    fileList = fileList.filter((file) => {\n      if (file.response) {\n        return file.response.status === 'success';\n      }\n      return true;\n    });\n\n    this.setState({ fileList });\n  }\n  render() {\n    const props = {\n      action: '//jsonplaceholder.typicode.com/posts/',\n      onChange: this.handleChange,\n      multiple: true,\n    };\n    return (\n      <Upload {...props} fileList={this.state.fileList}>\n        <Button>\n          <Icon type=\"upload\" /> upload\n        </Button>\n      </Upload>\n    );\n  }\n}\n\nReactDOM.render(<MyUpload />, mountNode);\n````\n","jsCodes":["import React from 'react';\nimport { Upload, Button, Icon } from 'antd';\n\nclass MyUpload extends React.Component {\n  state = {\n    fileList: [{\n      uid: -1,\n      name: 'xxx.png',\n      status: 'done',\n      url: 'http://www.baidu.com/xxx.png',\n    }],\n  }\n  handleChange = (info) => {\n    let fileList = info.fileList;\n\n    // 1. Limit the number of uploaded files\n    //    Only to show two recent uploaded files, and old ones will be replaced by the new\n    fileList = fileList.slice(-2);\n\n    // 2. read from response and show file link\n    fileList = fileList.map((file) => {\n      if (file.response) {\n        // Component will show file.url as link\n        file.url = file.response.url;\n      }\n      return file;\n    });\n\n    // 3. filter successfully uploaded files according to response from server\n    fileList = fileList.filter((file) => {\n      if (file.response) {\n        return file.response.status === 'success';\n      }\n      return true;\n    });\n\n    this.setState({ fileList });\n  }\n  render() {\n    const props = {\n      action: '//jsonplaceholder.typicode.com/posts/',\n      onChange: this.handleChange,\n      multiple: true,\n    };\n    return (\n      <Upload {...props} fileList={this.state.fileList}>\n        <Button>\n          <Icon type=\"upload\" /> upload\n        </Button>\n      </Upload>\n    );\n  }\n}\n\nexport default function DemoComponent_upload_fileList() {\nreturn(<MyUpload />);\n};\n\nexport const demo = <DemoComponent_upload_fileList key=\"DemoComponent_upload_fileList\" />;\n"],"cssCodes":[]},{"name":"picture_card","content":"---\norder: 3\ntitle:\n  zh-CN: 照片墙\n  en-US: Pictures Wall\n---\n\n## zh-CN\n\n用户可以上传图片并在列表中显示缩略图。当上传照片数到达限制后，上传按钮消失。\n\n## en-US\n\nAfter users upload picture, the thumbnail will be shown in list. The upload button will disappear when count meets limitation.\n\n````jsx\nimport { Upload, Icon, Modal } from 'antd';\n\nclass PicturesWall extends React.Component {\n  state = {\n    previewVisible: false,\n    previewImage: '',\n    fileList: [{\n      uid: -1,\n      name: 'xxx.png',\n      status: 'done',\n      url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\n    }],\n  };\n\n  handleCancel = () => this.setState({ previewVisible: false })\n\n  handlePreview = (file) => {\n    this.setState({\n      previewImage: file.url || file.thumbUrl,\n      previewVisible: true,\n    });\n  }\n\n  handleChange = ({ fileList }) => this.setState({ fileList })\n\n  render() {\n    const { previewVisible, previewImage, fileList } = this.state;\n    const uploadButton = (\n      <div>\n        <Icon type=\"plus\" />\n        <div className=\"ant-upload-text\">Upload</div>\n      </div>\n    );\n    return (\n      <div className=\"clearfix\">\n        <Upload\n          action=\"//jsonplaceholder.typicode.com/posts/\"\n          listType=\"picture-card\"\n          fileList={fileList}\n          onPreview={this.handlePreview}\n          onChange={this.handleChange}\n        >\n          {fileList.length >= 3 ? null : uploadButton}\n        </Upload>\n        <Modal visible={previewVisible} footer={null} onCancel={this.handleCancel}>\n          <img alt=\"example\" style={{ width: '100%' }} src={previewImage} />\n        </Modal>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<PicturesWall />, mountNode);\n````\n\n````css\n/* you can make up upload button and sample style by using stylesheets */\n.ant-upload-select-picture-card i {\n  font-size: 28px;\n  color: #999;\n}\n\n.ant-upload-select-picture-card .ant-upload-text {\n  margin-top: 8px;\n  font-size: 12px;\n  color: #666;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Upload, Icon, Modal } from 'antd';\n\nclass PicturesWall extends React.Component {\n  state = {\n    previewVisible: false,\n    previewImage: '',\n    fileList: [{\n      uid: -1,\n      name: 'xxx.png',\n      status: 'done',\n      url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\n    }],\n  };\n\n  handleCancel = () => this.setState({ previewVisible: false })\n\n  handlePreview = (file) => {\n    this.setState({\n      previewImage: file.url || file.thumbUrl,\n      previewVisible: true,\n    });\n  }\n\n  handleChange = ({ fileList }) => this.setState({ fileList })\n\n  render() {\n    const { previewVisible, previewImage, fileList } = this.state;\n    const uploadButton = (\n      <div>\n        <Icon type=\"plus\" />\n        <div className=\"ant-upload-text\">Upload</div>\n      </div>\n    );\n    return (\n      <div className=\"clearfix\">\n        <Upload\n          action=\"//jsonplaceholder.typicode.com/posts/\"\n          listType=\"picture-card\"\n          fileList={fileList}\n          onPreview={this.handlePreview}\n          onChange={this.handleChange}\n        >\n          {fileList.length >= 3 ? null : uploadButton}\n        </Upload>\n        <Modal visible={previewVisible} footer={null} onCancel={this.handleCancel}>\n          <img alt=\"example\" style={{ width: '100%' }} src={previewImage} />\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default function DemoComponent_upload_picture_card() {\nreturn(<PicturesWall />);\n};\n\nexport const demo = <DemoComponent_upload_picture_card key=\"DemoComponent_upload_picture_card\" />;\n"],"cssCodes":["/* you can make up upload button and sample style by using stylesheets */\n.ant-upload-select-picture-card i {\n  font-size: 28px;\n  color: #999;\n}\n\n.ant-upload-select-picture-card .ant-upload-text {\n  margin-top: 8px;\n  font-size: 12px;\n  color: #666;\n}\n"]},{"name":"picture_style","content":"---\norder: 6\ntitle:\n  zh-CN: 图片列表样式\n  en-US: Pictures with list style\n---\n\n## zh-CN\n\n上传文件为图片，可展示本地缩略图。`IE8/9` 不支持浏览器本地缩略图展示（[Ref](https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL)），可以写 `thumbUrl` 属性来代替。\n\n## en-US\n\nIf uploade file is picture, a thumbnail can be shown. `IE8/9` do not support local thumbnail show. Please use `thumbUrl` instead.\n\n\n````jsx\nimport { Upload, Button, Icon } from 'antd';\n\nconst fileList = [{\n  uid: -1,\n  name: 'xxx.png',\n  status: 'done',\n  url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\n  thumbUrl: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\n}, {\n  uid: -2,\n  name: 'yyy.png',\n  status: 'done',\n  url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\n  thumbUrl: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\n}];\n\nconst props = {\n  action: '//jsonplaceholder.typicode.com/posts/',\n  listType: 'picture',\n  defaultFileList: [...fileList],\n};\n\nconst props2 = {\n  action: '//jsonplaceholder.typicode.com/posts/',\n  listType: 'picture',\n  defaultFileList: [...fileList],\n  className: 'upload-list-inline',\n};\n\nReactDOM.render(\n  <div>\n    <Upload {...props}>\n      <Button>\n        <Icon type=\"upload\" /> upload\n      </Button>\n    </Upload>\n    <br />\n    <br />\n    <Upload {...props2}>\n      <Button>\n        <Icon type=\"upload\" /> upload\n      </Button>\n    </Upload>\n  </div>\n, mountNode);\n````\n\n````css\n/* tile uploaded pictures */\n.upload-list-inline .ant-upload-list-item {\n  float: left;\n  width: 200px;\n  margin-right: 8px;\n}\n.upload-list-inline .ant-upload-animate-enter {\n  animation-name: uploadAnimateInlineIn;\n}\n.upload-list-inline .ant-upload-animate-leave {\n  animation-name: uploadAnimateInlineOut;\n}\n````\n","jsCodes":["import React from 'react';\nimport { Upload, Button, Icon } from 'antd';\n\nconst fileList = [{\n  uid: -1,\n  name: 'xxx.png',\n  status: 'done',\n  url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\n  thumbUrl: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\n}, {\n  uid: -2,\n  name: 'yyy.png',\n  status: 'done',\n  url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\n  thumbUrl: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\n}];\n\nconst props = {\n  action: '//jsonplaceholder.typicode.com/posts/',\n  listType: 'picture',\n  defaultFileList: [...fileList],\n};\n\nconst props2 = {\n  action: '//jsonplaceholder.typicode.com/posts/',\n  listType: 'picture',\n  defaultFileList: [...fileList],\n  className: 'upload-list-inline',\n};\n\nexport default function DemoComponent_upload_picture_style() {\nreturn(\n  <div>\n    <Upload {...props}>\n      <Button>\n        <Icon type=\"upload\" /> upload\n      </Button>\n    </Upload>\n    <br />\n    <br />\n    <Upload {...props2}>\n      <Button>\n        <Icon type=\"upload\" /> upload\n      </Button>\n    </Upload>\n  </div>\n);\n};\n\nexport const demo = <DemoComponent_upload_picture_style key=\"DemoComponent_upload_picture_style\" />;\n"],"cssCodes":["/* tile uploaded pictures */\n.upload-list-inline .ant-upload-list-item {\n  float: left;\n  width: 200px;\n  margin-right: 8px;\n}\n.upload-list-inline .ant-upload-animate-enter {\n  animation-name: uploadAnimateInlineIn;\n}\n.upload-list-inline .ant-upload-animate-leave {\n  animation-name: uploadAnimateInlineOut;\n}\n"]}]}]